/*
 * Copyright (c) 2014-2021, Achim Friedland <achim.friedland@graphdefined.com>
 * This file is part of UsersAPI <https://www.github.com/Vanaheimr/UsersAPI>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#region Usings

using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.Net.Security;
using System.Security.Authentication;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Collections.Concurrent;
using System.Collections.Generic;

using Newtonsoft.Json.Linq;

using Org.BouncyCastle.Asn1.Sec;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Bcpg.OpenPgp;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.X509;

using org.GraphDefined.Vanaheimr.Illias;
using org.GraphDefined.Vanaheimr.Styx.Arrows;
using org.GraphDefined.Vanaheimr.Warden;
using org.GraphDefined.Vanaheimr.Aegir;
using org.GraphDefined.Vanaheimr.BouncyCastle;
using org.GraphDefined.Vanaheimr.Hermod;
using org.GraphDefined.Vanaheimr.Hermod.DNS;
using org.GraphDefined.Vanaheimr.Hermod.HTTP;
using org.GraphDefined.Vanaheimr.Hermod.Mail;
using org.GraphDefined.Vanaheimr.Hermod.SMTP;
using org.GraphDefined.Vanaheimr.Hermod.Sockets;
using org.GraphDefined.Vanaheimr.Hermod.Sockets.TCP;

using com.GraphDefined.SMSApi.API;
using com.GraphDefined.SMSApi.API.Response;

using social.OpenData.UsersAPI;
using social.OpenData.UsersAPI.Notifications;
using social.OpenData.UsersAPI.Postings;

using Telegram.Bot;

#endregion

namespace social.OpenData.UsersAPI
{

    /// <summary>
    /// A password quality check delegate.
    /// </summary>
    /// <param name="Password">The password to check.</param>
    /// <returns>A quality metric for the given password.</returns>
    public delegate Single PasswordQualityCheckDelegate(String Password);


    /// <summary>
    /// Extention method for the Users API.
    /// </summary>
    public static class UsersAPIExtentions
    {

        #region ParseUserId(this HTTPRequest, UsersAPI, out UserId,           out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The Users API.</param>
        /// <param name="UserId">The parsed unique user identification.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUserId(this HTTPRequest          HTTPRequest,
                                          UsersAPI                  UsersAPI,
                                          out User_Id?              UserId,
                                          out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI    == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given Users API must not be null!");

            #endregion

            UserId        = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            UserId = User_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserId.HasValue)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid UserId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion

        #region ParseUser  (this HTTPRequest, UsersAPI, out UserId, out User, out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The Users API.</param>
        /// <param name="UserId">The parsed unique user identification.</param>
        /// <param name="User">The resolved user.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUser(this HTTPRequest          HTTPRequest,
                                        UsersAPI                  UsersAPI,
                                        out User_Id?              UserId,
                                        out User                  User,
                                        out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI    == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given Users API must not be null!");

            #endregion

            UserId        = null;
            User          = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            UserId = User_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserId.HasValue) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid UserId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            if (!UsersAPI.TryGetUser(UserId.Value, out User)) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.NotFound,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Unknown UserId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion


        #region ParseUserGroupId(this HTTPRequest, UsersAPI, out UsersAPI,                   out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The Users API.</param>
        /// <param name="UserGroupId">The parsed unique user identification.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUserGroupId(this HTTPRequest          HTTPRequest,
                                               UsersAPI                  UsersAPI,
                                               out UserGroup_Id?         UserGroupId,
                                               out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI    == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given Users API must not be null!");

            #endregion

            UserGroupId   = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            UserGroupId = UserGroup_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserGroupId.HasValue)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid UserGroupId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion

        #region ParseUserGroup  (this HTTPRequest, UsersAPI, out UserGroupId, out UserGroup, out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The Users API.</param>
        /// <param name="UserGroupId">The parsed unique user identification.</param>
        /// <param name="UserGroup">The resolved user.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseUserGroup(this HTTPRequest          HTTPRequest,
                                             UsersAPI                  UsersAPI,
                                             out UserGroup_Id?         UserGroupId,
                                             out UserGroup             UserGroup,
                                             out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI    == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given Users API must not be null!");

            #endregion

            UserGroupId   = null;
            UserGroup     = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            UserGroupId = UserGroup_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!UserGroupId.HasValue) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid UserGroupId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            if (!UsersAPI.TryGetUserGroup(UserGroupId.Value, out UserGroup)) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.NotFound,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Unknown UserGroupId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion


        #region ParseOrganizationId(this HTTPRequest, UsersAPI, out OrganizationId,                   out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The Organizations API.</param>
        /// <param name="OrganizationId">The parsed unique user identification.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseOrganizationId(this HTTPRequest          HTTPRequest,
                                                  UsersAPI                  UsersAPI,
                                                  out Organization_Id?      OrganizationId,
                                                  out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI    == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given Organizations API must not be null!");

            #endregion

            OrganizationId        = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            OrganizationId = Organization_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!OrganizationId.HasValue)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid OrganizationId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion

        #region ParseOrganization  (this HTTPRequest, UsersAPI, out OrganizationId, out Organization, out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the user identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The Organizations API.</param>
        /// <param name="OrganizationId">The parsed unique user identification.</param>
        /// <param name="Organization">The resolved user.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when user identification was found; false else.</returns>
        public static Boolean ParseOrganization(this HTTPRequest          HTTPRequest,
                                                UsersAPI                  UsersAPI,
                                                out Organization_Id?      OrganizationId,
                                                out Organization          Organization,
                                                out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI    == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given Organizations API must not be null!");

            #endregion

            OrganizationId  = null;
            Organization    = null;
            HTTPResponse    = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            OrganizationId = Organization_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!OrganizationId.HasValue) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid OrganizationId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            if (!UsersAPI.TryGetOrganization(OrganizationId.Value, out Organization)) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.NotFound,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Unknown OrganizationId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion


        #region ParseNewsPostingId(this HTTPRequest, UsersAPI, out NewsPostingId,                  out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the News identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The UsersAPI.</param>
        /// <param name="NewsPostingId">The parsed unique news posting identification.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when News identification was found; false else.</returns>
        public static Boolean ParseNewsPostingId(this HTTPRequest          HTTPRequest,
                                                 UsersAPI                  UsersAPI,
                                                 out NewsPosting_Id?       NewsPostingId,
                                                 out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI     == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given UsersAPI must not be null!");

            #endregion

            NewsPostingId  = null;
            HTTPResponse   = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            NewsPostingId = NewsPosting_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!NewsPostingId.HasValue)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid NewsId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion

        #region ParseNewsPosting  (this HTTPRequest, UsersAPI, out NewsPostingId, out NewsPosting, out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the News identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The UsersAPI.</param>
        /// <param name="NewsPostingId">The parsed unique news posting identification.</param>
        /// <param name="NewsPosting">The resolved News.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when News identification was found; false else.</returns>
        public static Boolean ParseNewsPosting(this HTTPRequest          HTTPRequest,
                                               UsersAPI                  UsersAPI,
                                               out NewsPosting_Id?       NewsPostingId,
                                               out NewsPosting           NewsPosting,
                                               out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI     == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given UsersAPI must not be null!");

            #endregion

            NewsPostingId  = null;
            NewsPosting    = null;
            HTTPResponse   = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            NewsPostingId = NewsPosting_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!NewsPostingId.HasValue) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid NewsId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            if (!UsersAPI.TryGetNewsPosting(NewsPostingId.Value, out NewsPosting)) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.NotFound,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Unknown NewsId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion


        #region ParseNewsBannerId (this HTTPRequest, UsersAPI, out NewsBannerId,                   out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the News identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The UsersAPI.</param>
        /// <param name="NewsBannerId">The parsed unique news posting identification.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when News identification was found; false else.</returns>
        public static Boolean ParseNewsId(this HTTPRequest          HTTPRequest,
                                          UsersAPI                  UsersAPI,
                                          out NewsBanner_Id?        NewsBannerId,
                                          out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI    == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given UsersAPI must not be null!");

            #endregion

            NewsBannerId  = null;
            HTTPResponse  = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            NewsBannerId = NewsBanner_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!NewsBannerId.HasValue)
            {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid NewsId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion

        #region ParseNewsBanner   (this HTTPRequest, UsersAPI, out NewsBannerId,  out NewsBanner,  out HTTPResponse)

        /// <summary>
        /// Parse the given HTTP request and return the News identification
        /// for the given HTTP hostname and HTTP query parameter
        /// or an HTTP error response.
        /// </summary>
        /// <param name="HTTPRequest">A HTTP request.</param>
        /// <param name="UsersAPI">The UsersAPI.</param>
        /// <param name="NewsBannerId">The parsed unique news posting identification.</param>
        /// <param name="NewsBanner">The resolved News.</param>
        /// <param name="HTTPResponse">A HTTP error response.</param>
        /// <returns>True, when News identification was found; false else.</returns>
        public static Boolean ParseNewsBanner(this HTTPRequest          HTTPRequest,
                                              UsersAPI                  UsersAPI,
                                              out NewsBanner_Id?        NewsBannerId,
                                              out NewsBanner            NewsBanner,
                                              out HTTPResponse.Builder  HTTPResponse)
        {

            #region Initial checks

            if (HTTPRequest == null)
                throw new ArgumentNullException(nameof(HTTPRequest),  "The given HTTP request must not be null!");

            if (UsersAPI     == null)
                throw new ArgumentNullException(nameof(UsersAPI),     "The given UsersAPI must not be null!");

            #endregion

            NewsBannerId  = null;
            NewsBanner    = null;
            HTTPResponse   = null;

            if (HTTPRequest.ParsedURLParameters.Length < 1) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    Connection      = "close"
                };

                return false;

            }

            NewsBannerId = NewsBanner_Id.TryParse(HTTPRequest.ParsedURLParameters[0]);

            if (!NewsBannerId.HasValue) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.BadRequest,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Invalid NewsId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            if (!UsersAPI.TryGetNewsBanner(NewsBannerId.Value, out NewsBanner)) {

                HTTPResponse = new HTTPResponse.Builder(HTTPRequest) {
                    HTTPStatusCode  = HTTPStatusCode.NotFound,
                    Server          = UsersAPI.HTTPServer.DefaultServerName,
                    Date            = Timestamp.Now,
                    ContentType     = HTTPContentType.JSON_UTF8,
                    Content         = @"{ ""description"": ""Unknown NewsId!"" }".ToUTF8Bytes(),
                    Connection      = "close"
                };

                return false;

            }

            return true;

        }

        #endregion



        #region CreateUser           (Id, Name, EMail,                            Password = null, Description = null, PublicKeyRing = null, SecretKeyRing = null, MobilePhone = null, IsPublic = true, IsDisabled = false, IsAuthenticated = false)

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <param name="UsersAPI">The Users API.</param>
        /// <param name="Id">The unique identification of the user.</param>
        /// <param name="EMail">The primary e-mail of the user.</param>
        /// <param name="Password">An optional password of the user.</param>
        /// <param name="Name">An offical (multi-language) name of the user.</param>
        /// <param name="Description">An optional (multi-language) description of the user.</param>
        /// <param name="PublicKeyRing">An optional PGP/GPG public keyring of the user.</param>
        /// <param name="SecretKeyRing">An optional PGP/GPG secret keyring of the user.</param>
        /// <param name="UserLanguage">The language setting of the user.</param>
        /// <param name="Telephone">An optional telephone number of the user.</param>
        /// <param name="MobilePhone">An optional mobile telephone number of the user.</param>
        /// <param name="Use2AuthFactor">Whether to use a second authentication factor.</param>
        /// <param name="Telegram">An optional telegram account name of the user.</param>
        /// <param name="Homepage">The homepage of the user.</param>
        /// <param name="GeoLocation">An optional geographical location of the user.</param>
        /// <param name="Address">An optional address of the user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="AcceptedEULA">Timestamp when the user accepted the End-User-License-Agreement.</param>
        /// <param name="IsAuthenticated">The user will not be shown in user listings, as its primary e-mail address is not yet authenticated.</param>
        /// <param name="IsDisabled">The user will be shown in user listings.</param>
        /// 
        /// <param name="DataSource">The source of all this data, e.g. an automatic importer.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async static Task<User> CreateUser(this UsersAPI       UsersAPI,
                                                  User_Id             Id,
                                                  String              Name,
                                                  SimpleEMailAddress  EMail,
                                                  Password?           Password                   = null,
                                                  I18NString          Description                = null,
                                                  PgpPublicKeyRing    PublicKeyRing              = null,
                                                  PgpSecretKeyRing    SecretKeyRing              = null,
                                                  Languages           UserLanguage               = Languages.en,
                                                  PhoneNumber?        Telephone                  = null,
                                                  PhoneNumber?        MobilePhone                = null,
                                                  Use2AuthFactor      Use2AuthFactor             = Use2AuthFactor.None,
                                                  String              Telegram                   = null,
                                                  String              Homepage                   = null,
                                                  GeoCoordinate?      GeoLocation                = null,
                                                  Address             Address                    = null,
                                                  Boolean             SkipDefaultNotifications   = false,
                                                  DateTime?           AcceptedEULA               = null,
                                                  Boolean             IsAuthenticated            = false,
                                                  Boolean             IsDisabled                 = false,

                                                  String              DataSource                 = "",
                                                  EventTracking_Id    EventTrackingId            = null,
                                                  User_Id?            CurrentUserId              = null)
        {

            var addUserResult = await UsersAPI.AddUser(new User(Id,
                                                                Name,
                                                                EMail,
                                                                Description,
                                                                PublicKeyRing,
                                                                SecretKeyRing,
                                                                UserLanguage,
                                                                Telephone,
                                                                MobilePhone,
                                                                Use2AuthFactor,
                                                                Telegram,
                                                                Homepage,
                                                                GeoLocation,
                                                                Address,
                                                                AcceptedEULA,
                                                                IsAuthenticated,
                                                                IsDisabled,
                                                                DataSource: DataSource),

                                                       SkipDefaultNotifications,

                                                       async(_user, _eventTrackingId) => {
                                                           if (Password.HasValue) {
                                                               var result = await _user.API._ChangePassword(_user,
                                                                                                            Password.Value,
                                                                                                            null,
                                                                                                            SuppressNotifications:  true,
                                                                                                            EventTrackingId:        _eventTrackingId,
                                                                                                            CurrentUserId:          CurrentUserId);
                                                           }
                                                       },

                                                       EventTrackingId ?? EventTracking_Id.New,
                                                       CurrentUserId);

            return addUserResult.IsSuccess
                       ? addUserResult.User
                       : null;

        }

        #endregion

        #region CreateUser           (Id, Name, EMail, AccessRight, Organization, Password = null, Description = null, PublicKeyRing = null, SecretKeyRing = null, MobilePhone = null, IsPublic = true, IsDisabled = false, IsAuthenticated = false)

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <param name="UsersAPI">The Users API.</param>
        /// <param name="Id">The unique identification of the user.</param>
        /// <param name="EMail">The primary e-mail of the user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="Password">An optional password of the user.</param>
        /// <param name="Name">An offical (multi-language) name of the user.</param>
        /// <param name="Description">An optional (multi-language) description of the user.</param>
        /// <param name="PublicKeyRing">An optional PGP/GPG public keyring of the user.</param>
        /// <param name="SecretKeyRing">An optional PGP/GPG secret keyring of the user.</param>
        /// <param name="UserLanguage">The language setting of the user.</param>
        /// <param name="Telephone">An optional telephone number of the user.</param>
        /// <param name="MobilePhone">An optional mobile telephone number of the user.</param>
        /// <param name="Use2AuthFactor">Whether to use a second authentication factor.</param>
        /// <param name="Telegram">An optional telegram account name of the user.</param>
        /// <param name="Homepage">The homepage of the user.</param>
        /// <param name="GeoLocation">An optional geographical location of the user.</param>
        /// <param name="Address">An optional address of the user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="AcceptedEULA">Timestamp when the user accepted the End-User-License-Agreement.</param>
        /// <param name="IsAuthenticated">The user will not be shown in user listings, as its primary e-mail address is not yet authenticated.</param>
        /// <param name="IsDisabled">The user will be shown in user listings.</param>
        /// 
        /// <param name="DataSource">The source of all this data, e.g. an automatic importer.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async static Task<User> CreateUser(this UsersAPI               UsersAPI,
                                                  User_Id                     Id,
                                                  String                      Name,
                                                  SimpleEMailAddress          EMail,
                                                  User2OrganizationEdgeLabel  AccessRight,
                                                  Organization                Organization,
                                                  Password?                   Password                   = null,
                                                  I18NString                  Description                = null,
                                                  PgpPublicKeyRing            PublicKeyRing              = null,
                                                  PgpSecretKeyRing            SecretKeyRing              = null,
                                                  Languages                   UserLanguage               = Languages.en,
                                                  PhoneNumber?                Telephone                  = null,
                                                  PhoneNumber?                MobilePhone                = null,
                                                  Use2AuthFactor              Use2AuthFactor             = Use2AuthFactor.None,
                                                  String                      Telegram                   = null,
                                                  String                      Homepage                   = null,
                                                  GeoCoordinate?              GeoLocation                = null,
                                                  Address                     Address                    = null,
                                                  Boolean                     SkipDefaultNotifications   = false,
                                                  DateTime?                   AcceptedEULA               = null,
                                                  Boolean                     IsAuthenticated            = false,
                                                  Boolean                     IsDisabled                 = false,

                                                  String                      DataSource                 = "",
                                                  EventTracking_Id            EventTrackingId            = null,
                                                  User_Id?                    CurrentUserId              = null)
        {

            var addUserResult = await UsersAPI.AddUser(new User(Id,
                                                                Name,
                                                                EMail,
                                                                Description,
                                                                PublicKeyRing,
                                                                SecretKeyRing,
                                                                UserLanguage,
                                                                Telephone,
                                                                MobilePhone,
                                                                Use2AuthFactor,
                                                                Telegram,
                                                                Homepage,
                                                                GeoLocation,
                                                                Address,
                                                                AcceptedEULA,
                                                                IsAuthenticated,
                                                                IsDisabled,
                                                                DataSource: DataSource),

                                                       AccessRight,
                                                       Organization,

                                                       SkipDefaultNotifications,

                                                       async(_user, _eventTrackingId) => {
                                                           if (Password.HasValue) {
                                                               var result = await _user.API._ChangePassword(_user,
                                                                                                            Password.Value,
                                                                                                            null,
                                                                                                            SuppressNotifications:  true,
                                                                                                            EventTrackingId:        _eventTrackingId,
                                                                                                            CurrentUserId:          CurrentUserId);
                                                           }
                                                       },

                                                       EventTrackingId ?? EventTracking_Id.New,
                                                       CurrentUserId);

            return addUserResult.IsSuccess
                       ? addUserResult.User
                       : null;

        }

        #endregion

        #region CreateUserIfNotExists(Id, EMail, Password, Name = null, Description = null, PublicKeyRing = null, SecretKeyRing = null, MobilePhone = null, IsPublic = true, IsDisabled = false, IsAuthenticated = false)

        /// <summary>
        /// Create a new user, if he/she does not already exist.
        /// </summary>
        /// <param name="UsersAPI">The Users API.</param>
        /// <param name="Id">The unique identification of the user.</param>
        /// <param name="EMail">The primary e-mail of the user.</param>
        /// <param name="Password">An optional password of the user.</param>
        /// <param name="Name">An offical (multi-language) name of the user.</param>
        /// <param name="Description">An optional (multi-language) description of the user.</param>
        /// <param name="PublicKeyRing">An optional PGP/GPG public keyring of the user.</param>
        /// <param name="SecretKeyRing">An optional PGP/GPG secret keyring of the user.</param>
        /// <param name="UserLanguage">The language setting of the user.</param>
        /// <param name="Telephone">An optional telephone number of the user.</param>
        /// <param name="MobilePhone">An optional telephone number of the user.</param>
        /// <param name="Use2AuthFactor">Whether to use a second authentication factor.</param>
        /// <param name="Telegram">An optional telegram account name of the user.</param>
        /// <param name="Homepage">The homepage of the user.</param>
        /// <param name="GeoLocation">An optional geographical location of the user.</param>
        /// <param name="Address">An optional address of the user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="AcceptedEULA">Timestamp when the user accepted the End-User-License-Agreement.</param>
        /// <param name="IsAuthenticated">The user will not be shown in user listings, as its primary e-mail address is not yet authenticated.</param>
        /// <param name="IsDisabled">The user will be shown in user listings.</param>
        /// 
        /// <param name="DataSource">The source of all this data, e.g. an automatic importer.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async static Task<User> CreateUserIfNotExists(this UsersAPI       UsersAPI,
                                                             User_Id             Id,
                                                             String              Name,
                                                             SimpleEMailAddress  EMail,
                                                             Password?           Password                   = null,
                                                             I18NString          Description                = null,
                                                             PgpPublicKeyRing    PublicKeyRing              = null,
                                                             PgpSecretKeyRing    SecretKeyRing              = null,
                                                             Languages           UserLanguage               = Languages.en,
                                                             PhoneNumber?        Telephone                  = null,
                                                             PhoneNumber?        MobilePhone                = null,
                                                             Use2AuthFactor      Use2AuthFactor             = Use2AuthFactor.None,
                                                             String              Telegram                   = null,
                                                             String              Homepage                   = null,
                                                             GeoCoordinate?      GeoLocation                = null,
                                                             Address             Address                    = null,
                                                             Boolean             SkipDefaultNotifications   = false,
                                                             DateTime?           AcceptedEULA               = null,
                                                             Boolean             IsAuthenticated            = false,
                                                             Boolean             IsDisabled                 = false,

                                                             String              DataSource                 = "",
                                                             EventTracking_Id    EventTrackingId            = null,
                                                             User_Id?            CurrentUserId              = null)
        {

            var addUserResult = await UsersAPI.AddUserIfNotExists(new User(Id,
                                                                           Name,
                                                                           EMail,
                                                                           Description,
                                                                           PublicKeyRing,
                                                                           SecretKeyRing,
                                                                           UserLanguage,
                                                                           Telephone,
                                                                           MobilePhone,
                                                                           Use2AuthFactor,
                                                                           Telegram,
                                                                           Homepage,
                                                                           GeoLocation,
                                                                           Address,
                                                                           AcceptedEULA,
                                                                           IsAuthenticated,
                                                                           IsDisabled,
                                                                           DataSource: DataSource),

                                                                  SkipDefaultNotifications,

                                                                  async(_user, _eventTrackingId) => {
                                                                      if (Password.HasValue) {
                                                                          var result = await _user.API._ChangePassword(_user,
                                                                                                                       Password.Value,
                                                                                                                       null,
                                                                                                                       SuppressNotifications:  true,
                                                                                                                       EventTrackingId:        _eventTrackingId,
                                                                                                                       CurrentUserId:          CurrentUserId);
                                                                      }
                                                                  },

                                                                  EventTrackingId ?? EventTracking_Id.New,
                                                                  CurrentUserId);

            return addUserResult.IsSuccess
                       ? addUserResult.User
                       : null;

        }

        #endregion

        #region CreateUserIfNotExists(Id, EMail, Password, Name = null, Description = null, PublicKeyRing = null, SecretKeyRing = null, MobilePhone = null, IsPublic = true, IsDisabled = false, IsAuthenticated = false)

        /// <summary>
        /// Create a new user, if he/she does not already exist.
        /// </summary>
        /// <param name="UsersAPI">The Users API.</param>
        /// <param name="Id">The unique identification of the user.</param>
        /// <param name="EMail">The primary e-mail of the user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="Password">An optional password of the user.</param>
        /// <param name="Name">An offical (multi-language) name of the user.</param>
        /// <param name="Description">An optional (multi-language) description of the user.</param>
        /// <param name="PublicKeyRing">An optional PGP/GPG public keyring of the user.</param>
        /// <param name="SecretKeyRing">An optional PGP/GPG secret keyring of the user.</param>
        /// <param name="UserLanguage">The language setting of the user.</param>
        /// <param name="Telephone">An optional telephone number of the user.</param>
        /// <param name="MobilePhone">An optional telephone number of the user.</param>
        /// <param name="Use2AuthFactor">Whether to use a second authentication factor.</param>
        /// <param name="Telegram">An optional telegram account name of the user.</param>
        /// <param name="Homepage">The homepage of the user.</param>
        /// <param name="GeoLocation">An optional geographical location of the user.</param>
        /// <param name="Address">An optional address of the user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="AcceptedEULA">Timestamp when the user accepted the End-User-License-Agreement.</param>
        /// <param name="IsAuthenticated">The user will not be shown in user listings, as its primary e-mail address is not yet authenticated.</param>
        /// <param name="IsDisabled">The user will be shown in user listings.</param>
        /// 
        /// <param name="DataSource">The source of all this data, e.g. an automatic importer.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async static Task<User> CreateUserIfNotExists(this UsersAPI               UsersAPI,
                                                             User_Id                     Id,
                                                             String                      Name,
                                                             SimpleEMailAddress          EMail,
                                                             User2OrganizationEdgeLabel  AccessRight,
                                                             Organization                Organization,
                                                             Password?                   Password                   = null,
                                                             I18NString                  Description                = null,
                                                             PgpPublicKeyRing            PublicKeyRing              = null,
                                                             PgpSecretKeyRing            SecretKeyRing              = null,
                                                             Languages                   UserLanguage               = Languages.en,
                                                             PhoneNumber?                Telephone                  = null,
                                                             PhoneNumber?                MobilePhone                = null,
                                                             Use2AuthFactor              Use2AuthFactor             = Use2AuthFactor.None,
                                                             String                      Telegram                   = null,
                                                             String                      Homepage                   = null,
                                                             GeoCoordinate?              GeoLocation                = null,
                                                             Address                     Address                    = null,
                                                             Boolean                     SkipDefaultNotifications   = false,
                                                             DateTime?                   AcceptedEULA               = null,
                                                             Boolean                     IsAuthenticated            = false,
                                                             Boolean                     IsDisabled                 = false,

                                                             String                      DataSource                 = "",
                                                             EventTracking_Id            EventTrackingId            = null,
                                                             User_Id?                    CurrentUserId              = null)
        {

            var addUserResult = await UsersAPI.AddUserIfNotExists(new User(Id,
                                                                           Name,
                                                                           EMail,
                                                                           Description,
                                                                           PublicKeyRing,
                                                                           SecretKeyRing,
                                                                           UserLanguage,
                                                                           Telephone,
                                                                           MobilePhone,
                                                                           Use2AuthFactor,
                                                                           Telegram,
                                                                           Homepage,
                                                                           GeoLocation,
                                                                           Address,
                                                                           AcceptedEULA,
                                                                           IsAuthenticated,
                                                                           IsDisabled,
                                                                           DataSource: DataSource),

                                                                  AccessRight,
                                                                  Organization,

                                                                  SkipDefaultNotifications,

                                                                  async(_user, _eventTrackingId) => {
                                                                      if (Password.HasValue) {
                                                                          var result = await _user.API._ChangePassword(_user,
                                                                                                                       Password.Value,
                                                                                                                       null,
                                                                                                                       SuppressNotifications:  true,
                                                                                                                       EventTrackingId:        _eventTrackingId,
                                                                                                                       CurrentUserId:          CurrentUserId);
                                                                      }
                                                                  },

                                                                  EventTrackingId ?? EventTracking_Id.New,
                                                                  CurrentUserId);

            return addUserResult.IsSuccess
                       ? addUserResult.User
                       : null;

        }

        #endregion


        #region CreateOrganization           (Id, Name = null, Description = null, ParentOrganization = null)

        public async static Task<Organization> CreateOrganization(this UsersAPI             UsersAPI,

                                                                  Organization_Id           Id,
                                                                  I18NString                Name                 = null,
                                                                  I18NString                Description          = null,
                                                                  String                    Website              = null,
                                                                  EMailAddress              EMail                = null,
                                                                  PhoneNumber?              Telephone            = null,
                                                                  Address                   Address              = null,
                                                                  GeoCoordinate?            GeoLocation          = null,
                                                                  Func<Tags.Builder, Tags>  Tags                 = null,
                                                                  Boolean                   IsDisabled           = false,

                                                                  Organization              ParentOrganization   = null,

                                                                  String                    DataSource           = "",
                                                                  EventTracking_Id          EventTrackingId      = null,
                                                                  User_Id?                  CurrentUserId        = null)
        {

            var addOrganizationResult = await UsersAPI.AddOrganization(new Organization(Id,
                                                                                        Name,
                                                                                        Description,
                                                                                        Website,
                                                                                        EMail,
                                                                                        Telephone,
                                                                                        Address,
                                                                                        GeoLocation,
                                                                                        Tags,
                                                                                        IsDisabled,
                                                                                        DataSource: DataSource),
                                                                       ParentOrganization ?? UsersAPI.NoOwner,
                                                                       null,
                                                                       EventTrackingId,
                                                                       CurrentUserId);

            return addOrganizationResult.Organization;

        }

        #endregion

        #region CreateOrganizationIfNotExists(Id, Name = null, Description = null, ParentOrganization = null)

        public async static Task<Organization> CreateOrganizationIfNotExists(this UsersAPI             UsersAPI,

                                                                             Organization_Id           Id,
                                                                             I18NString                Name                 = null,
                                                                             I18NString                Description          = null,
                                                                             String                    Website              = null,
                                                                             EMailAddress              EMail                = null,
                                                                             PhoneNumber?              Telephone            = null,
                                                                             Address                   Address              = null,
                                                                             GeoCoordinate?            GeoLocation          = null,
                                                                             Func<Tags.Builder, Tags>  Tags                 = null,
                                                                             Boolean                   IsDisabled           = false,

                                                                             Organization              ParentOrganization   = null,

                                                                             String                    DataSource           = "",
                                                                             EventTracking_Id          EventTrackingId      = null,
                                                                             User_Id?                  CurrentUserId        = null)
        {

            var addOrganizationResult = await UsersAPI.AddOrganizationIfNotExists(new Organization(Id,
                                                                                                   Name,
                                                                                                   Description,
                                                                                                   Website,
                                                                                                   EMail,
                                                                                                   Telephone,
                                                                                                   Address,
                                                                                                   GeoLocation,
                                                                                                   Tags,
                                                                                                   IsDisabled,
                                                                                                   DataSource: DataSource),
                                                                                  ParentOrganization ?? UsersAPI.NoOwner,
                                                                                  null,
                                                                                  EventTrackingId,
                                                                                  CurrentUserId);

            return addOrganizationResult.Organization;

        }

        #endregion

    }


    /// <summary>
    /// Managing users and organizations et al. within a HTTP API.
    /// </summary>
    public class UsersAPI : HTTPAPI
    {

        #region Data

        /// <summary>
        /// The default HTTP server name.
        /// </summary>
        public new const           String         DefaultHTTPServerName                = "GraphDefined Users API";

        /// <summary>
        /// The default HTTP service name.
        /// </summary>
        public new const           String         DefaultHTTPServiceName               = "GraphDefined Users API";

        /// <summary>
        /// The default HTTP server port.
        /// </summary>
        public new static readonly IPPort         DefaultHTTPServerPort                = IPPort.Parse(2305);

        public const               String         DefaultUsersAPI_LoggingPath          = "default";
        public const               String         DefaultUsersAPI_DatabaseFileName     = "UsersAPI.db";
        public const               String         DefaultUsersAPI_LogfileName          = "UsersAPI.log";
        public const               String         DefaultPasswordFile                  = "passwords.db";
        public const               String         DefaultHTTPCookiesFile               = "HTTPCookies.db";
        public const               String         DefaultPasswordResetsFile            = "passwordResets.db";

        protected static readonly  SemaphoreSlim  ServiceTicketsSemaphore              = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  LogFileSemaphore                     = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  UsersSemaphore                       = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  UserGroupsSemaphore                  = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  APIKeysSemaphore                     = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  OrganizationsSemaphore               = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  OrganizationGroupsSemaphore          = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  MessagesSemaphore                    = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  NotificationMessagesSemaphore        = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  DashboardsSemaphore                  = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  NewsPostingsSemaphore                = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  NewsBannersSemaphore                 = new SemaphoreSlim(1, 1);
        protected static readonly  SemaphoreSlim  FAQsSemaphore                        = new SemaphoreSlim(1, 1);

        /// <summary>
        /// The HTTP root for embedded ressources.
        /// </summary>
        public  const             String                                        HTTPRoot                                = "social.OpenData.UsersAPI.HTTPRoot.";

        /// <summary>
        /// The default language of the API.
        /// </summary>
        public  const             Languages                                     DefaultDefaultLanguage                  = Languages.en;

        public  const             Byte                                          DefaultMinUserIdLength                  = 4;
        public  const             Byte                                          DefaultMinRealmLength                   = 2;
        public  const             Byte                                          DefaultMinUserNameLength                = 4;
        public  const             Byte                                          DefaultMinUserGroupIdLength             = 4;
        public  const             UInt16                                        DefaultMinAPIKeyLength                  = 20;
        public  const             Byte                                          DefaultMinMessageIdLength               = 8;
        public  const             Byte                                          DefaultMinOrganizationIdLength          = 4;
        public  const             Byte                                          DefaultMinOrganizationGroupIdLength     = 4;
        public  const             Byte                                          DefaultMinNotificationMessageIdLength   = 8;
        public  const             Byte                                          DefaultMinNewsPostingIdLength           = 8;
        public  const             Byte                                          DefaultMinNewsBannerIdLength            = 8;
        public  const             Byte                                          DefaultMinFAQIdLength                   = 8;

        public  static readonly   PasswordQualityCheckDelegate                  DefaultPasswordQualityCheck             = password => password.Length >= 8 ? 1.0f : 0;
        public  static readonly   TimeSpan                                      DefaultMaxSignInSessionLifetime         = TimeSpan.FromDays(30);

        protected readonly        Dictionary<User_Id, LoginPassword>            _LoginPasswords;
        protected readonly        Dictionary<VerificationToken, User>           _VerificationTokens;

        public  const             String                                        SignUpContext                           = "";
        public  const             String                                        SignInOutContext                        = "";


        /// <summary>
        /// The name of the default HTTP cookie.
        /// </summary>
        public  static readonly   HTTPCookieName                                DefaultCookieName                       = HTTPCookieName.Parse("UsersAPI");

        public  static readonly   Organization_Id                               DefaultAdminOrganizationId              = Organization_Id.Parse("Admins");



        /// <summary>
        /// All HTTP cookies.
        /// </summary>
        protected readonly        Dictionary<SecurityToken_Id, SecurityToken>   _HTTPCookies;

        public  const             String                                        HTTPCookieDomain                = "";

        /// <summary>
        /// All password resets.
        /// </summary>
        protected readonly        Dictionary<SecurityToken_Id, PasswordReset>   _PasswordResets;


        protected static readonly String[]  Split1  = { "\r\n" };
        protected static readonly String[]  Split2  = { ": " };
        protected static readonly String[]  Split3  = { " " };
        protected static readonly Char[]    Split4  = { ',' };
        protected static readonly Char[]    Split5  = { '|' };

        #endregion

        #region Properties

        /// <summary>
        /// The API database file.
        /// </summary>
        public String                        DatabaseFileName                   { get; }


        /// <summary>
        /// The API version hash (git commit hash value).
        /// </summary>
        public String                        APIVersionHash                     { get; }


        public Organization_Id               AdminOrganizationId                { get; }

        public String                        UsersAPIPath                       { get; }
        public String                        NotificationsPath                  { get; }
        
        public String                        SMTPLoggingPath                    { get; }
        public String                        TelegramLoggingPath                { get; }
        public String                        SMSAPILoggingPath                  { get; }


        /// <summary>
        /// The mother of all organizations.
        /// </summary>
        public Organization                  NoOwner                            { get; }

        /// <summary>
        /// The virtual 'robot' user.
        /// </summary>
        public User                          Robot                              { get; }

        /// <summary>
        /// The passphrase of the PGP/GPG secret key of the API.
        /// </summary>
        public String                        APIPassphrase                      { get; }

        /// <summary>
        /// A SMTP client to be used by the API.
        /// </summary>
        public ISMTPClient                   SMTPClient                         { get; }

        /// <summary>
        /// The SMSAPI.
        /// </summary>
        public ISMSClient                    SMSClient                          { get; }

        /// <summary>
        /// The (default) SMS sender name.
        /// </summary>
        public String                        SMSSenderName                      { get; }

        ///// <summary>
        ///// The Telegram API access token of the bot.
        ///// </summary>
        //public String                        TelegramBotToken                   { get; }

        ///// <summary>
        ///// The Telegram API client.
        ///// </summary>
        //public TelegramBotClient             TelegramAPI                        { get; }

        /// <summary>
        /// The Telegram user store.
        /// </summary>
        public ITelegramStore                TelegramClient                      { get; }

        public HTTPCookieName                CookieName                         { get; }

        public HTTPCookieName                SessionCookieName                  { get; }

        /// <summary>
        /// Force the web browser to send cookies only via HTTPS.
        /// </summary>
        public Boolean                       UseSecureCookies                   { get; }


        /// <summary>
        /// The default language used within this API.
        /// </summary>
        public Languages                     DefaultLanguage                    { get; }

        /// <summary>
        /// The maximum sign-in session lifetime.
        /// </summary>
        public TimeSpan                      MaxSignInSessionLifetime           { get; }

        /// <summary>
        /// The minimal user identification length.
        /// </summary>
        public Byte                          MinUserIdLength                    { get; }

        /// <summary>
        /// The minimal realm length.
        /// </summary>
        public Byte                          MinRealmLength                     { get; }

        /// <summary>
        /// A delegate to ensure a minimal password quality.
        /// </summary>
        public PasswordQualityCheckDelegate  PasswordQualityCheck               { get; }

        /// <summary>
        /// The minimal user name length.
        /// </summary>
        public Byte                          MinUserNameLength                  { get; }

        /// <summary>
        /// The minimal user group identification length.
        /// </summary>
        public Byte                          MinUserGroupIdLength               { get; }

        /// <summary>
        /// The minimal API key length.
        /// </summary>
        public UInt16                        MinAPIKeyLength                    { get; }

        /// <summary>
        /// The minimal message identification length.
        /// </summary>
        public Byte                          MinMessageIdLength                 { get; }

        /// <summary>
        /// The minimal message identification length.
        /// </summary>
        public Byte                          MinOrganizationIdLength            { get; }

        /// <summary>
        /// The minimal message identification length.
        /// </summary>
        public Byte                          MinOrganizationGroupIdLength       { get; }

        /// <summary>
        /// The minimal notification message identification length.
        /// </summary>
        public Byte                          MinNotificationMessageIdLength     { get; }

        /// <summary>
        /// The minimal news posting identification length.
        /// </summary>
        public Byte                          MinNewsPostingIdLength             { get; }

        /// <summary>
        /// The minimal news banner identification length.
        /// </summary>
        public Byte                          MinNewsBannerIdLength              { get; }

        /// <summary>
        /// The minimal FAQ identification length.
        /// </summary>
        public Byte                          MinFAQIdLength                     { get; }


        /// <summary>
        /// The current hash value of the API.
        /// </summary>
        public String                        CurrentDatabaseHashValue           { get; protected set; }

        /// <summary>
        /// Disable external notifications.
        /// </summary>
        public Boolean                       DisableNotifications               { get; set; }

        #endregion

        #region Events

        #region (protected internal) AddUsersRequest (Request)

        /// <summary>
        /// An event sent whenever add users request was received.
        /// </summary>
        public HTTPRequestLogEvent OnAddUsersRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever add users request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task AddUsersHTTPRequest(DateTime     Timestamp,
                                                HTTPAPI      API,
                                                HTTPRequest  Request)

            => OnAddUsersRequest?.WhenAll(Timestamp,
                                          API ?? this,
                                          Request);

        #endregion

        #region (protected internal) AddUsersResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an add users request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnAddUsersResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on an add users request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task AddUsersHTTPResponse(DateTime      Timestamp,
                                                 HTTPAPI       API,
                                                 HTTPRequest   Request,
                                                 HTTPResponse  Response)

            => OnAddUsersResponse?.WhenAll(Timestamp,
                                           API ?? this,
                                           Request,
                                           Response);

        #endregion


        #region (protected internal) AddUserHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever add user request was received.
        /// </summary>
        public HTTPRequestLogEvent OnAddUserHTTPRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever add user request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task AddUserHTTPRequest(DateTime     Timestamp,
                                                   HTTPAPI      API,
                                                   HTTPRequest  Request)

            => OnAddUserHTTPRequest?.WhenAll(Timestamp,
                                             API ?? this,
                                             Request);

        #endregion

        #region (protected internal) AddUserHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an add user request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnAddUserHTTPResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on an add user request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task AddUserHTTPResponse(DateTime      Timestamp,
                                                    HTTPAPI       API,
                                                    HTTPRequest   Request,
                                                    HTTPResponse  Response)

            => OnAddUserHTTPResponse?.WhenAll(Timestamp,
                                              API ?? this,
                                              Request,
                                              Response);

        #endregion


        #region (protected internal) SetUserHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever set user request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetUserHTTPRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever set user request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetUserHTTPRequest(DateTime     Timestamp,
                                                   HTTPAPI      API,
                                                   HTTPRequest  Request)

            => OnSetUserHTTPRequest?.WhenAll(Timestamp,
                                             API ?? this,
                                             Request);

        #endregion

        #region (protected internal) SetUserHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set user request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetUserHTTPResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on a set user request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetUserHTTPResponse(DateTime      Timestamp,
                                                    HTTPAPI       API,
                                                    HTTPRequest   Request,
                                                    HTTPResponse  Response)

            => OnSetUserHTTPResponse?.WhenAll(Timestamp,
                                              API ?? this,
                                              Request,
                                              Response);

        #endregion


        #region (protected internal) ChangePasswordRequest (Request)

        /// <summary>
        /// An event sent whenever set user request was received.
        /// </summary>
        public HTTPRequestLogEvent OnChangePasswordRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever set user request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task ChangePasswordRequest(DateTime     Timestamp,
                                                      HTTPAPI      API,
                                                      HTTPRequest  Request)

            => OnChangePasswordRequest?.WhenAll(Timestamp,
                                                API ?? this,
                                                Request);

        #endregion

        #region (protected internal) ChangePasswordResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set user request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnChangePasswordResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on a set user request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task ChangePasswordResponse(DateTime      Timestamp,
                                                       HTTPAPI       API,
                                                       HTTPRequest   Request,
                                                       HTTPResponse  Response)

            => OnChangePasswordResponse?.WhenAll(Timestamp,
                                                 API ?? this,
                                                 Request,
                                                 Response);

        #endregion


        #region (protected internal) ImpersonateUserRequest (Request)

        /// <summary>
        /// An event sent whenever an impersonate user request was received.
        /// </summary>
        public HTTPRequestLogEvent OnImpersonateUserRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever an impersonate user request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task ImpersonateUserRequest(DateTime     Timestamp,
                                                       HTTPAPI      API,
                                                       HTTPRequest  Request)

            => OnImpersonateUserRequest?.WhenAll(Timestamp,
                                                 API ?? this,
                                                 Request);

        #endregion

        #region (protected internal) ImpersonateUserResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an impersonate user request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnImpersonateUserResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on an impersonate user request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task ImpersonateUserResponse(DateTime      Timestamp,
                                                        HTTPAPI       API,
                                                        HTTPRequest   Request,
                                                        HTTPResponse  Response)

            => OnImpersonateUserResponse?.WhenAll(Timestamp,
                                                  API ?? this,
                                                  Request,
                                                  Response);

        #endregion


        #region (protected internal) SetUserNotificationsRequest    (Request)

        /// <summary>
        /// An event sent whenever set user notifications request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetUserNotificationsRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever set user notifications request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetUserNotificationsRequest(DateTime     Timestamp,
                                                            HTTPAPI      API,
                                                            HTTPRequest  Request)

            => OnSetUserNotificationsRequest?.WhenAll(Timestamp,
                                                      API ?? this,
                                                      Request);

        #endregion

        #region (protected internal) SetUserNotificationsResponse   (Response)

        /// <summary>
        /// An event sent whenever a response on a set user notifications request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetUserNotificationsResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on a set user notifications request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetUserNotificationsResponse(DateTime      Timestamp,
                                                             HTTPAPI       API,
                                                             HTTPRequest   Request,
                                                             HTTPResponse  Response)

            => OnSetUserNotificationsResponse?.WhenAll(Timestamp,
                                                       API ?? this,
                                                       Request,
                                                       Response);

        #endregion


        #region (protected internal) DeleteUserNotificationsRequest (Request)

        /// <summary>
        /// An event sent whenever set user notifications request was received.
        /// </summary>
        public HTTPRequestLogEvent OnDeleteUserNotificationsRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever set user notifications request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task DeleteUserNotificationsRequest(DateTime     Timestamp,
                                                               HTTPAPI      API,
                                                               HTTPRequest  Request)

            => OnDeleteUserNotificationsRequest?.WhenAll(Timestamp,
                                                         API ?? this,
                                                         Request);

        #endregion

        #region (protected internal) DeleteUserNotificationsResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set user notifications request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnDeleteUserNotificationsResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on a set user notifications request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task DeleteUserNotificationsResponse(DateTime      Timestamp,
                                                                HTTPAPI       API,
                                                                HTTPRequest   Request,
                                                                HTTPResponse  Response)

            => OnDeleteUserNotificationsResponse?.WhenAll(Timestamp,
                                                          API ?? this,
                                                          Request,
                                                          Response);

        #endregion


        // ---------------------------------------------------------------


        #region (protected internal) OnAddOrganizationHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever add organization request was received.
        /// </summary>
        public HTTPRequestLogEvent OnAddOrganizationHTTPRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever add organization request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task AddOrganizationHTTPRequest(DateTime     Timestamp,
                                                           HTTPAPI      API,
                                                           HTTPRequest  Request)

            => OnAddOrganizationHTTPRequest?.WhenAll(Timestamp,
                                                     API ?? this,
                                                     Request);

        #endregion

        #region (protected internal) OnAddOrganizationHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an add organization request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnAddOrganizationHTTPResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on an add organization request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task AddOrganizationHTTPResponse(DateTime      Timestamp,
                                                            HTTPAPI       API,
                                                            HTTPRequest   Request,
                                                            HTTPResponse  Response)

            => OnAddOrganizationHTTPResponse?.WhenAll(Timestamp,
                                                  API ?? this,
                                                  Request,
                                                  Response);

        #endregion


        #region (protected internal) SetOrganizationHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever Set organization request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetOrganizationHTTPRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever Set organization request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetOrganizationHTTPRequest(DateTime     Timestamp,
                                                           HTTPAPI      API,
                                                           HTTPRequest  Request)

            => OnSetOrganizationHTTPRequest?.WhenAll(Timestamp,
                                                     API ?? this,
                                                     Request);

        #endregion

        #region (protected internal) SetOrganizationHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on an Set organization request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetOrganizationHTTPResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on an Set organization request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetOrganizationHTTPResponse(DateTime      Timestamp,
                                                            HTTPAPI       API,
                                                            HTTPRequest   Request,
                                                            HTTPResponse  Response)

            => OnSetOrganizationHTTPResponse?.WhenAll(Timestamp,
                                                      API ?? this,
                                                      Request,
                                                      Response);

        #endregion


        #region (protected internal) DeleteOrganizationHTTPRequest (Request)

        /// <summary>
        /// An event sent whenever delete organization request was received.
        /// </summary>
        public HTTPRequestLogEvent OnDeleteOrganizationHTTPRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever delete organization request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task DeleteOrganizationHTTPRequest(DateTime     Timestamp,
                                                              HTTPAPI      API,
                                                              HTTPRequest  Request)

            => OnDeleteOrganizationHTTPRequest?.WhenAll(Timestamp,
                                                        API ?? this,
                                                        Request);

        #endregion

        #region (protected internal) DeleteOrganizationHTTPResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a delete organization request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnDeleteOrganizationHTTPResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on a delete organization request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task DeleteOrganizationHTTPResponse(DateTime      Timestamp,
                                                               HTTPAPI       API,
                                                               HTTPRequest   Request,
                                                               HTTPResponse  Response)

            => OnDeleteOrganizationHTTPResponse?.WhenAll(Timestamp,
                                                         API ?? this,
                                                         Request,
                                                         Response);

        #endregion



        #region (protected internal) SetOrganizationNotificationsRequest    (Request)

        /// <summary>
        /// An event sent whenever set organization notifications request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetOrganizationNotificationsRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever set organization notifications request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetOrganizationNotificationsRequest(DateTime     Timestamp,
                                                                    HTTPAPI      API,
                                                                    HTTPRequest  Request)

            => OnSetOrganizationNotificationsRequest?.WhenAll(Timestamp,
                                                              API ?? this,
                                                              Request);

        #endregion

        #region (protected internal) SetOrganizationNotificationsResponse   (Response)

        /// <summary>
        /// An event sent whenever a response on a set organization notifications request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetOrganizationNotificationsResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on a set organization notifications request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetOrganizationNotificationsResponse(DateTime      Timestamp,
                                                                     HTTPAPI       API,
                                                                     HTTPRequest   Request,
                                                                     HTTPResponse  Response)

            => OnSetOrganizationNotificationsResponse?.WhenAll(Timestamp,
                                                               API ?? this,
                                                               Request,
                                                               Response);

        #endregion


        #region (protected internal) DeleteOrganizationNotificationsRequest (Request)

        /// <summary>
        /// An event sent whenever set organization notifications request was received.
        /// </summary>
        public HTTPRequestLogEvent OnDeleteOrganizationNotificationsRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever set organization notifications request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task DeleteOrganizationNotificationsRequest(DateTime     Timestamp,
                                                                       HTTPAPI      API,
                                                                       HTTPRequest  Request)

            => OnDeleteOrganizationNotificationsRequest?.WhenAll(Timestamp,
                                                                 API ?? this,
                                                                 Request);

        #endregion

        #region (protected internal) DeleteOrganizationNotificationsResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set organization notifications request was sent.
        /// </summary>
        public HTTPResponseLogEvent OnDeleteOrganizationNotificationsResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a response on a set organization notifications request was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task DeleteOrganizationNotificationsResponse(DateTime      Timestamp,
                                                                        HTTPAPI       API,
                                                                        HTTPRequest   Request,
                                                                        HTTPResponse  Response)

            => OnDeleteOrganizationNotificationsResponse?.WhenAll(Timestamp,
                                                                  API ?? this,
                                                                  Request,
                                                                  Response);

        #endregion

        // ---------------------------------------------------------------------

        #region (protected internal) AddServiceTicketRequest (Request)

        /// <summary>
        /// An event sent whenever a add service ticket request was received.
        /// </summary>
        public HTTPRequestLogEvent OnAddServiceTicketRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever a add service ticket request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task AddServiceTicketRequest(DateTime     Timestamp,
                                                        HTTPAPI      API,
                                                        HTTPRequest  Request)

            => OnAddServiceTicketRequest?.WhenAll(Timestamp,
                                                  API ?? this,
                                                  Request);

        #endregion

        #region (protected internal) AddServiceTicketResponse(Response)

        /// <summary>
        /// An event sent whenever a add service ticket response was sent.
        /// </summary>
        public HTTPResponseLogEvent OnAddServiceTicketResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a add service ticket response was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task AddServiceTicketResponse(DateTime      Timestamp,
                                                         HTTPAPI       API,
                                                         HTTPRequest   Request,
                                                         HTTPResponse  Response)

            => OnAddServiceTicketResponse?.WhenAll(Timestamp,
                                                   API ?? this,
                                                   Request,
                                                   Response);

        #endregion


        #region (protected internal) SetServiceTicketRequest (Request)

        /// <summary>
        /// An event sent whenever a set service ticket request was received.
        /// </summary>
        public HTTPRequestLogEvent OnSetServiceTicketRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever a set service ticket request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task SetServiceTicketRequest(DateTime     Timestamp,
                                                        HTTPAPI      API,
                                                        HTTPRequest  Request)

            => OnSetServiceTicketRequest?.WhenAll(Timestamp,
                                                  API ?? this,
                                                  Request);

        #endregion

        #region (protected internal) SetServiceTicketResponse(Response)

        /// <summary>
        /// An event sent whenever a set service ticket response was sent.
        /// </summary>
        public HTTPResponseLogEvent OnSetServiceTicketResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a set service ticket response was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task SetServiceTicketResponse(DateTime      Timestamp,
                                                         HTTPAPI       API,
                                                         HTTPRequest   Request,
                                                         HTTPResponse  Response)

            => OnSetServiceTicketResponse?.WhenAll(Timestamp,
                                                   API ?? this,
                                                   Request,
                                                   Response);

        #endregion


        #region (protected internal) AddServiceTicketChangeSetRequest (Request)

        /// <summary>
        /// An event sent whenever a add service ticket change set request was received.
        /// </summary>
        public HTTPRequestLogEvent OnAddServiceTicketChangeSetRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever a add service ticket change set request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task AddServiceTicketChangeSetRequest(DateTime     Timestamp,
                                                                 HTTPAPI      API,
                                                                 HTTPRequest  Request)

            => OnAddServiceTicketChangeSetRequest?.WhenAll(Timestamp,
                                                           API ?? this,
                                                           Request);

        #endregion

        #region (protected internal) AddServiceTicketChangeSetResponse(Response)

        /// <summary>
        /// An event sent whenever a add service ticket change set response was sent.
        /// </summary>
        public HTTPResponseLogEvent OnAddServiceTicketChangeSetResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a add service ticket change set response was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task AddServiceTicketChangeSetResponse(DateTime      Timestamp,
                                                                  HTTPAPI       API,
                                                                  HTTPRequest   Request,
                                                                  HTTPResponse  Response)

            => OnAddServiceTicketChangeSetResponse?.WhenAll(Timestamp,
                                                            API ?? this,
                                                            Request,
                                                            Response);

        #endregion


        // ---------------------------------------------------------------------

        #region (protected internal) RestartRequest (Request)

        /// <summary>
        /// An event sent whenever a restart request was received.
        /// </summary>
        public HTTPRequestLogEvent OnRestartHTTPRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever a restart request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task RestartRequest(DateTime     Timestamp,
                                               HTTPAPI      API,
                                               HTTPRequest  Request)

            => OnRestartHTTPRequest?.WhenAll(Timestamp,
                                             API ?? this,
                                             Request);

        #endregion

        #region (protected internal) RestartResponse(Response)

        /// <summary>
        /// An event sent whenever a restart response was sent.
        /// </summary>
        public HTTPResponseLogEvent OnRestartHTTPResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a restart response was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task RestartResponse(DateTime      Timestamp,
                                                HTTPAPI       API,
                                                HTTPRequest   Request,
                                                HTTPResponse  Response)

            => OnRestartHTTPResponse?.WhenAll(Timestamp,
                                              API ?? this,
                                              Request,
                                              Response);

        #endregion


        #region (protected internal) StopRequest (Request)

        /// <summary>
        /// An event sent whenever a stop request was received.
        /// </summary>
        public HTTPRequestLogEvent OnStopHTTPRequest = new HTTPRequestLogEvent();

        /// <summary>
        /// An event sent whenever a stop request was received.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        protected internal Task StopRequest(DateTime     Timestamp,
                                            HTTPAPI      API,
                                            HTTPRequest  Request)

            => OnStopHTTPRequest?.WhenAll(Timestamp,
                                          API ?? this,
                                          Request);

        #endregion

        #region (protected internal) StopResponse(Response)

        /// <summary>
        /// An event sent whenever a stop response was sent.
        /// </summary>
        public HTTPResponseLogEvent OnStopHTTPResponse = new HTTPResponseLogEvent();

        /// <summary>
        /// An event sent whenever a stop response was sent.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the request.</param>
        /// <param name="API">The HTTP API.</param>
        /// <param name="Request">A HTTP request.</param>
        /// <param name="Response">A HTTP response.</param>
        protected internal Task StopResponse(DateTime      Timestamp,
                                             HTTPAPI       API,
                                             HTTPRequest   Request,
                                             HTTPResponse  Response)

            => OnStopHTTPResponse?.WhenAll(Timestamp,
                                           API ?? this,
                                           Request,
                                           Response);

        #endregion

        #endregion

        #region Constructor(s)

        #region UsersAPI(HTTPServerName, ...)

        /// <summary>
        /// Create a new HTTP server and attach this Open Data HTTP API to it.
        /// </summary>
        /// <param name="HTTPHostname">The HTTP hostname for all URLs within this API.</param>
        /// <param name="ExternalDNSName">The offical URL/DNS name of this service, e.g. for sending e-mails.</param>
        /// <param name="HTTPServerPort">A TCP port to listen on.</param>
        /// <param name="BasePath">When the API is served from an optional subdirectory path.</param>
        /// <param name="HTTPServerName">The default HTTP servername, used whenever no HTTP Host-header has been given.</param>
        /// 
        /// <param name="URLPathPrefix">A common prefix for all URLs.</param>
        /// <param name="HTTPServiceName">The name of the HTTP service.</param>
        /// <param name="HTMLTemplate">An optional HTML template.</param>
        /// <param name="APIVersionHashes">The API version hashes (git commit hash values).</param>
        /// 
        /// <param name="ServerCertificateSelector">An optional delegate to select a SSL/TLS server certificate.</param>
        /// <param name="ClientCertificateValidator">An optional delegate to verify the SSL/TLS client certificate used for authentication.</param>
        /// <param name="ClientCertificateSelector">An optional delegate to select the SSL/TLS client certificate used for authentication.</param>
        /// <param name="AllowedTLSProtocols">The SSL/TLS protocol(s) allowed for this connection.</param>
        /// 
        /// <param name="ServerThreadName">The optional name of the TCP server thread.</param>
        /// <param name="ServerThreadPriority">The optional priority of the TCP server thread.</param>
        /// <param name="ServerThreadIsBackground">Whether the TCP server thread is a background thread or not.</param>
        /// <param name="ConnectionIdBuilder">An optional delegate to build a connection identification based on IP socket information.</param>
        /// <param name="ConnectionThreadsNameBuilder">An optional delegate to set the name of the TCP connection threads.</param>
        /// <param name="ConnectionThreadsPriorityBuilder">An optional delegate to set the priority of the TCP connection threads.</param>
        /// <param name="ConnectionThreadsAreBackground">Whether the TCP connection threads are background threads or not (default: yes).</param>
        /// <param name="ConnectionTimeout">The TCP client timeout for all incoming client connections in seconds (default: 30 sec).</param>
        /// <param name="MaxClientConnections">The maximum number of concurrent TCP client connections (default: 4096).</param>
        /// 
        /// <param name="AdminOrganizationId">The admins' organization identification.</param>
        /// <param name="APIRobotEMailAddress">An e-mail address for this API.</param>
        /// <param name="APIRobotGPGPassphrase">A GPG passphrase for this API.</param>
        /// <param name="SMTPClient">A SMTP client for sending e-mails.</param>
        /// <param name="SMSClient">A SMS client for sending SMS.</param>
        /// <param name="SMSSenderName">The (default) SMS sender name.</param>
        /// <param name="TelegramClient">A Telegram client for sendind and receiving Telegrams.</param>
        /// 
        /// <param name="PasswordQualityCheck">A delegate to ensure a minimal password quality.</param>
        /// <param name="CookieName">The name of the HTTP Cookie for authentication.</param>
        /// <param name="UseSecureCookies">Force the web browser to send cookies only via HTTPS.</param>
        /// <param name="MaxSignInSessionLifetime">The maximum sign-in session lifetime.</param>
        /// <param name="DefaultLanguage">The default language of the API.</param>
        /// <param name="MinUserIdLength">The minimal user identification length.</param>
        /// <param name="MinUserNameLength">The minimal user name length.</param>
        /// <param name="MinRealmLength">The minimal realm length.</param>
        /// <param name="MinUserGroupIdLength">The minimal user group identification length.</param>
        /// <param name="MinAPIKeyLength">The minimal API key length.</param>
        /// 
        /// <param name="DisableMaintenanceTasks">Disable all maintenance tasks.</param>
        /// <param name="MaintenanceInitialDelay">The initial delay of the maintenance tasks.</param>
        /// <param name="MaintenanceEvery">The maintenance intervall.</param>
        /// 
        /// <param name="DisableWardenTasks">Disable all warden tasks.</param>
        /// <param name="WardenInitialDelay">The initial delay of the warden tasks.</param>
        /// <param name="WardenCheckEvery">The warden intervall.</param>
        /// 
        /// <param name="IsDevelopment">This HTTP API runs in development mode.</param>
        /// <param name="DevelopmentServers">An enumeration of server names which will imply to run this service in development mode.</param>
        /// <param name="SkipURLTemplates">Skip URL templates.</param>
        /// <param name="DatabaseFileName">The name of the database file for this API.</param>
        /// <param name="DisableNotifications">Disable external notifications.</param>
        /// <param name="DisableLogging">Disable the log file.</param>
        /// <param name="LoggingPath">The path for all logfiles.</param>
        /// <param name="LogfileName">The name of the logfile.</param>
        /// <param name="LogfileCreator">A delegate for creating the name of the logfile for this API.</param>
        /// <param name="DNSClient">The DNS client of the API.</param>
        /// <param name="Autostart">Whether to start the API automatically.</param>
        public UsersAPI(HTTPHostname?                        HTTPHostname                       = null,
                        String                               ExternalDNSName                    = null,
                        IPPort?                              HTTPServerPort                     = null,
                        HTTPPath?                            BasePath                           = null,
                        String                               HTTPServerName                     = DefaultHTTPServerName,

                        HTTPPath?                            URLPathPrefix                      = null,
                        String                               HTTPServiceName                    = DefaultHTTPServiceName,
                        String                               HTMLTemplate                       = null,
                        JObject                              APIVersionHashes                   = null,

                        ServerCertificateSelectorDelegate    ServerCertificateSelector          = null,
                        RemoteCertificateValidationCallback  ClientCertificateValidator         = null,
                        LocalCertificateSelectionCallback    ClientCertificateSelector          = null,
                        SslProtocols?                        AllowedTLSProtocols                = null,

                        String                               ServerThreadName                   = null,
                        ThreadPriority?                      ServerThreadPriority               = null,
                        Boolean?                             ServerThreadIsBackground           = null,
                        ConnectionIdBuilder                  ConnectionIdBuilder                = null,
                        ConnectionThreadsNameBuilder         ConnectionThreadsNameBuilder       = null,
                        ConnectionThreadsPriorityBuilder     ConnectionThreadsPriorityBuilder   = null,
                        Boolean?                             ConnectionThreadsAreBackground     = null,
                        TimeSpan?                            ConnectionTimeout                  = null,
                        UInt32?                              MaxClientConnections               = null,

                        Organization_Id?                     AdminOrganizationId                = null,
                        EMailAddress                         APIRobotEMailAddress               = null,
                        String                               APIRobotGPGPassphrase              = null,
                        ISMTPClient                          SMTPClient                         = null,
                        ISMSClient                           SMSClient                          = null,
                        String                               SMSSenderName                      = null,
                        ITelegramStore                       TelegramClient                     = null,

                        PasswordQualityCheckDelegate         PasswordQualityCheck               = null,
                        HTTPCookieName?                      CookieName                         = null,
                        Boolean                              UseSecureCookies                   = true,
                        TimeSpan?                            MaxSignInSessionLifetime           = null,
                        Languages?                           DefaultLanguage                    = null,
                        Byte?                                MinUserIdLength                    = null,
                        Byte?                                MinRealmLength                     = null,
                        Byte?                                MinUserNameLength                  = null,
                        Byte?                                MinUserGroupIdLength               = null,
                        UInt16?                              MinAPIKeyLength                    = null,
                        Byte?                                MinMessageIdLength                 = null,
                        Byte?                                MinOrganizationIdLength            = null,
                        Byte?                                MinOrganizationGroupIdLength       = null,
                        Byte?                                MinNotificationMessageIdLength     = null,
                        Byte?                                MinNewsPostingIdLength             = null,
                        Byte?                                MinNewsBannerIdLength              = null,
                        Byte?                                MinFAQIdLength                     = null,

                        Boolean?                             DisableMaintenanceTasks            = null,
                        TimeSpan?                            MaintenanceInitialDelay            = null,
                        TimeSpan?                            MaintenanceEvery                   = null,

                        Boolean?                             DisableWardenTasks                 = null,
                        TimeSpan?                            WardenInitialDelay                 = null,
                        TimeSpan?                            WardenCheckEvery                   = null,

                        Boolean?                             IsDevelopment                      = null,
                        IEnumerable<String>                  DevelopmentServers                 = null,
                        Boolean                              SkipURLTemplates                   = false,
                        String                               DatabaseFileName                   = DefaultUsersAPI_DatabaseFileName,
                        Boolean                              DisableNotifications               = false,
                        Boolean                              DisableLogging                     = false,
                        String                               LoggingPath                        = DefaultUsersAPI_LoggingPath,
                        String                               LogfileName                        = DefaultUsersAPI_LogfileName,
                        LogfileCreatorDelegate               LogfileCreator                     = null,
                        DNSClient                            DNSClient                          = null,
                        Boolean                              Autostart                          = false)

            : base(HTTPHostname,
                   ExternalDNSName,
                   HTTPServerPort,
                   BasePath,
                   HTTPServerName,

                   URLPathPrefix,
                   HTTPServiceName,
                   HTMLTemplate,
                   APIVersionHashes,

                   ServerCertificateSelector,
                   ClientCertificateValidator,
                   ClientCertificateSelector,
                   AllowedTLSProtocols,

                   ServerThreadName,
                   ServerThreadPriority,
                   ServerThreadIsBackground,
                   ConnectionIdBuilder,
                   ConnectionThreadsNameBuilder,
                   ConnectionThreadsPriorityBuilder,
                   ConnectionThreadsAreBackground,
                   ConnectionTimeout,
                   MaxClientConnections,

                   DisableMaintenanceTasks,
                   MaintenanceInitialDelay,
                   MaintenanceEvery,

                   DisableWardenTasks,
                   WardenInitialDelay,
                   WardenCheckEvery,

                   IsDevelopment,
                   DevelopmentServers,
                   DisableLogging,
                   LoggingPath,
                   LogfileName ?? DefaultUsersAPI_LogfileName,
                   LogfileCreator,
                   DNSClient,
                   false) // Autostart

        {

            #region Inital checks

            if (HTTPServer is null)
                throw new ArgumentNullException(nameof(HTTPServer),            "The given HTTP server must not be null!");

            if (APIRobotEMailAddress is null)
                throw new ArgumentNullException(nameof(APIRobotEMailAddress),  "The given API robot e-mail address must not be null!");

            #endregion

            #region Init data

            this._DataLicenses                   = new Dictionary<DataLicense_Id,             DataLicense>();
            this._Users                          = new Dictionary<User_Id,                    User>();
            this._VerificationTokens             = new Dictionary<VerificationToken,          User>();
            this._LoginPasswords                 = new Dictionary<User_Id,                    LoginPassword>();
            this._PasswordResets                 = new Dictionary<SecurityToken_Id,           PasswordReset>();
            this._HTTPCookies                    = new Dictionary<SecurityToken_Id,           SecurityToken>();
            this._APIKeys                        = new Dictionary<APIKey_Id,                  APIKey>();
            this._Messages                       = new Dictionary<Message_Id,                 Message>();
            this._NotificationMessages           = new Dictionary<NotificationMessage_Id,     NotificationMessage>();
            this._UserGroups                     = new Dictionary<UserGroup_Id,               UserGroup>();
            this._Organizations                  = new Dictionary<Organization_Id,            Organization>();
            this._OrganizationGroups             = new Dictionary<OrganizationGroup_Id,       OrganizationGroup>();
            this._ServiceTickets                 = new ConcurrentDictionary<ServiceTicket_Id, ServiceTicket>();
            this._NewsPostings                   = new Dictionary<NewsPosting_Id,             NewsPosting>();
            this._NewsBanners                    = new Dictionary<NewsBanner_Id,              NewsBanner>();
            this._FAQs                           = new Dictionary<FAQ_Id,                     FAQ>();


            this.APIVersionHash                  = APIVersionHashes?[nameof(UsersAPI)]?.Value<String>()?.Trim();

            if (this.APIVersionHash.IsNullOrEmpty())
                this.APIVersionHash              = "unknown";

            this.DatabaseFileName                = this.LoggingPath + (DatabaseFileName ?? DefaultUsersAPI_DatabaseFileName);

            this.UsersAPIPath                    = this.LoggingPath + "UsersAPI"       + Path.DirectorySeparatorChar;
            this.NotificationsPath               = this.LoggingPath + "Notifications"  + Path.DirectorySeparatorChar;
            this.SMTPLoggingPath                 = this.LoggingPath + "SMTPClient"     + Path.DirectorySeparatorChar;
            this.TelegramLoggingPath             = this.LoggingPath + "Telegram"       + Path.DirectorySeparatorChar;
            this.SMSAPILoggingPath               = this.LoggingPath + "SMSAPIClient"   + Path.DirectorySeparatorChar;

            this.DisableNotifications            = DisableNotifications;

            if (!DisableLogging)
            {
                Directory.CreateDirectory(this.UsersAPIPath);
                Directory.CreateDirectory(this.NotificationsPath);
                Directory.CreateDirectory(this.SMTPLoggingPath);
                Directory.CreateDirectory(this.TelegramLoggingPath);
                Directory.CreateDirectory(this.SMSAPILoggingPath);
            }

            this.Robot                           = new User(Id:               User_Id.Parse("robot"),
                                                            EMail:            APIRobotEMailAddress.Address,
                                                            Name:             APIRobotEMailAddress.OwnerName,
                                                            PublicKeyRing:    APIRobotEMailAddress.PublicKeyRing,
                                                            SecretKeyRing:    APIRobotEMailAddress.SecretKeyRing,
                                                            Description:      I18NString.Create(Languages.en, "The API robot"),
                                                            IsAuthenticated:  true);

            CurrentAsyncLocalUserId.Value        = Robot.Id;

            this.AdminOrganizationId             = AdminOrganizationId            ?? DefaultAdminOrganizationId;
            this.APIPassphrase                   = APIRobotGPGPassphrase;
            this.SMTPClient                      = SMTPClient                     ?? throw new ArgumentNullException(nameof(SMTPClient), "The given API SMTP client must not be null!");

            this.CookieName                      = CookieName                     ?? DefaultCookieName;
            this.SessionCookieName               = this.CookieName + "Session";
            this.UseSecureCookies                = UseSecureCookies;
            this.DefaultLanguage                 = DefaultLanguage                ?? DefaultDefaultLanguage;

            this.MinUserIdLength                 = MinUserIdLength                ?? DefaultMinUserIdLength;
            this.MinRealmLength                  = MinRealmLength                 ?? DefaultMinRealmLength;
            this.MinUserNameLength               = MinUserNameLength              ?? DefaultMinUserNameLength;
            this.MinUserGroupIdLength            = MinUserGroupIdLength           ?? DefaultMinUserGroupIdLength;
            this.MinAPIKeyLength                 = MinAPIKeyLength                ?? DefaultMinAPIKeyLength;
            this.MinMessageIdLength              = MinMessageIdLength             ?? DefaultMinMessageIdLength;
            this.MinOrganizationIdLength         = MinOrganizationIdLength        ?? DefaultMinOrganizationIdLength;
            this.MinOrganizationGroupIdLength    = MinOrganizationGroupIdLength   ?? DefaultMinOrganizationGroupIdLength;
            this.MinNotificationMessageIdLength  = MinNotificationMessageIdLength ?? DefaultMinNotificationMessageIdLength;
            this.MinNewsPostingIdLength          = MinNewsPostingIdLength         ?? DefaultMinNewsPostingIdLength;
            this.MinNewsBannerIdLength           = MinNewsBannerIdLength          ?? DefaultMinNewsBannerIdLength;
            this.MinFAQIdLength                  = MinFAQIdLength                 ?? DefaultMinFAQIdLength;

            this.PasswordQualityCheck            = PasswordQualityCheck           ?? DefaultPasswordQualityCheck;
            this.MaxSignInSessionLifetime        = MaxSignInSessionLifetime       ?? DefaultMaxSignInSessionLifetime;

            #endregion

            #region Reflect data licenses

            foreach (var dataLicense in typeof(DataLicense).GetFields(System.Reflection.BindingFlags.Public |
                                                                      System.Reflection.BindingFlags.Static).
                                                            Where (fieldinfo => fieldinfo.ReflectedType == typeof(DataLicense)).
                                                            Select(fieldinfo => fieldinfo.GetValue(DataLicense.None)).
                                                            Cast<DataLicense>())
            {

                _DataLicenses.Add(dataLicense.Id,
                                  dataLicense);

            }

            #endregion


            #region Create default organizations/user groups

            this.NoOwner = _Organizations.AddAndReturnValue(Organization_Id.Parse("NoOwner"),
                                                            new Organization(Organization_Id.Parse("NoOwner"),
                                                                             I18NString.Create(Languages.en, "No owner")));

            #endregion

            #region Setup SMSAPI

            this.SMSClient      = SMSClient;
            this.SMSSenderName  = SMSSenderName ?? "GraphDefined";

            #endregion

            #region Setup Telegram

            this.TelegramClient = TelegramClient;

            if (this.TelegramClient != null)
                this.TelegramClient.OnMessage += ReceiveTelegramMessage;

            #endregion

            #region Warden: Observe CPU/RAM => Send admin e-mails...

            Warden.EveryMinutes(15,
                                Environment.OSVersion.Platform == PlatformID.Unix
                                    ? new DriveInfo("/")
                                    : new DriveInfo(Directory.GetCurrentDirectory()),
                                async (timestamp, driveInfo, ct) => {

                                    var MBytesFree       = driveInfo.AvailableFreeSpace / 1024 / 1024;
                                    var HDPercentageFree = 100 * driveInfo.AvailableFreeSpace / driveInfo.TotalSize;

                                    if (HDPercentageFree < 3 &&
                                        TryGetOrganization(this.AdminOrganizationId, out Organization adminOrganization))
                                    {

                                        // lowStorage_MessageType
                                        await SMTPClient.Send(new HTMLEMailBuilder {
                                                                     From           = Robot.EMail,
                                                                     To             = EMailAddressList.Create(adminOrganization.Admins.Select(admin => admin.EMail)),
                                                                     Passphrase     = APIRobotGPGPassphrase,
                                                                     Subject        = ServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)",
                                                                     HTMLText       = ServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)" + Environment.NewLine + Environment.NewLine,
                                                                     PlainText      = ServiceName + " is low on disc (<" + HDPercentageFree + "%, " + MBytesFree + " MB free)" + Environment.NewLine + Environment.NewLine,
                                                                     SecurityLevel  = EMailSecurity.autosign
                                                                 }).ConfigureAwait(false);

                                    }

                                });

            #endregion

            RegisterNotifications().Wait();

            if (!SkipURLTemplates)
                RegisterURLTemplates();

            DebugX.Log(nameof(UsersAPI) + " version '" + APIVersionHash + "' initialized...");

            if (Autostart)
                Start();

        }

        #endregion

        #endregion

        #region (static) AttachToHTTPAPI(HTTPServer, URLPrefix = "/", ...)

        ///// <summary>
        ///// Attach this Open Data HTTP API to the given HTTP server.
        ///// </summary>
        ///// <param name="HTTPServer">An existing HTTP server.</param>
        ///// <param name="HTTPHostname">The HTTP hostname for all URLs within this API.</param>
        ///// <param name="ServiceName">The name of the service.</param>
        ///// <param name="ExternalDNSName">The offical URL/DNS name of this service, e.g. for sending e-mails.</param>
        ///// <param name="URLPathPrefix">A common prefix for all URLs.</param>
        ///// <param name="HTMLTemplate">An optional HTML template.</param>
        ///// <param name="APIVersionHashes">The API version hashes (git commit hash values).</param>
        ///// 
        ///// <param name="AdminOrganizationId">The API admin organization identification.</param>
        ///// <param name="APIRobotEMailAddress">An e-mail address for this API.</param>
        ///// <param name="APIRobotGPGPassphrase">A GPG passphrase for this API.</param>
        ///// <param name="SMTPClient">A SMTP client for sending e-mails.</param>
        ///// <param name="SMSClient">A SMS client for sending SMS.</param>
        ///// <param name="SMSSenderName">The (default) SMS sender name.</param>
        ///// <param name="TelegramBotToken">The Telegram API access token of the bot.</param>
        ///// 
        ///// <param name="PasswordQualityCheck">A delegate to ensure a minimal password quality.</param>
        ///// <param name="CookieName">The name of the HTTP Cookie for authentication.</param>
        ///// <param name="UseSecureCookies">Force the web browser to send cookies only via HTTPS.</param>
        ///// <param name="MaxSignInSessionLifetime">The maximum sign-in session lifetime.</param>
        ///// <param name="DefaultLanguage">The default language of the API.</param>
        ///// <param name="MinUserNameLength">The minimal user name length.</param>
        ///// <param name="MinRealmLength">The minimal realm length.</param>
        ///// 
        ///// <param name="DisableMaintenanceTasks">Disable all maintenance tasks.</param>
        ///// <param name="MaintenanceInitialDelay">The initial delay of the maintenance tasks.</param>
        ///// <param name="MaintenanceEvery">The maintenance intervall.</param>
        ///// <param name="DisableWardenTasks">Disable all warden tasks.</param>
        ///// <param name="WardenInitialDelay">The initial delay of the warden tasks.</param>
        ///// <param name="WardenCheckEvery">The warden intervall.</param>
        ///// 
        ///// <param name="SkipURLTemplates">Skip URL templates.</param>
        ///// <param name="DisableNotifications">Disable external notifications.</param>
        ///// <param name="DisableLogfile">Disable the log file.</param>
        ///// <param name="LogfileName">The name of the logfile for this API.</param>
        //public static UsersAPI AttachToHTTPAPI(HTTPServer                           HTTPServer,
        //                                       HTTPHostname?                        HTTPHostname                     = null,
        //                                       String                               ServiceName                      = "GraphDefined Users API",
        //                                       String                               ExternalDNSName                  = null,
        //                                       HTTPPath?                            URLPathPrefix                    = null,
        //                                       HTTPPath?                            BasePath                         = null,
        //                                       String                               HTMLTemplate                     = null,
        //                                       JObject                              APIVersionHashes                 = null,

        //                                       Organization_Id?                     AdminOrganizationId              = null,
        //                                       EMailAddress                         APIRobotEMailAddress             = null,
        //                                       String                               APIRobotGPGPassphrase            = null,
        //                                       ISMTPClient                          SMTPClient                       = null,
        //                                       ISMSClient                           SMSClient                        = null,
        //                                       String                               SMSSenderName                    = null,
        //                                       String                               TelegramBotToken                 = null,

        //                                       PasswordQualityCheckDelegate         PasswordQualityCheck             = null,
        //                                       HTTPCookieName?                      CookieName                       = null,
        //                                       Boolean                              UseSecureCookies                 = true,
        //                                       TimeSpan?                            MaxSignInSessionLifetime         = null,
        //                                       Languages                            DefaultLanguage                  = Languages.en,
        //                                       Byte?                                MinUserIdLength                  = null,
        //                                       Byte?                                MinRealmLength                   = null,
        //                                       Byte?                                MinUserNameLength                = null,
        //                                       Byte?                                MinUserGroupIdLength             = null,
        //                                       UInt16?                              MinAPIKeyLength                  = null,
        //                                       Byte?                                MinMessageIdLength               = null,
        //                                       Byte?                                MinOrganizationIdLength          = null,
        //                                       Byte?                                MinOrganizationGroupIdLength     = null,
        //                                       Byte?                                MinNotificationMessageIdLength   = null,
        //                                       Byte?                                MinNewsPostingIdLength           = null,
        //                                       Byte?                                MinNewsBannerIdLength            = null,
        //                                       Byte?                                MinFAQIdLength                   = null,

        //                                       Boolean                              DisableMaintenanceTasks          = false,
        //                                       TimeSpan?                            MaintenanceInitialDelay          = null,
        //                                       TimeSpan?                            MaintenanceEvery                 = null,
        //                                       Boolean                              DisableWardenTasks               = false,
        //                                       TimeSpan?                            WardenInitialDelay               = null,
        //                                       TimeSpan?                            WardenCheckEvery                 = null,

        //                                       Boolean                              SkipURLTemplates                 = false,
        //                                       Boolean                              DisableNotifications             = false,
        //                                       Boolean                              DisableLogfile                   = false,
        //                                       String                               LogfileName                      = DefaultLogfileName)


        //    => new UsersAPI(HTTPServer,
        //                    HTTPHostname,
        //                    ServiceName,
        //                    ExternalDNSName,
        //                    URLPathPrefix,
        //                    BasePath,
        //                    HTMLTemplate,
        //                    APIVersionHashes,

        //                    AdminOrganizationId,
        //                    APIRobotEMailAddress,
        //                    APIRobotGPGPassphrase,
        //                    SMTPClient,
        //                    SMSClient,
        //                    SMSSenderName,
        //                    TelegramBotToken,

        //                    PasswordQualityCheck,
        //                    CookieName,
        //                    UseSecureCookies,
        //                    MaxSignInSessionLifetime,
        //                    DefaultLanguage,
        //                    MinUserIdLength,
        //                    MinRealmLength,
        //                    MinUserNameLength,
        //                    MinUserGroupIdLength,
        //                    MinAPIKeyLength,
        //                    MinMessageIdLength,
        //                    MinOrganizationIdLength,
        //                    MinOrganizationGroupIdLength,
        //                    MinNotificationMessageIdLength,
        //                    MinNewsPostingIdLength,
        //                    MinNewsBannerIdLength,
        //                    MinFAQIdLength,

        //                    DisableMaintenanceTasks,
        //                    MaintenanceInitialDelay,
        //                    MaintenanceEvery,
        //                    DisableWardenTasks,
        //                    WardenInitialDelay,
        //                    WardenCheckEvery,

        //                    SkipURLTemplates,
        //                    DisableNotifications,
        //                    DisableLogfile,
        //                    LogfileName);

        #endregion


        #region Notifications...

        #region (static) NotificationMessageTypes

        public static NotificationMessageType lowStorage_MessageType                          = NotificationMessageType.Parse("lowStorage");

        public static NotificationMessageType addUser_MessageType                             = NotificationMessageType.Parse("addUser");
        public static NotificationMessageType addUserIfNotExists_MessageType                  = NotificationMessageType.Parse("addUserIfNotExists");
        public static NotificationMessageType addOrUpdateUser_MessageType                     = NotificationMessageType.Parse("addOrUpdateUser");
        public static NotificationMessageType updateUser_MessageType                          = NotificationMessageType.Parse("updateUser");
        public static NotificationMessageType deleteUser_MessageType                          = NotificationMessageType.Parse("deleteUser");

        public static NotificationMessageType addPassword_MessageType                         = NotificationMessageType.Parse("addPassword");
        public static NotificationMessageType changePassword_MessageType                      = NotificationMessageType.Parse("changePassword");
        public static NotificationMessageType resetPassword_MessageType                       = NotificationMessageType.Parse("resetPassword");
        public static NotificationMessageType addToPasswordFile                               = NotificationMessageType.Parse("add");
        public static NotificationMessageType removeFromPasswordFile                          = NotificationMessageType.Parse("remove");

        public static NotificationMessageType addUserGroup_MessageType                        = NotificationMessageType.Parse("addUserGroup");
        public static NotificationMessageType addUserGroupIfNotExists_MessageType             = NotificationMessageType.Parse("addUserGroupIfNotExists");
        public static NotificationMessageType addOrUpdateUserGroup_MessageType                = NotificationMessageType.Parse("addOrUpdateUserGroup");
        public static NotificationMessageType updateUserGroup_MessageType                     = NotificationMessageType.Parse("updateUserGroup");
        public static NotificationMessageType deleteUserGroup_MessageType                     = NotificationMessageType.Parse("deleteUserGroup");

        public static NotificationMessageType addUserToUserGroup_MessageType                  = NotificationMessageType.Parse("addUserToUserGroup");
        public static NotificationMessageType removeUserFromUserGroup_MessageType             = NotificationMessageType.Parse("removeUserFromUserGroup");

        public static NotificationMessageType addAPIKey_MessageType                           = NotificationMessageType.Parse("addAPIKey");
        public static NotificationMessageType addAPIKeyIfNotExists_MessageType                = NotificationMessageType.Parse("addAPIKeyIfNotExists");
        public static NotificationMessageType addOrUpdateAPIKey_MessageType                   = NotificationMessageType.Parse("addOrUpdateAPIKey");
        public static NotificationMessageType updateAPIKey_MessageType                        = NotificationMessageType.Parse("updateAPIKey");
        public static NotificationMessageType removeAPIKey_MessageType                        = NotificationMessageType.Parse("removeAPIKey");

        public static NotificationMessageType addMessage_MessageType                          = NotificationMessageType.Parse("addMessage");
        public static NotificationMessageType addMessageIfNotExists_MessageType               = NotificationMessageType.Parse("addMessageIfNotExists");
        public static NotificationMessageType addOrUpdateMessage_MessageType                  = NotificationMessageType.Parse("addOrUpdateMessage");
        public static NotificationMessageType updateMessage_MessageType                       = NotificationMessageType.Parse("updateMessage");
        public static NotificationMessageType removeMessage_MessageType                       = NotificationMessageType.Parse("removeMessage");

        public static NotificationMessageType addNotificationMessage_MessageType              = NotificationMessageType.Parse("addNotificationMessage");
        public static NotificationMessageType addNotificationMessageIfNotExists_MessageType   = NotificationMessageType.Parse("addNotificationMessageIfNotExists");
        public static NotificationMessageType addOrUpdateNotificationMessage_MessageType      = NotificationMessageType.Parse("addOrUpdateNotificationMessage");
        public static NotificationMessageType updateNotificationMessage_MessageType           = NotificationMessageType.Parse("updateNotificationMessage");
        public static NotificationMessageType removeNotificationMessage_MessageType           = NotificationMessageType.Parse("removeNotificationMessage");

        public static NotificationMessageType addOrganization_MessageType                     = NotificationMessageType.Parse("addOrganization");
        public static NotificationMessageType addOrganizationIfNotExists_MessageType          = NotificationMessageType.Parse("addOrganizationIfNotExists");
        public static NotificationMessageType addOrUpdateOrganization_MessageType             = NotificationMessageType.Parse("addOrUpdateOrganization");
        public static NotificationMessageType updateOrganization_MessageType                  = NotificationMessageType.Parse("updateOrganization");
        public static NotificationMessageType deleteOrganization_MessageType                  = NotificationMessageType.Parse("deleteOrganization");

        public static NotificationMessageType addUserToOrganization_MessageType               = NotificationMessageType.Parse("addUserToOrganization");
        public static NotificationMessageType removeUserFromOrganization_MessageType          = NotificationMessageType.Parse("removeUserFromOrganization");

        public static NotificationMessageType linkOrganizations_MessageType                   = NotificationMessageType.Parse("linkOrganizations");
        public static NotificationMessageType unlinkOrganizations_MessageType                 = NotificationMessageType.Parse("unlinkOrganizations");

        public static NotificationMessageType addOrganizationGroup_MessageType                = NotificationMessageType.Parse("addOrganizationGroup");
        public static NotificationMessageType addOrganizationGroupIfNotExists_MessageType     = NotificationMessageType.Parse("addOrganizationGroupIfNotExists");
        public static NotificationMessageType addOrUpdateOrganizationGroup_MessageType        = NotificationMessageType.Parse("addOrUpdateOrganizationGroup");
        public static NotificationMessageType updateOrganizationGroup_MessageType             = NotificationMessageType.Parse("updateOrganizationGroup");
        public static NotificationMessageType removeOrganizationGroup_MessageType             = NotificationMessageType.Parse("removeOrganizationGroup");

        public static NotificationMessageType addNotification_MessageType                     = NotificationMessageType.Parse("addNotification");
        public static NotificationMessageType removeNotification_MessageType                  = NotificationMessageType.Parse("removeNotification");

        public static NotificationMessageType addServiceTicket_MessageType                    = NotificationMessageType.Parse("addServiceTicket");
        public static NotificationMessageType addServiceTicketIfNotExists_MessageType         = NotificationMessageType.Parse("addServiceTicketIfNotExists");
        public static NotificationMessageType addOrUpdateServiceTicket_MessageType            = NotificationMessageType.Parse("addOrUpdateServiceTicket");
        public static NotificationMessageType updateServiceTicket_MessageType                 = NotificationMessageType.Parse("updateServiceTicket");
        public static NotificationMessageType removeServiceTicket_MessageType                 = NotificationMessageType.Parse("removeServiceTicket");
        public static NotificationMessageType changeServiceTicketStatus_MessageType           = NotificationMessageType.Parse("changeServiceTicketStatus");

        public static NotificationMessageType addDashboard_MessageType                        = NotificationMessageType.Parse("addDashboard");
        public static NotificationMessageType addDashboardIfNotExists_MessageType             = NotificationMessageType.Parse("addDashboardIfNotExists");
        public static NotificationMessageType addOrUpdateDashboard_MessageType                = NotificationMessageType.Parse("addOrUpdateDashboard");
        public static NotificationMessageType updateDashboard_MessageType                     = NotificationMessageType.Parse("updateDashboard");
        public static NotificationMessageType removeDashboard_MessageType                     = NotificationMessageType.Parse("removeDashboard");

        public static NotificationMessageType addNewsPosting_MessageType                      = NotificationMessageType.Parse("addNewsPosting");
        public static NotificationMessageType addNewsPostingIfNotExists_MessageType           = NotificationMessageType.Parse("addNewsPostingIfNotExists");
        public static NotificationMessageType addOrUpdateNewsPosting_MessageType              = NotificationMessageType.Parse("addOrUpdateNewsPosting");
        public static NotificationMessageType updateNewsPosting_MessageType                   = NotificationMessageType.Parse("updateNewsPosting");
        public static NotificationMessageType removeNewsPosting_MessageType                   = NotificationMessageType.Parse("removeNewsPosting");

        public static NotificationMessageType addNewsBanner_MessageType                       = NotificationMessageType.Parse("addNewsBanner");
        public static NotificationMessageType addNewsBannerIfNotExists_MessageType            = NotificationMessageType.Parse("addNewsBannerIfNotExists");
        public static NotificationMessageType addOrUpdateNewsBanner_MessageType               = NotificationMessageType.Parse("addOrUpdateNewsBanner");
        public static NotificationMessageType updateNewsBanner_MessageType                    = NotificationMessageType.Parse("updateNewsBanner");
        public static NotificationMessageType removeNewsBanner_MessageType                    = NotificationMessageType.Parse("removeNewsBanner");

        public static NotificationMessageType addFAQ_MessageType                              = NotificationMessageType.Parse("addFAQ");
        public static NotificationMessageType addFAQIfNotExists_MessageType                   = NotificationMessageType.Parse("addFAQIfNotExists");
        public static NotificationMessageType addOrUpdateFAQ_MessageType                      = NotificationMessageType.Parse("addOrUpdateFAQ");
        public static NotificationMessageType updateFAQ_MessageType                           = NotificationMessageType.Parse("updateFAQ");
        public static NotificationMessageType removeFAQ_MessageType                           = NotificationMessageType.Parse("removeFAQ");
        public static NotificationMessageType changeFAQAdminStatus_MessageType                = NotificationMessageType.Parse("changeFAQAdminStatus");
        public static NotificationMessageType changeFAQStatus_MessageType                     = NotificationMessageType.Parse("changeFAQStatus");

        #endregion

        #region (private) RegisterNotifications()

        public static NotificationGroup_Id ServiceTicketsNotifications   = NotificationGroup_Id.Parse("Service Ticket Notifications");
        public static NotificationGroup_Id UsersManagementNotifications  = NotificationGroup_Id.Parse("Users Management Notifications");

        private async Task RegisterNotifications()
        {

            await AddNotificationGroup(new NotificationGroup(
                                           ServiceTicketsNotifications,
                                           I18NString.Create(Languages.en, "Service Tickets"),
                                           I18NString.Create(Languages.en, "Service Ticket notifications"),
                                           NotificationVisibility.Customers,
                                           new NotificationMessageDescription[] {
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "(New) service ticket added"),                  I18NString.Create(Languages.en, ""), NotificationVisibility.Customers, NotificationTag.NewUserDefault, addServiceTicket_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "(New) service ticket added (did not exist)"),  I18NString.Create(Languages.en, ""), NotificationVisibility.System,    NotificationTag.NewUserDefault, addServiceTicketIfNotExists_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "(New) service ticket added or updated"),       I18NString.Create(Languages.en, ""), NotificationVisibility.System,    NotificationTag.NewUserDefault, addOrUpdateServiceTicket_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "ServiceTicket updated"),                       I18NString.Create(Languages.en, ""), NotificationVisibility.Customers, NotificationTag.NewUserDefault, updateServiceTicket_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "ServiceTicket removed"),                       I18NString.Create(Languages.en, ""), NotificationVisibility.Customers, NotificationTag.NewUserDefault, removeServiceTicket_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "ServiceTicket status changed"),                I18NString.Create(Languages.en, ""), NotificationVisibility.Customers, NotificationTag.NewUserDefault, changeServiceTicketStatus_MessageType)
                                           }));

            await AddNotificationGroup(new NotificationGroup(
                                           UsersManagementNotifications,
                                           I18NString.Create(Languages.en, "Users Management"),
                                           I18NString.Create(Languages.en, "Users Management notifications"),
                                           NotificationVisibility.Customers,
                                           new NotificationMessageDescription[] {
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "New user created"),                            I18NString.Create(Languages.en, "A new user was added to portal."),                   NotificationVisibility.Admins,     addUser_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "User added to organization"),                  I18NString.Create(Languages.en, "The user was added to an organization."),            NotificationVisibility.Customers,  addUserToOrganization_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "User information updated"),                    I18NString.Create(Languages.en, "The user information was updated."),                 NotificationVisibility.Customers,  updateUser_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "User removed from portal"),                    I18NString.Create(Languages.en, "The user was removed from the portal."),             NotificationVisibility.Admins,     deleteUser_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "User removed from organization"),              I18NString.Create(Languages.en, "The user was removed from an organization."),        NotificationVisibility.Customers,  removeUserFromOrganization_MessageType),

                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "New organization created"),                    I18NString.Create(Languages.en, "A new organization was created."),                   NotificationVisibility.Admins,     addOrganization_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "Sub organization added to organization"),      I18NString.Create(Languages.en, "A sub organization was added to an organization."),  NotificationVisibility.Customers,  linkOrganizations_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "Organization information updated"),            I18NString.Create(Languages.en, "An organization information was updated."),          NotificationVisibility.Customers,  updateOrganization_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "Organization removed"),                        I18NString.Create(Languages.en, "An organization was removed."),                      NotificationVisibility.Admins,     deleteOrganization_MessageType),
                                               new NotificationMessageDescription(I18NString.Create(Languages.en, "Sub organization removed from organization"),  I18NString.Create(Languages.en, "A sub organization removed from an organization."),  NotificationVisibility.Customers,  unlinkOrganizations_MessageType),
                                           }));

        }

        #endregion

        #region E-Mail headers / footers

        /// <summary>
        /// The type of e-mails send.
        /// This might influence the content of the common e-mail headers and footers.
        /// </summary>
        public enum EMailType
        {

            /// <summary>
            /// A normal e-mail.
            /// </summary>
            Normal,

            /// <summary>
            /// A system e-mail.
            /// </summary>
            System,

            /// <summary>
            /// A notification e-mail.
            /// </summary>
            Notification

        }

        /// <summary>
        /// The common header of HTML notification e-mails.
        /// </summary>
        public virtual String HTMLEMailHeader(String     ExternalDNSName,
                                              HTTPPath?  BasePath,
                                              EMailType  EMailType)

            => String.Concat("<!DOCTYPE html>\r\n",
                             "<html>\r\n",
                               "<head>\r\n",
                                   "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n",
                               "</head>\r\n",
                               "<body style=\"background-color: #ececec\">\r\n",
                                 "<div style=\"width: 600px\">\r\n",
                                   "<div style=\"border-bottom: 1px solid #AAAAAA; margin-bottom: 20px\">\r\n",
                                       "<img src=\"", ExternalDNSName, (BasePath?.ToString() ?? ""), "\" style=\"width: 250px; padding-right: 10px\" alt=\"Organization\">\r\n",
                                   "</div>\r\n",
                                   "<div style=\"border-bottom: 1px solid #AAAAAA; padding-left: 6px; padding-bottom: 40px; margin-bottom: 10px;\">\r\n");


        /// <summary>
        /// The common footer of HTML notification e-mails.
        /// </summary>
        public virtual String HTMLEMailFooter(String     ExternalDNSName,
                                              HTTPPath?  BasePath,
                                              EMailType  EMailType)

            => String.Concat(      "</div>\r\n",
                                   EMailType == EMailType.Notification
                                       ? "<div style=\"color: #AAAAAA; font-size: 80%; padding-bottom: 10px\">\r\n" +
                                             "If you no longer wish to receive this kind of notification e-mails you can unsubscribe <a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/notifications\">here</a>.<br />\r\n" +
                                         "</div>\r\n"
                                       : "",
                                   "<div style=\"color: #AAAAAA; font-size: 70%\">\r\n",
                                       "(c) GraphDefined GmbH<br />\r\n",
                                   "</div>\r\n",
                                 "</div>\r\n",
                               "</body>\r\n",
                             "</html>\r\n\r\n");


        /// <summary>
        /// The common header of plain text notification e-mails.
        /// </summary>
        public virtual String TextEMailHeader(String     ExternalDNSName,
                                              HTTPPath?  BasePath,
                                              EMailType  EMailType)

            => String.Concat("GraphDefined Users API\r\n",
                             "----------------------\r\n\r\n");


        /// <summary>
        /// The common footer of plain text notification e-mails.
        /// </summary>
        public virtual String TextEMailFooter(String     ExternalDNSName,
                                              HTTPPath?  BasePath,
                                              EMailType  EMailType)

            => String.Concat("\r\n\r\n---------------------------------------------------------------\r\n",
                             EMailType == EMailType.Notification
                                 ? "If you no longer wish to receive this kind of notification e-mails you can unsubscribe here: https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/notifications.\r\n\r\n"
                                 : "",
                             "Users API\r\n",
                             "(c) GraphDefined GmbH\r\n\r\n");

        #endregion

        #region E-Mail templates

        #region NewUserSignUpEMailCreatorDelegate

        /// <summary>
        /// A delegate for sending a sign-up e-mail to a new user.
        /// </summary>
        public virtual EMail NewUserSignUpEMailCreator(User              User,
                                                       EMailAddressList  EMailRecipients,
                                                       SecurityToken_Id  SecurityToken,
                                                       Boolean           Use2FactorAuth,
                                                       Languages         Language,
                                                       EventTracking_Id  EventTrackingId)

            =>  new HTMLEMailBuilder() {

                    From           = Robot.EMail,
                    To             = EMailRecipients,
                    Passphrase     = APIPassphrase,
                    Subject        = "Your " + ServiceName + " account has been created",

                    HTMLText       = String.Concat(
                                         HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.System),
                                             "Dear ", User.Name, ",<br /><br />" + Environment.NewLine,
                                             "your " + ServiceName + " account has been created!<br /><br />" + Environment.NewLine,
                                             "Please click the following link to set a new password for your account" + (Use2FactorAuth ? " and check your mobile phone for an additional security token" : "") + "...<br /><br />" + Environment.NewLine,
                                             "<a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/setPassword?" + SecurityToken + (Use2FactorAuth ? "&2factor" : "") + "\" style=\"text-decoration: none; color: #FFFFFF; background-color: #ff7300; Border: solid #ff7300; border-width: 10px 20px; line-height: 2; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 4px; margin-top: 20px; font-size: 70%\">Set a new password</a>" + Environment.NewLine,
                                         HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                     ),

                    PlainText      = String.Concat(
                                         TextEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                             "Dear ", User.Name, ", " + Environment.NewLine +
                                             "your " + ServiceName + " account has been created!" + Environment.NewLine + Environment.NewLine +
                                             "Please click the following link to set a new password for your account" + (Use2FactorAuth ? " and check your mobile phone for an additional security token" : "") + "..." + Environment.NewLine + Environment.NewLine +
                                             "https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/setPassword?" + SecurityToken + (Use2FactorAuth ? "&2factor" : "") +
                                         TextEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                    SecurityLevel  = EMailSecurity.autosign

                }.AsImmutable;

        #endregion

        #region NewUserWelcomeEMailCreatorDelegate

        /// <summary>
        /// A delegate for sending a welcome e-mail to a new user.
        /// </summary>
        public virtual EMail NewUserWelcomeEMailCreator(User              User,
                                                        EMailAddressList  EMailRecipients,
                                                        Languages         Language,
                                                        EventTracking_Id  EventTrackingId)

            => new HTMLEMailBuilder() {

                   From           = Robot.EMail,
                   To             = EMailRecipients,
                   Passphrase     = APIPassphrase,
                   Subject        = "Welcome to " + ServiceName + "...",

                   HTMLText       = String.Concat(
                                        HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + ",<br /><br />" + Environment.NewLine +
                                            "welcome to your new " + ServiceName + " account!<br /><br />" + Environment.NewLine +
                                            "<a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/login\" style=\"text-decoration: none; color: #FFFFFF; background-color: #ff7300; Border: solid #ff7300; border-width: 10px 20px; line-height: 2; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 4px; margin-top: 20px; font-size: 70%\">Login</a>" + Environment.NewLine +
                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   PlainText      = String.Concat(
                                        TextEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + "," + Environment.NewLine +
                                            "welcome to your new " + ServiceName + " account!" + Environment.NewLine + Environment.NewLine +
                                            "Please login via: https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/login" + Environment.NewLine + Environment.NewLine +
                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   SecurityLevel  = EMailSecurity.autosign

               }.//AddAttachment("Hi there!".ToUTF8Bytes(), "welcome.txt", MailContentTypes.text_plain).
                 AsImmutable;

        #endregion

        #region ResetPasswordEMailCreatorDelegate

        /// <summary>
        /// A delegate for sending a reset password e-mail to a user.
        /// </summary>
        public virtual EMail ResetPasswordEMailCreator(User              User,
                                                       EMailAddressList  EMailRecipients,
                                                       SecurityToken_Id  SecurityToken,
                                                       Boolean           Use2FactorAuth,
                                                       Languages         Language,
                                                       EventTracking_Id  EventTrackingId)

            => new HTMLEMailBuilder() {

                   From           = Robot.EMail,
                   To             = EMailRecipients,
                   Passphrase     = APIPassphrase,
                   Subject        = ServiceName + " password reset...",

                   HTMLText       = String.Concat(
                                        HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + ",<br /><br />" + Environment.NewLine +
                                            "someone - hopefully you - requested us to change your password!<br />" + Environment.NewLine +
                                            "If this request was your intention, please click the following link to set a new password...<br /><br />" + Environment.NewLine +
                                            "<a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/setPassword?" + SecurityToken + (Use2FactorAuth ? "&2factor" : "") + "\" style=\"text-decoration: none; color: #FFFFFF; background-color: #ff7300; Border: solid #ff7300; border-width: 10px 20px; line-height: 2; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 4px; margin-top: 20px; font-size: 70%\">Set a new password</a>" + Environment.NewLine +
                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   PlainText      = String.Concat(
                                        TextEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + "," + Environment.NewLine +
                                            "someone - hopefully you - requested us to change your password!" + Environment.NewLine +
                                            "If this request was your intention, please click the following link to set a new password..." + Environment.NewLine + Environment.NewLine +
                                            "https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/setPassword?" + SecurityToken + (Use2FactorAuth ? "&2factor" : "") +
                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   SecurityLevel  = EMailSecurity.autosign

               }.AsImmutable;

        #endregion

        #region PasswordChangedEMailCreatorDelegate

        /// <summary>
        /// A delegate for sending a reset password e-mail to a user.
        /// </summary>
        public virtual EMail PasswordChangedEMailCreator(User              User,
                                                         EMailAddressList  EMailRecipients,
                                                         Languages         Language,
                                                         EventTracking_Id  EventTrackingId)

            => new HTMLEMailBuilder() {

                   From           = Robot.EMail,
                   To             = EMailRecipients,
                   Passphrase     = APIPassphrase,
                   Subject        = "Your " + ServiceName + " password changed...",

                   HTMLText       = String.Concat(
                                        HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + ",<br /><br />" + Environment.NewLine +
                                            "your password has successfully been changed!<br />" + Environment.NewLine +
                                            "<a href=\"https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/login?" + User.Id + "\" style=\"text-decoration: none; color: #FFFFFF; background-color: #ff7300; Border: solid #ff7300; border-width: 10px 20px; line-height: 2; font-weight: bold; text-align: center; cursor: pointer; display: inline-block; border-radius: 4px; margin-top: 20px; font-size: 70%\">Login</a>" + Environment.NewLine +
                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   PlainText      = String.Concat(
                                        TextEMailHeader(ExternalDNSName, BasePath, EMailType.System) +
                                            "Dear " + User.Name + "," + Environment.NewLine +
                                            "your password has successfully been changed!" + Environment.NewLine +
                                            "https://" + ExternalDNSName + (BasePath?.ToString() ?? "") + "/login?" + User.Id +
                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.System)
                                    ),

                   SecurityLevel  = EMailSecurity.autosign

               }.AsImmutable;

        #endregion


        #region NewServiceTicketMessageReceivedDelegate

        ///// <summary>
        ///// A delegate for sending e-mail notifications about received service ticket messages to users.
        ///// </summary>
        //public delegate EMail NewServiceTicketMessageReceivedDelegate(ServiceTicket    ParsedMessage,
        //                                                              EMailAddressList  EMailRecipients);

        //private static readonly Func<String, EMailAddress, String, NewServiceTicketMessageReceivedDelegate>

        //    __NewServiceTicketMessageReceivedDelegate = (BaseURL,
        //                                                 APIEMailAddress,
        //                                                 APIPassphrase)

        //        => (ParsedMessage,
        //            EMailRecipients)

        //            =>  new HTMLEMailBuilder() {

        //                    From            = APIEMailAddress,
        //                    To              = EMailAddressListBuilder.Create(EMailRecipients),
        //                    Passphrase      = APIPassphrase,
        //                    Subject         = "...", //ParsedMessage.EMailSubject,

        //                    HTMLText        = HTMLEMailHeader +
        //                                          //ParsedMessage.EMailBody.Replace("\r\n", "<br />\r\n") + Environment.NewLine +
        //                                      HTMLEMailFooter,

        //                    PlainText       = TextEMailHeader +
        //                                          //ParsedMessage.EMailBody + Environment.NewLine +
        //                                      TextEMailFooter,

        //                    SecurityLevel   = EMailSecurity.autosign

        //                };

        #endregion

        #region ServiceTicketStatusChangedEMailDelegate

        ///// <summary>
        ///// A delegate for sending e-mail notifications about service ticket status changes to users.
        ///// </summary>
        //public delegate EMail ServiceTicketStatusChangedEMailDelegate(ServiceTicket                         ServiceTicket,
        //                                                              Timestamped<ServiceTicketStatusTypes>  OldStatus,
        //                                                              Timestamped<ServiceTicketStatusTypes>  NewStatus,
        //                                                              EMailAddressList                       EMailRecipients);

        //private static readonly Func<String, EMailAddress, String, ServiceTicketStatusChangedEMailDelegate>

        //    __ServiceTicketStatusChangedEMailDelegate = (BaseURL,
        //                                                 APIEMailAddress,
        //                                                 APIPassphrase)

        //        => (ServiceTicket,
        //            OldStatus,
        //            NewStatus,
        //            EMailRecipients)

        //            => new HTMLEMailBuilder() {

        //                From           = APIEMailAddress,
        //                To             = EMailAddressListBuilder.Create(EMailRecipients),
        //                Passphrase     = APIPassphrase,
        //                Subject        = String.Concat("ServiceTicket '",        ServiceTicket.Id,
        //                                               "' status change from '", OldStatus.Value,
        //                                               " to '",                  NewStatus.Value, "'!"),

        //                HTMLText       = String.Concat(HTMLEMailHeader,
        //                                               "The status of service ticket <b>'", ServiceTicket.Id, "'</b> (Owner: '", ServiceTicket.Author,
        //                                               "'), changed from <i>'", OldStatus.Value, "'</i> (since ", OldStatus.Timestamp.ToIso8601(), ") ",
        //                                               " to <i>'", NewStatus.Value, "'</i>!<br /><br />",
        //                                               HTMLEMailFooter),

        //                PlainText      = String.Concat(TextEMailHeader,
        //                                               "The status of service ticket '", ServiceTicket.Id, "' (Owner: '", ServiceTicket.Author,
        //                                               "'), changed from '", OldStatus.Value, "' (since ", OldStatus.Timestamp.ToIso8601(), ") ",
        //                                               " to '", NewStatus.Value, "'!\r\r\r\r",
        //                                               TextEMailFooter),

        //                SecurityLevel  = EMailSecurity.autosign

        //            };

        #endregion

        #region ServiceTicketChangedEMailDelegate

        ///// <summary>
        ///// A delegate for sending e-mail notifications about service ticket changes to users.
        ///// </summary>
        //public delegate EMail ServiceTicketChangedEMailDelegate(ServiceTicket             ServiceTicket,
        //                                                        NotificationMessageType    MessageType,
        //                                                        NotificationMessageType[]  AdditionalMessageTypes,
        //                                                        EMailAddressList           EMailRecipients);

        //private static readonly Func<String, EMailAddress, String, ServiceTicketChangedEMailDelegate>

        //    __ServiceTicketChangedEMailDelegate = (BaseURL,
        //                                           APIEMailAddress,
        //                                           APIPassphrase)

        //        => (ServiceTicket,
        //            MessageType,
        //            AdditionalMessageTypes,
        //            EMailRecipients)

        //            => new HTMLEMailBuilder() {

        //                From           = APIEMailAddress,
        //                To             = EMailAddressListBuilder.Create(EMailRecipients),
        //                Passphrase     = APIPassphrase,
        //                Subject        = String.Concat("ServiceTicket data '", ServiceTicket.Id, "' was changed'!"),

        //                HTMLText       = String.Concat(HTMLEMailHeader,
        //                                               "The data of service ticket <b>'", ServiceTicket.Id, "'</b> (Owner: '", ServiceTicket.Author,
        //                                               "') was changed!<br /><br />",
        //                                               HTMLEMailFooter),

        //                PlainText      = String.Concat(TextEMailHeader,
        //                                               "The data of service ticket '", ServiceTicket.Id, "' (Owner: '", ServiceTicket.Author,
        //                                               "') was changed!\r\r\r\r",
        //                                               TextEMailFooter),

        //                SecurityLevel  = EMailSecurity.autosign

        //            };

        #endregion

        #endregion

        #region (protected) SendSMS(Text, To, Sender = null)

        /// <summary>
        /// Send a SMS to the given phone number.
        /// </summary>
        /// <param name="Text">The text of the SMS.</param>
        /// <param name="To">The phone number of the recipient.</param>
        /// <param name="Sender">An optional sender name.</param>
        protected virtual SMSAPIResponseStatus SendSMS(String  Text,
                                                       String  To,
                                                       String  Sender  = null)
        {

            if (SMSClient != null)
            {

                var smsSend = SMSClient.Send(Text, To);

                if (smsSend != null)
                    return smsSend.SetSender(Sender ?? SMSSenderName).Execute();

            }

            return SMSAPIResponseStatus.Failed("No SMSAPI defined!");

        }

        /// <summary>
        /// Send a SMS to the given phone number.
        /// </summary>
        /// <param name="Text">The text of the SMS.</param>
        /// <param name="To">The phone numbers of the recipients.</param>
        /// <param name="Sender">An optional sender name.</param>
        protected SMSAPIResponseStatus SendSMS(String    Text,
                                               String[]  To,
                                               String    Sender  = null)
        {

            if (SMSClient != null)
            {

                var smsSend = SMSClient.Send(Text, To);

                if (smsSend != null)
                    return smsSend.SetSender(Sender ?? SMSSenderName).Execute();

            }

            return SMSAPIResponseStatus.Failed("No SMSAPI defined!");

        }

        #endregion

        #region (protected) SendHTTPSNotifications(AllNotificationURLs, JSONNotification)

        #region (protected) LogRequest(...)

        protected Task LogRequest(DateTime     Timestamp,
                                  AHTTPClient  Client,
                                  String       RemoteHost,
                                  HTTPRequest  Request)
        {

            return Task.Run(() => {

                using (var Logfile = File.AppendText(this.NotificationsPath +
                                                     RemoteHost + "-Requests-" + Request.Timestamp.ToString("yyyy-MM") + ".log"))
                {

                    Logfile.WriteLine(
                        String.Concat(Request.HTTPSource.ToString(), Environment.NewLine,
                                      Request.Timestamp.ToIso8601(), Environment.NewLine,
                                      Request.EventTrackingId, Environment.NewLine,
                                      Request.EntirePDU, Environment.NewLine,
                                      "======================================================================================"));

                }

            });

        }

        #endregion

        #region (protected) LogResponse(...)

        protected Task LogResponse(DateTime      Timestamp,
                                   AHTTPClient   Client,
                                   String        RemoteHost,
                                   HTTPRequest   Request,
                                   HTTPResponse  Response)
        {

            return Task.Run(() => {

                Response.AppendLogfile(this.NotificationsPath +
                                       RemoteHost + "-Responses-" + Request.Timestamp.ToString("yyyy-MM") + ".log");

            });

        }

        #endregion

        protected async Task SendHTTPSNotifications(IEnumerable<HTTPSNotification>  AllNotificationURLs,
                                                    JObject                         JSONNotification)
        {

            if (!DisableNotifications)
            {

                try
                {

                    foreach (var notificationURL in AllNotificationURLs)
                    {

                        HTTPRequest  request     = null;
                        HTTPResponse result      = HTTPResponse.ClientError(request);
                        Byte TransmissionRetry   = 0;
                        Byte MaxNumberOfRetries  = 3;

                        do
                        {

                            try
                            {

                                String       protocol;
                                HTTPPath      URL;
                                HTTPHostname hostname;

                                if (notificationURL.URL.Contains("://"))
                                {
                                    protocol = notificationURL.URL.Substring(0, notificationURL.URL.IndexOf("://"));
                                    var url  = notificationURL.URL.Substring(notificationURL.URL.IndexOf("://") + 3);
                                    hostname = HTTPHostname.Parse(url.Substring(0, url.IndexOf('/')));
                                    URL      = HTTPPath.Parse(url.Substring(url.IndexOf('/')));
                                }
                                else
                                {
                                    protocol = "https";
                                    hostname = HTTPHostname.Parse(notificationURL.URL.Substring(0, notificationURL.URL.IndexOf('/')));
                                    URL      = HTTPPath.Parse(notificationURL.URL.Substring(notificationURL.URL.IndexOf('/')));
                                }

                                using (var _HTTPSClient = new HTTPSClient(hostname,
                                                                          //HTTPVirtualHost:
                                                                          RemoteCertificateValidator: (Object                                                         sender,
                                                                                                       System.Security.Cryptography.X509Certificates.X509Certificate  certificate,
                                                                                                       X509Chain                                                      chain,
                                                                                                       SslPolicyErrors                                                sslPolicyErrors) => true,
                                                                          ClientCertificateSelector:   null,
                                                                          ClientCert:                  null,
                                                                          RemotePort:                  notificationURL.RemotePort,
                                                                          HTTPUserAgent:               null,
                                                                          RequestTimeout:              null,
                                                                          DNSClient:                   this.DNSClient))
                                {

                                    Console.WriteLine("Sending HTTPS-notification to: " + hostname.Name);

                                    request  = new HTTPRequest.Builder(_HTTPSClient) {
                                                   HTTPMethod     = notificationURL.Method,
                                                   Host           = hostname,
                                                   Path           = URL,
                                                   Content        = new JArray(JSONNotification).ToUTF8Bytes(),
                                                   ContentType    = HTTPContentType.JSON_UTF8,
                                                   UserAgent      = "CardiCloud Notification API",
                                                   API_Key        = notificationURL.APIKey.IsNotNullOrEmpty()
                                                                        ? notificationURL.APIKey
                                                                        : null,
                                                   Authorization  = notificationURL.BasicAuth_Login.   IsNotNullOrEmpty() &&
                                                                    notificationURL.BasicAuth_Password.IsNotNullOrEmpty()
                                                                        ? new HTTPBasicAuthentication(notificationURL.BasicAuth_Login,
                                                                                                      notificationURL.BasicAuth_Password)
                                                                        : null
                                    };

                                    result   = await _HTTPSClient.Execute(Request:              request,
                                                                          RequestLogDelegate:   (timestamp, client, req)       => LogRequest (timestamp, client, hostname.Name, req),
                                                                          ResponseLogDelegate:  (timestamp, client, req, resp) => LogResponse(timestamp, client, hostname.Name, req, resp),

                                                                          CancellationToken:    null,
                                                                          EventTrackingId:      EventTracking_Id.New,
                                                                          RequestTimeout:       notificationURL.RequestTimeout,
                                                                          NumberOfRetry:        TransmissionRetry++);

                                    Console.WriteLine("Result: " + result);

                                }

                                if (result == null)
                                    result = HTTPResponse.ClientError(request);

                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e);
                            }

                        }
                        // Try to resend the HTTP message, when there had been networking errors...
                        while (result.HTTPStatusCode == HTTPStatusCode.RequestTimeout &&
                               TransmissionRetry++ < MaxNumberOfRetries);

                        // If it failed: Write entire message on disc/logfile
                        //               Reread the logfile later and try to resend the message!

                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }

            }

        }

        #endregion

        #region ReceiveTelegramMessage(Sender, e)

        async void ReceiveTelegramMessage(Object Sender, Telegram.Bot.Args.MessageEventArgs e)
        {

            var messageText = e?.Message?.Text;

            if (messageText.IsNeitherNullNorEmpty())
                messageText.Trim();

            if (messageText.IsNotNullOrEmpty())
            {

                var command = messageText.Split(' ');

                switch (command[0])
                {

                    case "/system":
                        await this.TelegramClient.SendTextMessageAsync(
                            ChatId:  e.Message.Chat,
                            Text:    "I'm running on: " + Environment.MachineName + " and use " + (Environment.WorkingSet / 1024 /1024) + " MBytes RAM"
                        );
                        break;

                    case "/echo":
                        await this.TelegramClient.SendTextMessageAsync(
                            ChatId:  e.Message.Chat,
                            Text:    "Hello " + e.Message.From.FirstName + " " + e.Message.From.LastName + "!\nYou said:\n" + e.Message.Text
                        );
                        break;

                }

            }
        }

        #endregion

        #endregion

        #region (private) RegisterURLTemplates()

        #region (private)   GenerateCookieUserData(ValidUser, Astronaut = null)

        private String GenerateCookieUserData(User  User,
                                              User  Astronaut  = null)

            => String.Concat("=login=",            User.     Id.      ToString().ToBase64(),
                             Astronaut != null
                                 ? ":astronaut=" + Astronaut.Id.      ToString().ToBase64()
                                 : "",
                             ":username=",         User.Name.                    ToBase64(),
                             ":email=",            User.EMail.Address.ToString().ToBase64(),
                             ":language=",         User.UserLanguage. AsText().  ToBase64(),
                             IsAdmin(User) == Access_Levels.ReadOnly  ? ":isAdminRO" : "",
                             IsAdmin(User) == Access_Levels.ReadWrite ? ":isAdminRW" : "");


        #endregion

        #region (private)   GenerateCookieSettings(Expires)

        private String GenerateCookieSettings(DateTime Expires)

            => String.Concat("; Expires=",  Expires.ToRfc1123(),
                             HTTPCookieDomain.IsNotNullOrEmpty()
                                 ? "; Domain=" + HTTPCookieDomain
                                 : "",
                             "; Path=",     URLPathPrefix.ToString(),
                             "; SameSite=strict",
                             UseSecureCookies
                                 ? "; secure"
                                 : "");

        #endregion

        #region (protected) TryGetSecurityTokenFromCookie(Request)

        protected SecurityToken_Id? TryGetSecurityTokenFromCookie(HTTPRequest Request)
        {

            if (Request.Cookies == null)
                return null;

            if (Request.Cookies. TryGet  (SessionCookieName,           out HTTPCookie       Cookie) &&
                SecurityToken_Id.TryParse(Cookie.FirstOrDefault().Key, out SecurityToken_Id SecurityTokenId))
            {
                return SecurityTokenId;
            }

            return null;

        }

        #endregion

        #region (protected) TryGetSecurityTokenFromCookie(Request, SecurityTokenId)

        protected Boolean TryGetSecurityTokenFromCookie(HTTPRequest Request, out SecurityToken_Id SecurityTokenId)
        {

            if (Request.Cookies  != null &&
                Request.Cookies. TryGet  (SessionCookieName,           out HTTPCookie Cookie) &&
                SecurityToken_Id.TryParse(Cookie.FirstOrDefault().Key, out            SecurityTokenId))
            {
                return true;
            }

            SecurityTokenId = default;
            return false;

        }

        #endregion

        #region (protected) TryGetHTTPUser (Request, out User)

        protected Boolean TryGetHTTPUser(HTTPRequest Request, out User User)
        {

            #region Get user from cookie...

            if (Request.Cookies != null                                                                             &&
                Request.Cookies. TryGet     (SessionCookieName,           out HTTPCookie       Cookie)              &&
                SecurityToken_Id.TryParse   (Cookie.FirstOrDefault().Key, out SecurityToken_Id SecurityTokenId)     &&
                _HTTPCookies.    TryGetValue(SecurityTokenId,             out SecurityToken    SecurityInformation) &&
                Timestamp.Now < SecurityInformation.Expires                                                         &&
                TryGetUser(SecurityInformation.UserId, out User))
            {
                return true;
            }

            #endregion

            #region Get user from Basic-Auth...

            if (Request.Authorization is HTTPBasicAuthentication basicAuth)
            {

                #region Find username or e-mail addresses...

                var possibleUsers = new HashSet<User>();
                var validUsers    = new HashSet<User>();

                if (User_Id.TryParse   (basicAuth.Username, out User_Id _UserId) &&
                    _Users. TryGetValue(_UserId,            out User    _User))
                {
                    possibleUsers.Add(_User);
                }

                if (possibleUsers.Count == 0)
                {
                    foreach (var user in _Users.Values)
                    {
                        if (String.Equals(basicAuth.Username,
                                          user.EMail.Address.ToString(),
                                          StringComparison.OrdinalIgnoreCase))
                        {
                            possibleUsers.Add(user);
                        }
                    }
                }

                if (possibleUsers.Count > 0)
                {
                    foreach (var possibleUser in possibleUsers)
                    {
                        if (_LoginPasswords.TryGetValue(possibleUser.Id, out LoginPassword loginPassword) &&
                            loginPassword.VerifyPassword(basicAuth.Password))
                        {
                            validUsers.Add(possibleUser);
                        }
                    }
                }

                #endregion

                #region HTTP Basic Auth is ok!

                if (validUsers.Count == 1 &&
                    validUsers.First().AcceptedEULA.HasValue &&
                    validUsers.First().AcceptedEULA.Value < Timestamp.Now)
                {
                    User = validUsers.First();
                    return true;
                }

                #endregion

            }

            #endregion

            #region Get user from API Key...

            if (TryGetValidAPIKey(Request.API_Key, out APIKey apiKey))
            {
                User = apiKey.User;
                return true;
            }

            #endregion

            User = null;
            return false;

        }

        #endregion

        #region (protected) TryGetAstronaut(Request, out User)

        protected Boolean TryGetAstronaut(HTTPRequest Request, out User User)
        {

            // Get user from cookie...
            if (Request.Cookies != null                                                                             &&
                Request.Cookies. TryGet     (SessionCookieName,           out HTTPCookie       Cookie)              &&
                SecurityToken_Id.TryParse   (Cookie.FirstOrDefault().Key, out SecurityToken_Id SecurityTokenId)     &&
                _HTTPCookies.     TryGetValue(SecurityTokenId,             out SecurityToken    SecurityInformation) &&
                Timestamp.Now < SecurityInformation.Expires                                                       &&
                TryGetUser(SecurityInformation.Astronaut ?? SecurityInformation.UserId, out User))
            {
                return true;
            }

            User = null;
            return false;

        }

        #endregion

        #region (protected) TryGetHTTPUser (Request, User, Organizations, Response, AccessLevel = ReadOnly, Recursive = false)

        protected Boolean TryGetHTTPUser(HTTPRequest                Request,
                                         out User                   User,
                                         out HashSet<Organization>  Organizations,
                                         out HTTPResponse.Builder   Response,
                                         Access_Levels              AccessLevel  = Access_Levels.ReadOnly,
                                         Boolean                    Recursive    = false)
        {

            //if (Request.RemoteSocket.IPAddress.IsIPv4 &&
            //    Request.RemoteSocket.IPAddress.IsLocalhost)
            //{
            //    User           = Admins.User2GroupInEdges(edgelabel => edgelabel == User2GroupEdges.IsAdmin).FirstOrDefault()?.Source;
            //    Organizations  = User.Organizations(RequireReadWriteAccess, Recursive);
            //    Response       = null;
            //    return true;
            //}

            Organizations  = TryGetHTTPUser(Request, out User)
                                 ? new HashSet<Organization>(User.Organizations(AccessLevel, Recursive))
                                 : new HashSet<Organization>();

            Response       = Organizations.SafeAny()
                                 ? null
                                 : new HTTPResponse.Builder(Request) {
                                       HTTPStatusCode      = HTTPStatusCode.Unauthorized,
                                       Location            = URLPathPrefix + "login?redirect=" + Request.Path.ToString(),
                                       Date                = Timestamp.Now,
                                       Server              = HTTPServer.DefaultServerName,
                                       CacheControl        = "private, max-age=0, no-cache",
                                       XLocationAfterAuth  = Request.Path,
                                       Connection          = "close"
                                   };

            return Organizations.SafeAny();

        }

        #endregion

        #region (protected) TryGetAstronaut(Request, User, Organizations, Response, AccessLevel = ReadOnly, Recursive = false)

        protected Boolean TryGetAstronaut(HTTPRequest                    Request,
                                          out User                       User,
                                          out IEnumerable<Organization>  Organizations,
                                          out HTTPResponse.Builder       Response,
                                          Access_Levels                  AccessLevel  = Access_Levels.ReadOnly,
                                          Boolean                        Recursive    = false)
        {

            if (!TryGetAstronaut(Request, out User))
            {

                //if (Request.RemoteSocket.IPAddress.IsIPv4 &&
                //    Request.RemoteSocket.IPAddress.IsLocalhost)
                //{
                //    User           = Admins.User2GroupInEdges(edgelabel => edgelabel == User2GroupEdges.IsAdmin).FirstOrDefault()?.Source;
                //    Organizations  = User.Organizations(RequireReadWriteAccess, Recursive);
                //    Response       = null;
                //    return true;
                //}

                Organizations  = new Organization[0];
                Response       = new HTTPResponse.Builder(Request) {
                                     HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                     Location        = URLPathPrefix + "login",
                                     Date            = Timestamp.Now,
                                     Server          = HTTPServer.DefaultServerName,
                                     CacheControl    = "private, max-age=0, no-cache",
                                     Connection      = "close"
                                 };

                return false;

            }

            Organizations = User?.Organizations(AccessLevel, Recursive) ?? new Organization[0];
            Response      = null;
            return true;

        }

        #endregion

        #region (protected) TryGetHTTPUser (Request, User, Organizations,           AccessLevel = ReadOnly, Recursive = false)

        //protected void TryGetHTTPUser(HTTPRequest                Request,
        //                              out User                   User,
        //                              out HashSet<Organization>  Organizations,
        //                              Access_Levels              AccessLevel  = Access_Levels.ReadOnly,
        //                              Boolean                    Recursive    = false)
        //{

        //    if (!TryGetHTTPUser(Request, out User))
        //    {

        //        //if (Request.HTTPSource.IPAddress.IsIPv4 &&
        //        //    Request.HTTPSource.IPAddress.IsLocalhost)
        //        //{
        //        //    User           = AdminOrganization.User2OrganizationInEdges(edge => edge label == User2OrganizationEdgeTypes.IsAdmin).FirstOrDefault()?.Source;
        //        //    Organizations  = new HashSet<Organization>(User.Organizations(AccessLevel, Recursive));
        //        //    return;
        //        //}

        //        Organizations  = null;
        //        return;

        //    }

        //    Organizations  = User != null
        //                         ? new HashSet<Organization>(User.Organizations(AccessLevel, Recursive))
        //                         : new HashSet<Organization>();

        //}

        #endregion

        #region AddEventSource(HTTPEventSourceId, URLTemplate, IncludeFilterAtRuntime, CreateState, ...)

        public void AddEventSource<TData, TState>(HTTPEventSource_Id                             HTTPEventSourceId,
                                                  HTTPPath                                       URLTemplate,

                                                  Func<TState, User, HTTPEvent<TData>, Boolean>  IncludeFilterAtRuntime,
                                                  Func<TState>                                   CreatePerRequestState,

                                                  HTTPHostname?                                  Hostname                   = null,
                                                  HTTPMethod?                                    HttpMethod                 = null,
                                                  HTTPContentType                                HTTPContentType            = null,

                                                  HTTPAuthentication                             URLAuthentication          = null,
                                                  HTTPAuthentication                             HTTPMethodAuthentication   = null,

                                                  HTTPDelegate                                   DefaultErrorHandler        = null)
        {

            if (IncludeFilterAtRuntime == null)
                IncludeFilterAtRuntime = (s, u, e) => true;

            if (TryGet(HTTPEventSourceId, out IHTTPEventSource<TData> _EventSource))
            {

                HTTPServer.AddMethodCallback(Hostname        ?? HTTPHostname.Any,
                                             HttpMethod      ?? HTTPMethod.GET,
                                             URLTemplate,
                                             HTTPContentType ?? HTTPContentType.EVENTSTREAM,
                                             URLAuthentication:         URLAuthentication,
                                             HTTPMethodAuthentication:  HTTPMethodAuthentication,
                                             DefaultErrorHandler:       DefaultErrorHandler,
                                             HTTPDelegate:              Request => {

                                                 #region Get HTTP user and its organizations

                                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                                 if (!TryGetHTTPUser(Request,
                                                                     out User                   HTTPUser,
                                                                     out HashSet<Organization>  HTTPOrganizations,
                                                                     out HTTPResponse.Builder   Response,
                                                                     AccessLevel:               Access_Levels.ReadWrite,
                                                                     Recursive:                 true))
                                                 {
                                                     return Task.FromResult(Response.AsImmutable);
                                                 }

                                                 #endregion

                                                 var State        = CreatePerRequestState != null ? CreatePerRequestState() : default(TState);
                                                 var _HTTPEvents  = _EventSource.GetAllEventsGreater(Request.GetHeaderField_UInt64("Last-Event-ID")).
                                                                                 Where  (_event => IncludeFilterAtRuntime(State,
                                                                                                                          HTTPUser,
                                                                                                                          _event)).
                                                                                 Reverse().
                                                                                 Skip   (Request.QueryString.GetUInt64("skip")).
                                                                                 Take   (Request.QueryString.GetUInt64("take")).
                                                                                 Reverse().
                                                                                 Aggregate(new StringBuilder(),
                                                                                           (stringBuilder, httpEvent) => stringBuilder.Append(httpEvent.SerializedHeader).
                                                                                                                                       AppendLine(httpEvent.SerializedData).
                                                                                                                                       AppendLine()).
                                                                                 Append(Environment.NewLine).
                                                                                 Append("retry: ").Append((UInt32) _EventSource.RetryIntervall.TotalMilliseconds).
                                                                                 Append(Environment.NewLine).
                                                                                 Append(Environment.NewLine).
                                                                                 ToString();

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.OK,
                                                         Server          = HTTPServer.DefaultHTTPServerName,
                                                         ContentType     = HTTPContentType.EVENTSTREAM,
                                                         CacheControl    = "no-cache",
                                                         Connection      = "keep-alive",
                                                         KeepAlive       = new KeepAliveType(TimeSpan.FromSeconds(2 * _EventSource.RetryIntervall.TotalSeconds)),
                                                         Content         = _HTTPEvents.ToUTF8Bytes()
                                                     }.AsImmutable);

                                             });


                HTTPServer.AddMethodCallback(Hostname        ?? HTTPHostname.Any,
                                             HttpMethod      ?? HTTPMethod.GET,
                                             URLTemplate,
                                             HTTPContentType ?? HTTPContentType.JSON_UTF8,
                                             URLAuthentication:         URLAuthentication,
                                             HTTPMethodAuthentication:  HTTPMethodAuthentication,
                                             DefaultErrorHandler:       DefaultErrorHandler,
                                             HTTPDelegate:              Request => {

                                                 #region Get HTTP user and its organizations

                                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                                 if (!TryGetHTTPUser(Request,
                                                                     out User                   HTTPUser,
                                                                     out HashSet<Organization>  HTTPOrganizations,
                                                                     out HTTPResponse.Builder   Response,
                                                                     AccessLevel:               Access_Levels.ReadWrite,
                                                                     Recursive:                 true))
                                                 {
                                                     return Task.FromResult(Response.AsImmutable);
                                                 }

                                                 #endregion

                                                 var State        = CreatePerRequestState != null ? CreatePerRequestState() : default(TState);
                                                 var _HTTPEvents  = _EventSource.Where(httpEvent => IncludeFilterAtRuntime(State,
                                                                                                                           HTTPUser,
                                                                                                                           httpEvent)).
                                                                                 Skip (Request.QueryString.GetUInt64("skip")).
                                                                                 Take (Request.QueryString.GetUInt64("take")).
                                                                                 Aggregate(new StringBuilder().AppendLine("["),
                                                                                           (stringBuilder, httpEvent) => stringBuilder.Append    (@"[""").
                                                                                                                                       Append    (httpEvent.Subevent ?? "").
                                                                                                                                       Append    (@""",").
                                                                                                                                       Append    (httpEvent.SerializedData).
                                                                                                                                       AppendLine("],")).
                                                                                 ToString().
                                                                                 TrimEnd();


                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.OK,
                                                         Server          = HTTPServer.DefaultHTTPServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         CacheControl    = "no-cache",
                                                         Connection      = "keep-alive",
                                                         KeepAlive       = new KeepAliveType(TimeSpan.FromSeconds(2 * _EventSource.RetryIntervall.TotalSeconds)),
                                                         Content         = (_HTTPEvents.Length > 1
                                                                                ? _HTTPEvents.Remove(_HTTPEvents.Length - 1, 1) + Environment.NewLine + "]"
                                                                                : "]").ToUTF8Bytes()
                                                     }.AsImmutable);

                                             });

            }

            else
                throw new ArgumentException("Event source '" + HTTPEventSourceId + "' could not be found!", nameof(HTTPEventSourceId));

        }

        #endregion

        #region AddEventSource(HTTPEventSourceId, URLTemplate, IncludeFilterAtRuntime, CreateState, ...)

        public void AddEventSource<TData, TState>(HTTPEventSource_Id                                                        HTTPEventSourceId,
                                                  HTTPPath                                                                  URLTemplate,

                                                  Func<TState, User, IEnumerable<Organization>, HTTPEvent<TData>, Boolean>  IncludeFilterAtRuntime,
                                                  Func<TState>                                                              CreatePerRequestState,

                                                  HTTPHostname?                                                             Hostname                   = null,
                                                  HTTPMethod?                                                               HttpMethod                 = null,
                                                  HTTPContentType                                                           HTTPContentType            = null,

                                                  HTTPAuthentication                                                        URLAuthentication          = null,
                                                  HTTPAuthentication                                                        HTTPMethodAuthentication   = null,

                                                  HTTPDelegate                                                              DefaultErrorHandler        = null)
        {

            if (IncludeFilterAtRuntime == null)
                IncludeFilterAtRuntime = (s, u, o, e) => true;

            if (TryGet<TData>(HTTPEventSourceId, out IHTTPEventSource<TData> _EventSource))
            {

                HTTPServer.AddMethodCallback(Hostname        ?? HTTPHostname.Any,
                                             HttpMethod      ?? HTTPMethod.GET,
                                             URLTemplate,
                                             HTTPContentType ?? HTTPContentType.EVENTSTREAM,
                                             URLAuthentication:         URLAuthentication,
                                             HTTPMethodAuthentication:  HTTPMethodAuthentication,
                                             DefaultErrorHandler:       DefaultErrorHandler,
                                             HTTPDelegate:              Request => {

                                                 #region Get HTTP user and its organizations

                                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                                 if (!TryGetHTTPUser(Request,
                                                                     out User                   HTTPUser,
                                                                     out HashSet<Organization>  HTTPOrganizations,
                                                                     out HTTPResponse.Builder   Response,
                                                                     AccessLevel:               Access_Levels.ReadWrite,
                                                                     Recursive:                 true))
                                                 {
                                                     return Task.FromResult(Response.AsImmutable);
                                                 }

                                                 #endregion

                                                 var State        = CreatePerRequestState != null ? CreatePerRequestState() : default;
                                                 var _HTTPEvents  = _EventSource.GetAllEventsGreater(Request.GetHeaderField_UInt64("Last-Event-ID")).
                                                                                 Where  (httpEvent => IncludeFilterAtRuntime(State,
                                                                                                                             HTTPUser,
                                                                                                                             HTTPOrganizations,
                                                                                                                             httpEvent)).
                                                                                 Reverse().
                                                                                 Skip   (Request.QueryString.GetUInt64("skip")).
                                                                                 Take   (Request.QueryString.GetUInt64("take")).
                                                                                 Reverse().
                                                                                 Aggregate(new StringBuilder(),
                                                                                           (stringBuilder, httpEvent) => stringBuilder.Append(httpEvent.SerializedHeader).
                                                                                                                                       AppendLine(httpEvent.SerializedData).
                                                                                                                                       AppendLine()).
                                                                                 Append(Environment.NewLine).
                                                                                 Append("retry: ").Append((UInt32) _EventSource.RetryIntervall.TotalMilliseconds).
                                                                                 Append(Environment.NewLine).
                                                                                 Append(Environment.NewLine).
                                                                                 ToString();

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.OK,
                                                         Server          = HTTPServer.DefaultHTTPServerName,
                                                         ContentType     = HTTPContentType.EVENTSTREAM,
                                                         CacheControl    = "no-cache",
                                                         Connection      = "keep-alive",
                                                         KeepAlive       = new KeepAliveType(TimeSpan.FromSeconds(2 * _EventSource.RetryIntervall.TotalSeconds)),
                                                         Content         = _HTTPEvents.ToUTF8Bytes()
                                                     }.AsImmutable);

                                             });



                HTTPServer.AddMethodCallback(Hostname        ?? HTTPHostname.Any,
                                             HttpMethod      ?? HTTPMethod.GET,
                                             URLTemplate,
                                             HTTPContentType ?? HTTPContentType.JSON_UTF8,
                                             URLAuthentication:         URLAuthentication,
                                             HTTPMethodAuthentication:  HTTPMethodAuthentication,
                                             DefaultErrorHandler:       DefaultErrorHandler,
                                             HTTPDelegate:              Request => {

                                                 #region Get HTTP user and its organizations

                                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                                 if (!TryGetHTTPUser(Request,
                                                                     out User                   HTTPUser,
                                                                     out HashSet<Organization>  HTTPOrganizations,
                                                                     out HTTPResponse.Builder   Response,
                                                                     AccessLevel:               Access_Levels.ReadWrite,
                                                                     Recursive:                 true))
                                                 {
                                                     return Task.FromResult(Response.AsImmutable);
                                                 }

                                                 #endregion

                                                 var State        = CreatePerRequestState != null ? CreatePerRequestState() : default(TState);
                                                 var _HTTPEvents  = _EventSource.Where(httpEvent => IncludeFilterAtRuntime(State,
                                                                                                                           HTTPUser,
                                                                                                                           HTTPOrganizations,
                                                                                                                           httpEvent)).
                                                                                 Skip (Request.QueryString.GetUInt64("skip")).
                                                                                 Take (Request.QueryString.GetUInt64("take")).
                                                                                 Aggregate(new StringBuilder().AppendLine("["),
                                                                                           (stringBuilder, httpEvent) => stringBuilder.Append(@"[""").
                                                                                                                                       Append(httpEvent.Subevent ?? "").
                                                                                                                                       Append(@""",").
                                                                                                                                       Append(httpEvent.SerializedData).
                                                                                                                                       AppendLine("],")).
                                                                                 ToString().
                                                                                 TrimEnd();


                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.OK,
                                                         Server          = HTTPServer.DefaultHTTPServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         CacheControl    = "no-cache",
                                                         Connection      = "keep-alive",
                                                         KeepAlive       = new KeepAliveType(TimeSpan.FromSeconds(2 * _EventSource.RetryIntervall.TotalSeconds)),
                                                         Content         = (_HTTPEvents.Length > 1
                                                                                ? _HTTPEvents.Remove(_HTTPEvents.Length - 1, 1) + Environment.NewLine + "]"
                                                                                : "]").ToUTF8Bytes()
                                                     }.AsImmutable);

                                             });

            }

            else
                throw new ArgumentException("Event source '" + HTTPEventSourceId + "' could not be found!", nameof(HTTPEventSourceId));

        }

        #endregion


        #region Manage HTTP Resources

        #region (protected override) GetResourceStream      (ResourceName)

        protected override Stream GetResourceStream(String ResourceName)

            => GetResourceStream(ResourceName,
                                 new Tuple<String, System.Reflection.Assembly>(UsersAPI.HTTPRoot, typeof(UsersAPI).Assembly),
                                 new Tuple<String, System.Reflection.Assembly>(HTTPAPI. HTTPRoot, typeof(HTTPAPI). Assembly));

        #endregion

        #region (protected override) GetResourceMemoryStream(ResourceName)

        protected override MemoryStream GetResourceMemoryStream(String ResourceName)

            => GetResourceMemoryStream(ResourceName,
                                       new Tuple<String, System.Reflection.Assembly>(UsersAPI.HTTPRoot, typeof(UsersAPI).Assembly),
                                       new Tuple<String, System.Reflection.Assembly>(HTTPAPI. HTTPRoot, typeof(HTTPAPI). Assembly));

        #endregion

        #region (protected override) GetResourceString      (ResourceName)

        protected override String GetResourceString(String ResourceName)

            => GetResourceString(ResourceName,
                                 new Tuple<String, System.Reflection.Assembly>(UsersAPI.HTTPRoot, typeof(UsersAPI).Assembly),
                                 new Tuple<String, System.Reflection.Assembly>(HTTPAPI. HTTPRoot, typeof(HTTPAPI). Assembly));

        #endregion

        #region (protected override) GetResourceBytes       (ResourceName)

        protected override Byte[] GetResourceBytes(String ResourceName)

            => GetResourceBytes(ResourceName,
                                new Tuple<String, System.Reflection.Assembly>(UsersAPI.HTTPRoot, typeof(UsersAPI).Assembly),
                                new Tuple<String, System.Reflection.Assembly>(HTTPAPI. HTTPRoot, typeof(HTTPAPI). Assembly));

        #endregion

        #region (protected override) MixWithHTMLTemplate    (ResourceName)

        protected override String MixWithHTMLTemplate(String ResourceName)

            => MixWithHTMLTemplate(ResourceName,
                                   new Tuple<String, System.Reflection.Assembly>(UsersAPI.HTTPRoot, typeof(UsersAPI).Assembly),
                                   new Tuple<String, System.Reflection.Assembly>(HTTPAPI. HTTPRoot, typeof(HTTPAPI). Assembly));

        #endregion

        #endregion

        private void RegisterURLTemplates()
        {

            #region /shared/UsersAPI

            HTTPServer.RegisterResourcesFolder(HTTPHostname.Any,
                                               URLPathPrefix + "shared/UsersAPI",
                                               HTTPRoot.Substring(0, HTTPRoot.Length - 1),
                                               typeof(UsersAPI).Assembly);

            #endregion


            #region GET         ~/signup

            #region HTML_UTF8

            // -------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/signup
            // -------------------------------------------------------------
            //HTTPServer.AddMethodCallback(HTTPHostname.Any,
            //                             HTTPMethod.GET,
            //                             URLPathPrefix + "signup",
            //                             HTTPContentType.HTML_UTF8,
            //                             HTTPDelegate: async Request => {

            //                                 var _MemoryStream1 = new MemoryStream();
            //                                 GetUsersAPIRessource("template.html").SeekAndCopyTo(_MemoryStream1, 0);
            //                                 var Template = _MemoryStream1.ToArray().ToUTF8String();

            //                                 var _MemoryStream2 = new MemoryStream();
            //                                 typeof(UsersAPI).Assembly.GetManifestResourceStream(HTTPRoot + "SignUp.SignUp-" + DefaultLanguage.ToString() + ".html").SeekAndCopyTo(_MemoryStream2, 0);
            //                                 var HTML     = Template.Replace("<%= content %>",   _MemoryStream2.ToArray().ToUTF8String());

            //                                 //if (LogoImage != null)
            //                                 //    HTML = HTML.Replace("<%= logoimage %>", String.Concat(@"<img src=""", LogoImage, @""" /> "));

            //                                 return new HTTPResponse.Builder(Request) {
            //                                     HTTPStatusCode  = HTTPStatusCode.OK,
            //                                     ContentType     = HTTPContentType.HTML_UTF8,
            //                                     Content         = HTML.ToUTF8Bytes(),
            //                                     Connection      = "close"
            //                                 };

            //                             }, AllowReplacement: URLReplacement.Allow);

            #endregion

            #endregion

            #region GET         ~/verificationtokens/{VerificationToken}

            #region HTML_UTF8

            //// ----------------------------------------------------------------------------------------------
            //// curl -v -H "Accept: text/html" http://127.0.0.1:2100/verificationtokens/0vu04w2hgf0w2h4bv08w
            //// ----------------------------------------------------------------------------------------------
            //HTTPServer.AddMethodCallback(HTTPHostname.Any,
            //                             HTTPMethod.GET,
            //                             HTTPPath.Parse("/verificationtokens/{VerificationToken}"),
            //                             HTTPContentType.HTML_UTF8,
            //                             HTTPDelegate: async Request => {

            //                                 if (VerificationToken. TryParse   (Request.ParsedURLParameters[0], out VerificationToken verificationToken) &&
            //                                    _VerificationTokens.TryGetValue(verificationToken,              out User user))
            //                                 {

            //                                     _VerificationTokens.Remove(verificationToken);

            //                                     await UpdateUser(user.Id,
            //                                                      _user => {
            //                                                          _user.IsAuthenticated = true;
            //                                                      },
            //                                                      null,
            //                                                      Request.EventTrackingId,
            //                                                      Robot.Id);

            //                                     #region Send New-User-Welcome-E-Mail

            //                                     var MailSentResult = MailSentStatus.failed;

            //                                     var NewUserMail = NewUserWelcomeEMailCreator(User:             user,// VerificationToken.Login.ToString(),
            //                                                                                  EMailRecipients:  user.EMail,
            //                                                                                  //DNSHostname:       "https://" + Request.Host.SimpleString,
            //                                                                                  Language:          DefaultLanguage);

            //                                     if (NewUserMail != null)
            //                                     {

            //                                         var MailResultTask = APISMTPClient.Send(NewUserMail);

            //                                         if (MailResultTask.Wait(60000))
            //                                             MailSentResult = MailResultTask.Result;

            //                                         if (MailSentResult == MailSentStatus.ok)
            //                                         {

            //                                             #region Send Admin-Mail...

            //                                             var AdminMail = new TextEMailBuilder() {
            //                                                 From        = Robot.EMail,
            //                                                 To          = APIAdminEMails,
            //                                                 Subject     = "New user activated: " + user.Id.ToString() + " at " + Timestamp.Now.ToString(),
            //                                                 Text        = "New user activated: " + user.Id.ToString() + " at " + Timestamp.Now.ToString(),
            //                                                 Passphrase  = APIPassphrase
            //                                             };

            //                                             var AdminMailResultTask = APISMTPClient.Send(AdminMail).Wait(30000);

            //                                             #endregion

            //                                             return new HTTPResponse.Builder(Request) {
            //                                                        HTTPStatusCode  = HTTPStatusCode.Created,
            //                                                        Server          = HTTPServer.DefaultServerName,
            //                                                        ContentType     = HTTPContentType.JSON_UTF8,
            //                                                        Content         = new JObject(
            //                                                                              new JProperty("@context", ""),
            //                                                                              new JProperty("@id",   user.Id.   ToString()),
            //                                                                              new JProperty("email", user.EMail.ToString())
            //                                                                          ).ToString().ToUTF8Bytes(),
            //                                                        CacheControl    = "public",
            //                                                        //Expires         = "Mon, 25 Jun 2015 21:31:12 GMT",
            //                                                        Connection      = "close"
            //                                                    }.AsImmutable;

            //                                         }

            //                                     }

            //                                     #endregion

            //                                     return new HTTPResponse.Builder(Request) {
            //                                                HTTPStatusCode  = HTTPStatusCode.OK,
            //                                                Server          = HTTPServer.DefaultServerName,
            //                                                ContentType     = HTTPContentType.HTML_UTF8,
            //                                                Content         = ("Account '" + user.Id + "' activated!").ToUTF8Bytes(),
            //                                                CacheControl    = "public",
            //                                                ETag            = "1",
            //                                                //Expires         = "Mon, 25 Jun 2015 21:31:12 GMT",
            //                                                Connection      = "close"
            //                                            }.AsImmutable;

            //                                 }

            //                                 return new HTTPResponse.Builder(Request) {
            //                                            HTTPStatusCode  = HTTPStatusCode.NotFound,
            //                                            Server          = HTTPServer.DefaultServerName,
            //                                            ContentType     = HTTPContentType.HTML_UTF8,
            //                                            Content         = "VerificationToken not found!".ToUTF8Bytes(),
            //                                            CacheControl    = "public",
            //                                            Connection      = "close"
            //                                        }.AsImmutable;

            //                              }, AllowReplacement: URLReplacement.Allow);

            #endregion

            #endregion


            #region GET         ~/login

            // ------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/login
            // ------------------------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "login",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request =>

                                            Task.FromResult(
                                                new HTTPResponse.Builder(Request) {
                                                    HTTPStatusCode             = HTTPStatusCode.OK,
                                                    Server                     = HTTPServer.DefaultServerName,
                                                    Date                       = Timestamp.Now,
                                                    AccessControlAllowOrigin   = "*",
                                                    AccessControlAllowMethods  = "GET",
                                                    AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                    ContentType                = HTTPContentType.HTML_UTF8,
                                                    ContentStream              = GetResourceStream("login.login-" + DefaultLanguage.ToString() + ".html"),
                                                    Connection                 = "close"
                                                }.AsImmutable),

                                         AllowReplacement: URLReplacement.Allow);

            #endregion

            #region POST        ~/login

            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.POST,
                                         URLPathPrefix + "/login",
                                         HTTPContentType.XWWWFormUrlEncoded,
                                         HTTPDelegate: Request => {

                                             //Note: Add LoginRequest event!

                                             #region Check UTF8 text body...

                                             if (!Request.TryParseUTF8StringRequestBody(HTTPContentType.XWWWFormUrlEncoded,
                                                                                        out String       LoginText,
                                                                                        out HTTPResponse _HTTPResponse,
                                                                                        AllowEmptyHTTPBody: false))
                                             {
                                                 return Task.FromResult(_HTTPResponse);
                                             }

                                             #endregion

                                             var loginData = LoginText.DoubleSplit('&', '=');

                                             #region Verify the login

                                             if (!loginData.TryGetValue("login", out String login) ||
                                                  login.    IsNullOrEmpty())
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("statuscode",   400),
                                                                               new JProperty("property",     "login"),
                                                                               new JProperty("description",  "The login must not be empty!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl     = "private",
                                                         Connection       = "close"
                                                     }.AsImmutable);

                                             }

                                             login = HTTPTools.URLDecode(login);

                                             if (login.Length < MinUserIdLength)
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("statuscode",   400),
                                                                               new JProperty("property",     "login"),
                                                                               new JProperty("description",  "The login is too short!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable);

                                             }

                                             #endregion

                                             #region Verify the password

                                             if (!loginData.TryGetValue("password", out String password) ||
                                                 password.  IsNullOrEmpty())
                                             {

                                                return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("statuscode",   400),
                                                                               new JProperty("property",     "password"),
                                                                               new JProperty("description",  "The password must not be empty!")
                                                                          ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable);

                                             }

                                             password = HTTPTools.URLDecode(password);

                                             if (PasswordQualityCheck(password) < 1.0)
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("statuscode",   400),
                                                                               new JProperty("property",     "password"),
                                                                               new JProperty("description",  "The password does not match the password quality criteria!")
                                                                          ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable);

                                             }

                                             #endregion

                                             #region Get RedirectURL

                                             loginData.TryGetValue("redirect", out String redirectURL);

                                             if (redirectURL.IsNotNullOrEmpty())
                                                redirectURL = HTTPTools.URLDecode(redirectURL);

                                             else
                                                redirectURL = "/";

                                             #endregion

                                             #region Check login or e-mail address and password(s)

                                             var possibleUsers = new HashSet<User>();

                                             if (User_Id.       TryParse   (login,    out User_Id       _UserId) &&
                                                _Users.         TryGetValue(_UserId,  out User          _User)   &&
                                                _LoginPasswords.TryGetValue(_UserId,  out LoginPassword _LoginPassword))
                                             {
                                                 possibleUsers.Add(_User);
                                             }

                                             if (possibleUsers.Count == 0)
                                             {
                                                 foreach (var user in _Users.Values)
                                                 {
                                                     if (String.Equals(login,
                                                                       user.EMail.Address.ToString(),
                                                                       StringComparison.OrdinalIgnoreCase))
                                                     {
                                                         possibleUsers.Add(user);
                                                     }
                                                 }
                                             }

                                             if (possibleUsers.Count == 0)
                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("property",     "login"),
                                                                               new JProperty("description",  "Unknown login!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable);


                                             var validUsers = new HashSet<User>();

                                             foreach (var possibleUser in possibleUsers)
                                             {
                                                 if (_LoginPasswords.TryGetValue(possibleUser.Id, out LoginPassword loginPassword) &&
                                                     loginPassword.VerifyPassword(password))
                                                 {
                                                     validUsers.Add(possibleUser);
                                                 }
                                             }

                                             if (validUsers.Count == 0)
                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("property",     "login"),
                                                                               new JProperty("description",  "Invalid password!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable);


                                             if (validUsers.Count > 1)
                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.MultipleChoices,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("property",     "login"),
                                                                               new JProperty("description",  "Multiple matching user accounts found: Please use your login name!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable);

                                             #endregion

                                             #region Check whether the user has access to at least one organization

                                             if (!possibleUsers.First().Organizations(Access_Levels.ReadOnly).Any())
                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",    SignInOutContext),
                                                                               new JProperty("description", "You do not have access to any organization!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable);

                                             #endregion


                                             #region Register security token

                                             var validUser        = possibleUsers.First();
                                             var SHA256Hash       = new SHA256Managed();
                                             var securityTokenId  = SecurityToken_Id.Parse(SHA256Hash.ComputeHash(
                                                                                               String.Concat(Guid.NewGuid().ToString(),
                                                                                                             validUser.Id).
                                                                                               ToUTF8Bytes()
                                                                                           ).ToHexString());

                                             var expires          = Timestamp.Now.Add(MaxSignInSessionLifetime);

                                             lock (_HTTPCookies)
                                             {

                                                 _HTTPCookies.Add(securityTokenId,
                                                                  new SecurityToken(validUser.Id,
                                                                                    expires));

                                                 File.AppendAllText(UsersAPIPath + DefaultHTTPCookiesFile,
                                                                    securityTokenId + ";" + validUser.Id + ";" + expires.ToIso8601() + Environment.NewLine);

                                             }

                                             #endregion


                                             //Note: Add LoginResponse event!

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode  = HTTPStatusCode.Created,
                                                     ContentType     = HTTPContentType.HTML_UTF8,
                                                     Content         = String.Concat(
                                                                           "<!DOCTYPE html>", Environment.NewLine,
                                                                           @"<html><head><meta http-equiv=""refresh"" content=""0; url=" + redirectURL + @""" /></head></html>",
                                                                           Environment.NewLine
                                                                       ).ToUTF8Bytes(),
                                                     CacheControl    = "private",
                                                     SetCookies      = new String[] {
                                                                           String.Concat(CookieName,
                                                                                         GenerateCookieUserData(validUser),
                                                                                         GenerateCookieSettings(expires)),
                                                                           String.Concat(SessionCookieName, "=", securityTokenId.ToString(),
                                                                                         GenerateCookieSettings(expires),
                                                                                         "; HttpOnly")
                                                                       },
                                                     Connection      = "close",
                                                     X_FrameOptions  = "DENY"
                                                 }.AsImmutable);

                                          });

            #endregion

            #region GET         ~/lostPassword

            // -------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/lostPassword
            // -------------------------------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "lostpassword",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request =>

                                            Task.FromResult(
                                                new HTTPResponse.Builder(Request) {
                                                    HTTPStatusCode             = HTTPStatusCode.OK,
                                                    Server                     = HTTPServer.DefaultServerName,
                                                    Date                       = Timestamp.Now,
                                                    AccessControlAllowOrigin   = "*",
                                                    AccessControlAllowMethods  = "GET",
                                                    AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                    ContentType                = HTTPContentType.HTML_UTF8,
                                                    ContentStream              = GetResourceStream("login.lostPassword-" + DefaultLanguage.ToString() + ".html"),
                                                    Connection                 = "close"
                                                }.AsImmutable),

                                         AllowReplacement: URLReplacement.Allow);

            #endregion

            #region SET         ~/resetPassword

            // --------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/resetPassword
            // --------------------------------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.SET,
                                         URLPathPrefix + "resetPassword",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Parse JSON

                                             if (!Request.TryParseJObjectRequestBody(out JObject JSONObj, out HTTPResponse.Builder HTTPResponse))
                                             {

                                                 // Slow down attackers!
                                                 Thread.Sleep(5000);

                                                 return HTTPResponse;

                                             }

                                             var UserIdOrEMailJSON = JSONObj["id"]?.Value<String>()?.Trim();
                                             if (UserIdOrEMailJSON.IsNullOrEmpty() || UserIdOrEMailJSON.Length < 4)
                                             {

                                                 // Slow down attackers!
                                                 Thread.Sleep(5000);

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            Connection                 = "close"
                                                        };

                                             }

                                             #endregion

                                             #region Find user(s)...

                                             var Users = new HashSet<User>();

                                             if (User_Id.TryParse(UserIdOrEMailJSON, out User_Id UserId) &&
                                                 TryGetUser(UserId, out User User))
                                             {
                                                 Users.Add(User);
                                             }

                                             if (SimpleEMailAddress.TryParse(UserIdOrEMailJSON, out SimpleEMailAddress EMailAddress))
                                             {
                                                 foreach (var user in _Users.Values)
                                                 {
                                                     if (user.EMail.Address == EMailAddress)
                                                         Users.Add(user);
                                                 }
                                             }

                                             #endregion

                                             #region No users found!

                                             if (Users.Count == 0)
                                             {

                                                 // Slow down attackers!
                                                 Thread.Sleep(5000);

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.NotFound,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            Connection                 = "close"
                                                        };

                                             }

                                             #endregion


                                             var result = await ResetPassword(Users,
                                                                              EventTrackingId: Request.EventTrackingId);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode             = HTTPStatusCode.OK,
                                                              Server                     = HTTPServer.DefaultServerName,
                                                              Date                       = Timestamp.Now,
                                                              AccessControlAllowOrigin   = "*",
                                                              AccessControlAllowMethods  = "SET",
                                                              AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                              ContentType                = HTTPContentType.JSON_UTF8,
                                                              Content                    = JSONObject.Create(
                                                                                               new JProperty("numberOfAccountsFound", Users.Count)
                                                                                           ).ToUTF8Bytes(),
                                                              Connection                 = "close"
                                                          }

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                              Server                     = HTTPServer.DefaultServerName,
                                                              Date                       = Timestamp.Now,
                                                              AccessControlAllowOrigin   = "*",
                                                              AccessControlAllowMethods  = "SET",
                                                              AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                              ContentType                = HTTPContentType.JSON_UTF8,
                                                              Content                    = JSONObject.Create(
                                                                                               new JProperty("numberOfAccountsFound", Users.Count)
                                                                                           ).ToUTF8Bytes(),
                                                              Connection                 = "close"
                                                          };

                                         },

                                         AllowReplacement: URLReplacement.Allow);

            #endregion

            #region GET         ~/setPassword

            // ------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/setPassword
            // ------------------------------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "setPassword",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request =>

                                            Task.FromResult(
                                                new HTTPResponse.Builder(Request) {
                                                    HTTPStatusCode             = HTTPStatusCode.OK,
                                                    Server                     = HTTPServer.DefaultServerName,
                                                    Date                       = Timestamp.Now,
                                                    AccessControlAllowOrigin   = "*",
                                                    AccessControlAllowMethods  = "GET",
                                                    AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                    ContentType                = HTTPContentType.HTML_UTF8,
                                                    ContentStream              = GetResourceStream("login.setPassword-" + DefaultLanguage.ToString() + ".html"),
                                                    Connection                 = "close"
                                                }.AsImmutable),

                                         AllowReplacement: URLReplacement.Allow);

            #endregion

            #region SET         ~/setPassword

            // ------------------------------------------------------------------
            // curl -v -X SET \
            //      -H 'Accept:       application/json; charset=UTF-8' \
            //      -H 'Content-Type: application/json; charset=UTF-8' \
            //      -d "{ \
            //            \"securityToken1\": \"4tf7M62p5C92tE2d5CY74UWfx2S4jxSp2z5S3jM3\", \
            //            \"newPassword\":    \"bguf7tf8g\" \
            //          }" \
            //      http://127.0.0.1:2001/setPassword
            // ------------------------------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.SET,
                                         URLPathPrefix + "setPassword",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Parse JSON

                                             if (!Request.TryParseJObjectRequestBody(out JObject JSONObj, out HTTPResponse.Builder HTTPResponse))
                                             {

                                                 // Slow down attackers!
                                                 Thread.Sleep(5000);

                                                 return HTTPResponse;

                                             }

                                             #endregion

                                             #region Parse SecurityTokenId1    [mandatory]

                                             if (!JSONObj.ParseMandatory("securityToken1",
                                                                         "security token #1",
                                                                         HTTPServer.DefaultServerName,
                                                                         SecurityToken_Id.TryParse,
                                                                         out SecurityToken_Id SecurityTokenId1,
                                                                         Request,
                                                                         out HTTPResponse.Builder ErrorResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Parse NewPassword         [mandatory]

                                             if (!JSONObj.ParseMandatory("newPassword",
                                                                         "new password",
                                                                         HTTPServer.DefaultServerName,
                                                                         Password.TryParse,
                                                                         out Password NewPassword,
                                                                         Request,
                                                                         out ErrorResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             if (PasswordQualityCheck(NewPassword.UnsecureString) < 1.0)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            ContentType     = HTTPContentType.JSON_UTF8,
                                                            Content         = JSONObject.Create(
                                                                                  new JProperty("@context",      SignInOutContext),
                                                                                  new JProperty("statuscode",    400),
                                                                                  new JProperty("property",     "password"),
                                                                                  new JProperty("description",  "The choosen password does not match the password quality criteria!")
                                                                              ).ToString().ToUTF8Bytes(),
                                                            CacheControl    = "private",
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion

                                             #region Parse SecurityTokenId2    [optional]

                                             if (JSONObj.ParseOptional("securityToken2",
                                                                       "security token #2",
                                                                       HTTPServer.DefaultServerName,
                                                                       SecurityToken_Id.TryParse,
                                                                       out SecurityToken_Id? SecurityTokenId2,
                                                                       Request,
                                                                       out ErrorResponse))
                                             {
                                                 if (ErrorResponse != null)
                                                    return HTTPResponse;
                                             }

                                             #endregion


                                             #region Verify token/password lengths...

                                             if (SecurityTokenId1.Length != 40)
                                             {

                                                 // Slow down attackers!
                                                 Thread.Sleep(5000);

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            Connection                 = "close"
                                                        }.AsImmutable;

                                             }

                                             #endregion


                                             var result = await ResetPassword(SecurityTokenId1,
                                                                              NewPassword,
                                                                              SecurityTokenId2,
                                                                              Request.EventTrackingId,
                                                                              Robot.Id);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode             = HTTPStatusCode.OK,
                                                              Server                     = HTTPServer.DefaultServerName,
                                                              Date                       = Timestamp.Now,
                                                              AccessControlAllowOrigin   = "*",
                                                              AccessControlAllowMethods  = "SET",
                                                              AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                              ContentType                = HTTPContentType.JSON_UTF8,
                                                              Content                    = JSONObject.Create(
                                                                                               new JProperty("numberOfAccountsFound", Users.Count())
                                                                                           ).ToUTF8Bytes(),
                                                              SetCookie                  = String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                                                         HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                                             ? "; Domain=" + HTTPCookieDomain
                                                                                                             : "",
                                                                                                         "; Path=", URLPathPrefix),
                                                              Connection                 = "close"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                              Server                     = HTTPServer.DefaultServerName,
                                                              Date                       = Timestamp.Now,
                                                              AccessControlAllowOrigin   = "*",
                                                              AccessControlAllowMethods  = "SET",
                                                              AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                              ContentType                = HTTPContentType.JSONLD_UTF8,
                                                              Content                    = JSONObject.Create(
                                                                                               new JProperty("description", result.ErrorDescription.ToJSON())
                                                                                           ).ToUTF8Bytes(),
                                                              SetCookie                  = String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                                                         HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                                             ? "; Domain=" + HTTPCookieDomain
                                                                                                             : "",
                                                                                                         "; Path=", URLPathPrefix),
                                                              Connection                 = "close"
                                                          }.AsImmutable;

                                         },

                                         AllowReplacement: URLReplacement.Allow);

            #endregion


            #region GET         ~/profile

            // --------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/profile
            // --------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "profile",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode              = HTTPStatusCode.OK,
                                                     Server                      = HTTPServer.DefaultServerName,
                                                     Date                        = Timestamp.Now,
                                                     AccessControlAllowOrigin    = "*",
                                                     AccessControlAllowMethods   = "GET",
                                                     AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                     ContentType                 = HTTPContentType.HTML_UTF8,
                                                     Content                     = MixWithHTMLTemplate("profile.profile.shtml").ToUTF8Bytes(),
                                                     Connection                  = "close",
                                                     Vary                        = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion


            #region ~/users

            #region GET         ~/users

            #region HTML

            // -------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/users
            // -------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its users

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.OK,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "GET",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.HTML_UTF8,
                                                         Content                    = MixWithHTMLTemplate("user.users.shtml").ToUTF8Bytes(),
                                                         Connection                 = "close",
                                                         Vary                       = "Accept"
                                                     }.AsImmutable);

                                         });

            #endregion

            #region JSON

            // -------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/users
            // -------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Try to get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive: true);

                                             #endregion


                                             var withMetadata           = Request.QueryString.GetBoolean("withMetadata", false);
                                             var includeFilter          = Request.QueryString.CreateStringFilter<User>("match",
                                                                                                                       (user, include) => user.Id.ToString().IndexOf(include)                                     >= 0 ||
                                                                                                                                          user.Name.         IndexOf(include, StringComparison.OrdinalIgnoreCase) >= 0 ||
                                                                                                                                          user.Description.  Matches(include, IgnoreCase: true));

                                             var skip                   = Request.QueryString.GetUInt64 ("skip");
                                             var take                   = Request.QueryString.GetUInt64 ("take");

                                             var includeCryptoHash      = Request.QueryString.GetBoolean("includeCryptoHash", true);

                                             var expand                 = Request.QueryString.GetStrings("expand");
                                             //var expandTags             = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             var filteredUsers          = HTTPOrganizations.
                                                                              SafeSelectMany(organization => organization.Users).
                                                                              Distinct      ().
                                                                              Where         (includeFilter).
                                                                              OrderBy       (user => user.Name).
                                                                              ToArray();

                                             var filteredCount          = filteredUsers.ULongCount();
                                             var totalCount             = HTTPOrganizations.ULongCount();

                                             var JSONResults            = filteredUsers.
                                                                              ToJSON(skip,
                                                                                     take,
                                                                                     false, //Embedded
                                                                                     GetUserSerializator(Request, HTTPUser),
                                                                                     includeCryptoHash);


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode                = HTTPStatusCode.OK,
                                                     Server                        = HTTPServer.DefaultServerName,
                                                     Date                          = Timestamp.Now,
                                                     AccessControlAllowOrigin      = "*",
                                                     AccessControlAllowMethods     = "GET, COUNT, OPTIONS",
                                                     AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                     ETag                          = "1",
                                                     ContentType                   = HTTPContentType.JSON_UTF8,
                                                     Content                       = withMetadata
                                                                                         ? JSONObject.Create(
                                                                                               new JProperty("totalCount",     totalCount),
                                                                                               new JProperty("filteredCount",  filteredCount),
                                                                                               new JProperty("users",          JSONResults)
                                                                                           ).ToUTF8Bytes()
                                                                                         : JSONResults.ToUTF8Bytes(),
                                                     X_ExpectedTotalNumberOfItems  = filteredCount,
                                                     Connection                    = "close",
                                                     Vary                          = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region ADD         ~/users

            // --------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:2100/users
            // --------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.ADD,
                                         HTTPPath.Parse("/users"),
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   AddUsersHTTPRequest,
                                         HTTPResponseLogger:  AddUsersHTTPResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   errorResponse,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return errorResponse;
                                             }

                                             #endregion


                                             #region Parse JSON HTTP body...

                                             if (!Request.TryParseJObjectRequestBody(out JObject JSONBody, out errorResponse))
                                                 return errorResponse;

                                             #endregion

                                             #region Parse UserId           [optional]

                                             if (JSONBody.ParseOptionalStruct2("@id",
                                                                               "user identification",
                                                                               HTTPServer.DefaultHTTPServerName,
                                                                               User_Id.TryParse,
                                                                               out User_Id?  userIdBody,
                                                                               Request,
                                                                               out errorResponse))
                                             {
                                                 if (errorResponse != null)
                                                     return errorResponse;
                                             }

                                             #endregion

                                             #region Parse NewUser          [mandatory]

                                             if (!User.TryParseJSON(JSONBody,
                                                                    out User    newUser,
                                                                    out String  errorString,
                                                                    userIdBody ?? User_Id.Random(),
                                                                    MinUserIdLength,
                                                                    MinUserNameLength))
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, ADD",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                                new JProperty("description", errorString)
                                                                                            ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             }

                                             #endregion

                                             #region Parse AccessRights     [optional]

                                             if (JSONBody.ParseOptional("accessRights",
                                                                        "access rights",
                                                                        HTTPServer.DefaultHTTPServerName,
                                                                        out JArray  accessRightsArray,
                                                                        Request,
                                                                        out errorResponse))
                                             {
                                                 if (errorResponse != null)
                                                     return errorResponse;
                                             }

                                             var accessRights = new List<Tuple<User2OrganizationEdgeLabel, Organization>>();

                                             if (accessRightsArray.SafeAny())
                                             {
                                                 foreach (var accessRightJSON in accessRightsArray)
                                                 {

                                                     #region Validate accessRight JSON object.

                                                     if (!(accessRightJSON is JObject accessRightObject))
                                                         return new HTTPResponse.Builder(Request) {
                                                                    HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                                    Server                     = HTTPServer.DefaultServerName,
                                                                    Date                       = Timestamp.Now,
                                                                    AccessControlAllowOrigin   = "*",
                                                                    AccessControlAllowMethods  = "GET, SET",
                                                                    AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                    ContentType                = HTTPContentType.JSON_UTF8,
                                                                    Content                    = JSONObject.Create(
                                                                                                    new JProperty("description", "Invalid 'accessRight' JSON object!")
                                                                                                ).ToUTF8Bytes()
                                                                }.AsImmutable;

                                                     #endregion

                                                     #region Parse AccessRight     [mandatory]

                                                     if (!accessRightObject.ParseMandatoryEnum("accessRight",
                                                                                               "access right",
                                                                                               HTTPServer.DefaultHTTPServerName,
                                                                                               out User2OrganizationEdgeLabel accessRight,
                                                                                               Request,
                                                                                               out errorResponse))
                                                     {
                                                         return errorResponse;
                                                     }

                                                     #endregion

                                                     #region Parse Organization    [mandatory]

                                                     if (!accessRightObject.ParseMandatory("organizationId",
                                                                                           "organization identification",
                                                                                           HTTPServer.DefaultHTTPServerName,
                                                                                           Organization_Id.TryParse,
                                                                                           out Organization_Id organizationId,
                                                                                           Request,
                                                                                           out errorResponse))
                                                     {
                                                         return errorResponse;
                                                     }

                                                     if (!_Organizations.TryGetValue(organizationId, out Organization organization))
                                                     {

                                                         return new HTTPResponse.Builder(Request) {
                                                                    HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                                    Server                     = HTTPServer.DefaultServerName,
                                                                    Date                       = Timestamp.Now,
                                                                    AccessControlAllowOrigin   = "*",
                                                                    AccessControlAllowMethods  = "GET, SET",
                                                                    AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                    ContentType                = HTTPContentType.JSON_UTF8,
                                                                    Content                    = JSONObject.Create(
                                                                                                    new JProperty("description", "The given organization '" + organizationId + "' does not exist!")
                                                                                                ).ToUTF8Bytes()
                                                                }.AsImmutable;

                                                     }

                                                     #endregion

                                                     accessRights.Add(new Tuple<User2OrganizationEdgeLabel, Organization>(accessRight,
                                                                                                                          organization));

                                                 }
                                             }

                                             #endregion


                                             var result = accessRights.SafeAny()

                                                             ? await AddUser(newUser,
                                                                             accessRights,
                                                                             false,
                                                                             (_user, _eventTrackingId) => { },
                                                                             Request.EventTrackingId,
                                                                             CurrentUserId: HTTPUser.Id)

                                                             : await AddUser(newUser,
                                                                             false,
                                                                             (_user, _eventTrackingId) => { },
                                                                             Request.EventTrackingId,
                                                                             CurrentUserId: HTTPUser.Id);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Created,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "OPTIONS, ADD, EXISTS, GET, SET, AUTH, DEAUTH, IMPERSONATE, DEPERSONATE, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              ContentType                 = HTTPContentType.JSON_UTF8,
                                                              Content                     = newUser.ToJSON(Embedded: false).ToUTF8Bytes(),
                                                              Connection                  = "close"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                              Server                     = HTTPServer.DefaultServerName,
                                                              Date                       = Timestamp.Now,
                                                              AccessControlAllowOrigin   = "*",
                                                              AccessControlAllowMethods  = "ADD, SET, GET",
                                                              AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                              ContentType                = HTTPContentType.JSON_UTF8,
                                                              Content                    = JSONObject.Create(
                                                                                               new JProperty("description", "Could create the new user!")
                                                                                           ).ToUTF8Bytes()
                                                          }.AsImmutable;

                                         });

            #endregion

            #region DEAUTH      ~/users

            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                          HTTPMethod.DEAUTH,
                                          HTTPPath.Parse("/users"),
                                          HTTPContentType.JSON_UTF8,
                                          HTTPDelegate: Request =>

                                              Task.FromResult(
                                                  new HTTPResponse.Builder(Request) {
                                                      HTTPStatusCode  = HTTPStatusCode.OK,
                                                      CacheControl    = "private",
                                                      SetCookies      = new String[] {

                                                                            String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                                          HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                              ? "; Domain=" + HTTPCookieDomain
                                                                                              : "",
                                                                                          "; Path=", URLPathPrefix),

                                                                            String.Concat(SessionCookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                                          HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                              ? "; Domain=" + HTTPCookieDomain
                                                                                              : "",
                                                                                          "; Path=", URLPathPrefix)

                                                                        },
                                                      Connection      = "close"
                                                  }.AsImmutable));

            #endregion


            #region OPTIONS     ~/users/{UserId}

            // -----------------------------------------------------------------------------------
            // curl -X OPTIONS -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // -----------------------------------------------------------------------------------
            //HTTPServer.ITEM_GET<User_Id, User>(UriTemplate:         URLPrefix + "users/{UserId}",
            //                                   ParseIdDelegate:     User_Id.TryParse,
            //                                   ParseIdError:        Text => "Invalid user identification '" + Text + "'!",
            //                                   TryGetItemDelegate:  _Users.TryGetValue,
            //                                   ItemFilterDelegate:  user   => user.PrivacyLevel == PrivacyLevel.World,
            //                                   TryGetItemError:     userId => "Unknown user '" + userId + "'!",
            //                                   ToJSONDelegate:      user   => user.ToJSON(IncludeCryptoHash: true));

            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.OPTIONS,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPDelegate: Request => {

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "OPTIONS, ADD, EXISTS, GET, SET, AUTH, DEAUTH, IMPERSONATE, DEPERSONATE, DELETE",
                                                     AccessControlAllowHeaders  = "X-PINGOTHER, Content-Type, Accept, Authorization, X-App-Version",
                                                     AccessControlMaxAge        = 3600,
                                                     //ETag                       = "1",
                                                     CacheControl               = "public",
                                                     //Expires                    = "Mon, 25 Jun 2015 21:31:12 GMT",
                                                     Connection                 = "close"
                                                 }.AsImmutable);

                                         });


            #region Get HTTP user and its organizations

            // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
            //if (!TryGetHTTPUser(Request,
            //                    out User                   HTTPUser,
            //                    out HashSet<Organization>  HTTPOrganizations,
            //                    out HTTPResponse           Response,
            //                    Recursive: true))
            //{
            //    return Task.FromResult(Response);
            //}

            #endregion


            #endregion

            #region ADD         ~/users/{UserId}

            // -------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // -------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.ADD,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   AddUserHTTPRequest,
                                         HTTPResponseLogger:  AddUserHTTPResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   errorResponse,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return errorResponse;
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUserId(this,
                                                                      out User_Id?  UserIdURL,
                                                                      out           errorResponse))
                                             {
                                                 return errorResponse;
                                             }

                                             #endregion


                                             #region Parse JSON HTTP body...

                                             if (!Request.TryParseJObjectRequestBody(out JObject JSONBody, out errorResponse))
                                                 return errorResponse;

                                             #endregion

                                             #region Parse UserId           [optional]

                                             if (JSONBody.ParseOptionalStruct2("@id",
                                                                               "user identification",
                                                                               HTTPServer.DefaultHTTPServerName,
                                                                               User_Id.TryParse,
                                                                               out User_Id?  userIdBody,
                                                                               Request,
                                                                               out errorResponse))
                                             {
                                                 if (errorResponse != null)
                                                     return errorResponse;
                                             }

                                             if (userIdBody.HasValue &&
                                                 UserIdURL.Value != userIdBody.Value)
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", "The user identification within the URL does not match the identification with the JSON request body!")
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             }

                                             #endregion

                                             #region Parse NewUser          [mandatory]

                                             if (!User.TryParseJSON(JSONBody,
                                                                    out User    newUser,
                                                                    out String  errorString,
                                                                    UserIdURL,
                                                                    MinUserIdLength,
                                                                    MinUserNameLength))
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", errorString)
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             }

                                             #endregion

                                             #region Parse AccessRights     [optional]

                                             if (JSONBody.ParseOptional("accessRights",
                                                                     "access rights",
                                                                     HTTPServer.DefaultHTTPServerName,
                                                                     out JArray  accessRightsArray,
                                                                     Request,
                                                                     out errorResponse))
                                             {
                                                 if (errorResponse != null)
                                                     return errorResponse;
                                             }

                                             var accessRights = new List<Tuple<User2OrganizationEdgeLabel, Organization>>();

                                             if (accessRightsArray.SafeAny())
                                             {
                                                 foreach (var accessRightJSON in accessRightsArray)
                                                 {

                                                     #region Validate accessRight JSON object.

                                                     if (!(accessRightJSON is JObject accessRightObject))
                                                         return new HTTPResponse.Builder(Request) {
                                                                     HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                                     Server                     = HTTPServer.DefaultServerName,
                                                                     Date                       = Timestamp.Now,
                                                                     AccessControlAllowOrigin   = "*",
                                                                     AccessControlAllowMethods  = "GET, SET",
                                                                     AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                     ContentType                = HTTPContentType.JSON_UTF8,
                                                                     Content                    = JSONObject.Create(
                                                                                                     new JProperty("description", "Invalid 'accessRight' JSON object!")
                                                                                                 ).ToUTF8Bytes()
                                                                 }.AsImmutable;

                                                     #endregion

                                                     #region Parse AccessRight     [mandatory]

                                                     if (!accessRightObject.ParseMandatoryEnum("accessRight",
                                                                                             "access right",
                                                                                             HTTPServer.DefaultHTTPServerName,
                                                                                             out User2OrganizationEdgeLabel accessRight,
                                                                                             Request,
                                                                                             out errorResponse))
                                                     {
                                                         return errorResponse;
                                                     }

                                                     #endregion

                                                     #region Parse Organization    [mandatory]

                                                     if (!accessRightObject.ParseMandatory("organizationId",
                                                                                         "organization identification",
                                                                                         HTTPServer.DefaultHTTPServerName,
                                                                                         Organization_Id.TryParse,
                                                                                         out Organization_Id organizationId,
                                                                                         Request,
                                                                                         out errorResponse))
                                                     {
                                                         return errorResponse;
                                                     }

                                                     if (!_Organizations.TryGetValue(organizationId, out Organization organization))
                                                         return new HTTPResponse.Builder(Request) {
                                                                     HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                                     Server                     = HTTPServer.DefaultServerName,
                                                                     Date                       = Timestamp.Now,
                                                                     AccessControlAllowOrigin   = "*",
                                                                     AccessControlAllowMethods  = "GET, SET",
                                                                     AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                     ContentType                = HTTPContentType.JSON_UTF8,
                                                                     Content                    = JSONObject.Create(
                                                                                                     new JProperty("description", "The given organization '" + organizationId + "' does not exist!")
                                                                                                 ).ToUTF8Bytes()
                                                                 }.AsImmutable;

                                                     #endregion

                                                     accessRights.Add(new Tuple<User2OrganizationEdgeLabel, Organization>(accessRight,
                                                                                                                          organization));

                                                 }
                                             }

                                             #endregion


                                             var result = accessRights.SafeAny()

                                                             ? await AddUser(newUser,
                                                                             accessRights,
                                                                             false,
                                                                             (_user, _eventTrackingId) => { },
                                                                             Request.EventTrackingId,
                                                                             CurrentUserId: HTTPUser.Id)

                                                             : await AddUser(newUser,
                                                                             false,
                                                                             (_user, _eventTrackingId) => { },
                                                                             Request.EventTrackingId,
                                                                             CurrentUserId: HTTPUser.Id);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Created,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "OPTIONS, ADD, EXISTS, GET, SET, AUTH, DEAUTH, IMPERSONATE, DEPERSONATE, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              ContentType                 = HTTPContentType.JSON_UTF8,
                                                              Content                     = newUser.ToJSON(Embedded: false).ToUTF8Bytes(),
                                                              Connection                  = "close"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, SET, GET",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              ContentType                 = HTTPContentType.JSON_UTF8,
                                                              Content                     = JSONObject.Create(
                                                                                                new JProperty("description", "Could create the new user!")
                                                                                            ).ToUTF8Bytes()
                                                          }.AsImmutable;

                                         });

            #endregion

            #region EXISTS      ~/users/{UserId}

            // ---------------------------------------------------------------------------------
            // curl -v -X EXITS -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // ---------------------------------------------------------------------------------
            HTTPServer.ITEM_EXISTS<User_Id, User>(UriTemplate: URLPathPrefix + "users/{UserId}",
                                                  ParseIdDelegate: User_Id.TryParse,
                                                  ParseIdError: Text => "Invalid user identification '" + Text + "'!",
                                                  TryGetItemDelegate: _Users.TryGetValue,
                                                  ItemFilterDelegate: user => user.PrivacyLevel == PrivacyLevel.World,
                                                  TryGetItemError: userId => "Unknown user '" + userId + "'!");

            #endregion

            #region GET         ~/users/{UserId}

            #region JSON

            // ------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // ------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.ReadOnly,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?  UserIdURL,
                                                                    out User      User,
                                                                    out           Response))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             if (HTTPUser != User && !CanImpersonate(HTTPUser, User, Access_Levels.ReadOnly))
                                                 return Task.FromResult(
                                                            new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.Unauthorized,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "GET, SET",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                Connection                 = "close"
                                                            }.AsImmutable);


                                             var UserJSON = User.ToJSON(false);

                                             // You request your own profile or you are a valid *admin*
                                             if (HTTPUser == User || CanImpersonate(HTTPUser, User, Access_Levels.ReadWrite))
                                                 UserJSON.Add(new JProperty("youCanEdit", true));


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode              = HTTPStatusCode.OK,
                                                     Server                      = HTTPServer.DefaultServerName,
                                                     Date                        = Timestamp.Now,
                                                     AccessControlAllowOrigin    = "*",
                                                     AccessControlAllowMethods   = "GET, SET",
                                                     AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                     ContentType                 = HTTPContentType.HTML_UTF8,
                                                     Content                     = UserJSON.ToUTF8Bytes(),
                                                     Connection                  = "close",
                                                     Vary                        = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region HTML

            // ------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/users/Organization
            // ------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   HTTPResponse,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?  UserId,
                                                                    out User      User,
                                                                    out           HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             // You request your own profile or you are a valid *admin*
                                             return Task.FromResult(User == HTTPUser || CanImpersonate(HTTPUser,
                                                                                                       User,
                                                                                                       Access_Levels.ReadOnly)

                                                         ? new HTTPResponse.Builder(Request) {
                                                               HTTPStatusCode              = HTTPStatusCode.OK,
                                                               Server                      = HTTPServer.DefaultServerName,
                                                               Date                        = Timestamp.Now,
                                                               AccessControlAllowOrigin    = "*",
                                                               AccessControlAllowMethods   = "GET",
                                                               AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                               ContentType                 = HTTPContentType.HTML_UTF8,
                                                               Content                     = MixWithHTMLTemplate("user.user.shtml").ToUTF8Bytes(),
                                                               Connection                  = "close",
                                                               Vary                        = "Accept"
                                                           }.AsImmutable

                                                         : new HTTPResponse.Builder(Request) {
                                                               HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                               Server                      = HTTPServer.DefaultServerName,
                                                               Date                        = Timestamp.Now,
                                                               AccessControlAllowOrigin    = "*",
                                                               AccessControlAllowMethods   = "GET",
                                                               AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                               Connection                  = "close"
                                                           }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region SET         ~/users/{UserId}

            // ---------------------------------------------------------------------------------------------
            // curl -v -X SET \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //              \"@id\" :             \"214080158\", \
            //              \"@context\" :        \"https://opendata.social/contexts/usersAPI/user+json\", \
            //              \"description\" :     { \"deu\" : \"Test AED in Erlangen Raum Yavin 4\" },\
            //              \"dataLicenseIds\" :  [ \"ODbL\" ],\
            //              \"ownerId\" :         \"Organization\", \
            //              \"address\" :         { \
            //                                      \"country\" :      \"Germany\",
            //                                      \"postalCode\" :   \"91052\",
            //                                      \"city\" :         { \"deu\": \"Erlangen\" },
            //                                      \"street\" :       \"Henkestraße\",
            //                                      \"houseNumber\" :  \"91\",
            //                                      \"floorLevel\" :   \"1\"
            //                                    }, \
            //              \"geoLocation\" :     { \"lat\": 49.594760, \"lng\": 11.019356 }, \
            //              \"privacyLevel\" :    \"Public\" \
            //          }" \
            //      http://127.0.0.1:2000/users/214080158
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.SET,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   SetUserHTTPRequest,
                                         HTTPResponseLogger:  SetUserHTTPResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return Response;
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUserId(this,
                                                                      out User_Id?              UserIdURL,
                                                                      out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Parse JSON

                                             if (!Request.TryParseJObjectRequestBody(out JObject JSONObj, out HTTPResponse))
                                                 return HTTPResponse;

                                             if (!User.TryParseJSON(JSONObj,
                                                                    out User    _User,
                                                                    out String  ErrorResponse,
                                                                    UserIdURL))
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description",  ErrorResponse)
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             }

                                             #endregion


                                             // Has the current HTTP user the required
                                             // access rights to update?
                                             if (HTTPUser.Id != _User.Id && !CanImpersonate(HTTPUser, _User))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET, SET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;


                                             var result = await AddOrUpdateUser(_User,
                                                                                false,
                                                                                null,
                                                                                null,
                                                                                Request.EventTrackingId,
                                                                                HTTPUser.Id);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "GET, SET",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              ETag                        = _User.HashValue,
                                                              ContentType                 = HTTPContentType.JSON_UTF8,
                                                              Content                     = _User.ToJSON().ToUTF8Bytes(),
                                                              Connection                  = "close"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                              Server                     = HTTPServer.DefaultServerName,
                                                              Date                       = Timestamp.Now,
                                                              AccessControlAllowOrigin   = "*",
                                                              AccessControlAllowMethods  = "GET, SET",
                                                              AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                              ETag                       = "1",
                                                              ContentType                = HTTPContentType.JSON_UTF8,
                                                              Content                    = JSONObject.Create(
                                                                                               new JProperty("description", result?.ErrorDescription?.ToJSON())
                                                                                           ).ToUTF8Bytes()
                                                          }.AsImmutable;

                                         });

            #endregion

            #region AUTH        ~/users/{UserId}

            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.AUTH,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Check JSON body...

                                             if (!Request.TryParseJObjectRequestBody(out JObject loginData, out HTTPResponse.Builder _HTTPResponse))
                                                 return _HTTPResponse;

                                             if (!loginData.HasValues)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            ContentType     = HTTPContentType.JSON_UTF8,
                                                            Content         = new JObject(
                                                                                  new JProperty("@context",     SignInOutContext),
                                                                                  new JProperty("statuscode",   400),
                                                                                  new JProperty("description",  "Invalid JSON!")
                                                                             ).ToUTF8Bytes(),
                                                            CacheControl    = "private",
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion

                                             #region Verify username

                                             // The login is taken from the URL, not from the JSON!
                                             var login = Request.ParsedURLParameters[0];

                                             if (login.Length < MinUserIdLength)
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            ContentType     = HTTPContentType.JSON_UTF8,
                                                            Content         = new JObject(
                                                                                  new JProperty("@context",     SignInOutContext),
                                                                                  new JProperty("statuscode",   400),
                                                                                  new JProperty("property",     "user identification"),
                                                                                  new JProperty("description",  "The login is too short!")
                                                                              ).ToString().ToUTF8Bytes(),
                                                            CacheControl    = "private",
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             }

                                             loginData["username"] = login;

                                             #endregion

                                             #region Verify password

                                             var password = loginData.GetString("password");

                                             if (password.IsNullOrEmpty())
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            ContentType     = HTTPContentType.JSON_UTF8,
                                                            Content         = new JObject(
                                                                                  new JProperty("@context",     SignInOutContext),
                                                                                  new JProperty("statuscode",   400),
                                                                                  new JProperty("property",     "password"),
                                                                                  new JProperty("description",  "Missing \"password\" property!")
                                                                             ).ToString().ToUTF8Bytes(),
                                                            CacheControl    = "private",
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             }

                                             var passwordQuality = PasswordQualityCheck(password);

                                             if (passwordQuality < 1.0)
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            ContentType     = HTTPContentType.JSON_UTF8,
                                                            Content         = new JObject(
                                                                                  new JProperty("@context",     SignInOutContext),
                                                                                  new JProperty("statuscode",   400),
                                                                                  new JProperty("property",     "password"),
                                                                                  new JProperty("description",  "The password does not match the password quality criteria!")
                                                                             ).ToString().ToUTF8Bytes(),
                                                            CacheControl    = "private",
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             }

                                             loginData["passwordQuality"] = passwordQuality;

                                             #endregion

                                             #region Check login or e-mail address and password(s)

                                             var possibleUsers = new HashSet<User>();

                                             if (User_Id.       TryParse   (login,    out User_Id       _UserId) &&
                                                _Users.         TryGetValue(_UserId,  out User          _User)   &&
                                                _LoginPasswords.TryGetValue(_UserId,  out LoginPassword _LoginPassword))
                                             {
                                                 possibleUsers.Add(_User);
                                             }

                                             if (possibleUsers.Count == 0)
                                             {
                                                 foreach (var user in _Users.Values)
                                                 {
                                                     if (String.Equals(login,
                                                                       user.EMail.Address.ToString(),
                                                                       StringComparison.OrdinalIgnoreCase))
                                                     {
                                                         possibleUsers.Add(user);
                                                     }
                                                 }
                                             }

                                             if (possibleUsers.Count == 0)
                                                 return new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("property",     "login"),
                                                                               new JProperty("description",  "Unknown login!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable;


                                             var validUsers = new HashSet<User>();

                                             foreach (var possibleUser in possibleUsers)
                                             {
                                                 if (_LoginPasswords.TryGetValue(possibleUser.Id, out LoginPassword loginPassword) &&
                                                     loginPassword.VerifyPassword(password))
                                                 {
                                                     validUsers.Add(possibleUser);
                                                 }
                                             }

                                             if (validUsers.Count == 0)
                                                 return new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("property",     "login"),
                                                                               new JProperty("description",  "Invalid password!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable;


                                             if (validUsers.Count > 1)
                                                 return new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode  = HTTPStatusCode.MultipleChoices,
                                                         Server          = HTTPServer.DefaultServerName,
                                                         ContentType     = HTTPContentType.JSON_UTF8,
                                                         Content         = new JObject(
                                                                               new JProperty("@context",     SignInOutContext),
                                                                               new JProperty("property",     "login"),
                                                                               new JProperty("description",  "Multiple matching user accounts found: Please use your login name!")
                                                                           ).ToString().ToUTF8Bytes(),
                                                         CacheControl    = "private",
                                                         Connection      = "close"
                                                     }.AsImmutable;

                                             #endregion

                                             #region Check whether the user has access to at least one organization

                                             if (!possibleUsers.First().Organizations(Access_Levels.ReadOnly).Any())
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            ContentType     = HTTPContentType.JSON_UTF8,
                                                            Content         = new JObject(
                                                                                  new JProperty("@context",    SignInOutContext),
                                                                                  new JProperty("description", "You do not have access to any organization!")
                                                                              ).ToString().ToUTF8Bytes(),
                                                            CacheControl    = "private",
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion

                                             var validUser = validUsers.First();

                                             #region Check EULA

                                             var acceptsEULA = loginData["acceptsEULA"].Value<Boolean>();

                                             if (!validUser.AcceptedEULA.HasValue)
                                             {

                                                 if (!acceptsEULA)
                                                 {
                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                                                Server          = HTTPServer.DefaultServerName,
                                                                ContentType     = HTTPContentType.JSON_UTF8,
                                                                Content         = new JObject(
                                                                                      new JProperty("@context",     SignInOutContext),
                                                                                      new JProperty("showEULA",     true),
                                                                                      new JProperty("description",  "Please accept the end-user license agreement!")
                                                                                  ).ToString().ToUTF8Bytes(),
                                                                CacheControl    = "private",
                                                                Connection      = "close"
                                                            }.AsImmutable;
                                                 }

                                                 await UpdateUser(validUser,
                                                                  _user => _user.AcceptedEULA = Timestamp.Now,
                                                                  null,
                                                                  Request.EventTrackingId,
                                                                  Robot.Id);

                                             }

                                             #endregion


                                             #region Register security token

                                             var SHA256Hash       = new SHA256Managed();
                                             var securityTokenId  = SecurityToken_Id.Parse(SHA256Hash.ComputeHash(
                                                                                               String.Concat(Guid.NewGuid().ToString(),
                                                                                                             validUser.Id).
                                                                                               ToUTF8Bytes()
                                                                                           ).ToHexString());

                                             var expires          = Timestamp.Now.Add(MaxSignInSessionLifetime);

                                             lock (_HTTPCookies)
                                             {

                                                 _HTTPCookies.Add(securityTokenId,
                                                                  new SecurityToken(validUser.Id,
                                                                                    expires));

                                                 File.AppendAllText(UsersAPIPath + DefaultHTTPCookiesFile,
                                                                    securityTokenId + ";" + validUser.Id + ";" + expires.ToIso8601() + Environment.NewLine);

                                             }

                                             #endregion


                                             return new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode  = HTTPStatusCode.Created,
                                                        ContentType     = HTTPContentType.TEXT_UTF8,
                                                        Content         = new JObject(
                                                                              new JProperty("@context",  SignInOutContext),
                                                                              new JProperty("login",     validUser.Id.ToString()),
                                                                              new JProperty("username",  validUser.Name),
                                                                              new JProperty("email",     validUser.EMail.Address.ToString())
                                                                          ).ToUTF8Bytes(),
                                                        CacheControl    = "private",
                                                        SetCookies      = new String[] {
                                                                              String.Concat(CookieName,
                                                                                            GenerateCookieUserData(validUser),
                                                                                            GenerateCookieSettings(expires)),
                                                                              String.Concat(SessionCookieName, "=", securityTokenId.ToString(),
                                                                                            GenerateCookieSettings(expires),
                                                                                            "; HttpOnly")
                                                                          },
                                                        Connection      = "close"
                                                    }.AsImmutable;

                                         });

            #endregion

            #region DEAUTH      ~/users/{UserId}

            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.DEAUTH,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request =>

                                             Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode  = HTTPStatusCode.OK,
                                                     CacheControl    = "private",
                                                     SetCookies      = new String[] {

                                                                           String.Concat(CookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                                         HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                             ? "; Domain=" + HTTPCookieDomain
                                                                                             : "",
                                                                                         "; Path=", URLPathPrefix),

                                                                           String.Concat(SessionCookieName, "=; Expires=", Timestamp.Now.ToRfc1123(),
                                                                                         HTTPCookieDomain.IsNotNullOrEmpty()
                                                                                             ? "; Domain=" + HTTPCookieDomain
                                                                                             : "",
                                                                                         "; Path=", URLPathPrefix)
                                                                       },
                                                     Connection      = "close"
                                                 }.AsImmutable));

            #endregion

            #region IMPERSONATE ~/users/{UserId}

            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.IMPERSONATE,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   ImpersonateUserRequest,
                                         HTTPResponseLogger:  ImpersonateUserResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get astronaut and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetAstronaut(Request,
                                                                  out User                       Astronaut,
                                                                  out IEnumerable<Organization>  AstronautOrganizations,
                                                                  out HTTPResponse.Builder       Response,
                                                                  Recursive: true))
                                             {
                                                 return Response;
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUserId(this,
                                                                      out User_Id?              UserIdURL,
                                                                      out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             if (!TryGetUser(UserIdURL.Value, out User UserURL))
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.NotFound,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "IMPERSONATE",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                             }

                                             #endregion

                                             #region Is the current user allowed to impersonate the given user?

                                             if (!CanImpersonate(Astronaut, UserURL))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "IMPERSONATE",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             #region Register security token

                                             var SHA256Hash       = new SHA256Managed();
                                             var securityTokenId  = SecurityToken_Id.Parse(SHA256Hash.ComputeHash(
                                                                                               String.Concat(Guid.NewGuid().ToString(),
                                                                                                             UserURL.Id).
                                                                                               ToUTF8Bytes()
                                                                                           ).ToHexString());

                                             var expires          = Timestamp.Now.Add(MaxSignInSessionLifetime);

                                             lock (_HTTPCookies)
                                             {

                                                 _HTTPCookies.Add(securityTokenId,
                                                                  new SecurityToken(UserURL.Id,
                                                                                    expires,
                                                                                    Astronaut.Id));

                                                 File.AppendAllText(UsersAPIPath + DefaultHTTPCookiesFile,
                                                                    securityTokenId + ";" + UserURL.Id + ";" + expires.ToIso8601() + ";" + Astronaut.Id + Environment.NewLine);

                                             }

                                             #endregion


                                             return new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode  = HTTPStatusCode.Created,
                                                        ContentType     = HTTPContentType.TEXT_UTF8,
                                                        Content         = new JObject(
                                                                              new JProperty("@context",  SignInOutContext),
                                                                              new JProperty("login",     UserURL.Id.ToString()),
                                                                              new JProperty("username",  UserURL.Name),
                                                                              new JProperty("email",     UserURL.EMail.Address.ToString())
                                                                          ).ToUTF8Bytes(),
                                                        CacheControl    = "private",
                                                        SetCookies      = new String[] {
                                                                              String.Concat(CookieName,
                                                                                            GenerateCookieUserData(UserURL, Astronaut),
                                                                                            GenerateCookieSettings(expires)),
                                                                              String.Concat(SessionCookieName, "=", securityTokenId.ToString(),
                                                                                            GenerateCookieSettings(expires),
                                                                                            "; HttpOnly")
                                                                          },
                                                        Connection      = "close"
                                                    }.AsImmutable;

                                         });

            #endregion

            #region DEPERSONATE ~/users/{UserId}

            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.DEPERSONATE,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get astronaut and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetAstronaut(Request,
                                                                  out User                       Astronaut,
                                                                  out IEnumerable<Organization>  AstronautOrganizations,
                                                                  out HTTPResponse.Builder       Response,
                                                                  Recursive: true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUserId(this,
                                                                      out User_Id?              UserIdURL,
                                                                      out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             if (!TryGetUser(UserIdURL.Value, out User UserURL))
                                             {

                                                 return Task.FromResult(
                                                            new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode              = HTTPStatusCode.NotFound,
                                                                Server                      = HTTPServer.DefaultServerName,
                                                                Date                        = Timestamp.Now,
                                                                AccessControlAllowOrigin    = "*",
                                                                AccessControlAllowMethods   = "DEPERSONATE",
                                                                AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                                Connection                  = "close"
                                                            }.AsImmutable);

                                             }

                                             #endregion


                                             #region Switch back to astronaut user identification...

                                             var SHA256Hash       = new SHA256Managed();
                                             var securityTokenId  = SecurityToken_Id.Parse(SHA256Hash.ComputeHash(
                                                                                               String.Concat(Guid.NewGuid().ToString(),
                                                                                                             Astronaut.Id).
                                                                                               ToUTF8Bytes()
                                                                                           ).ToHexString());

                                             var expires          = Timestamp.Now.Add(MaxSignInSessionLifetime);

                                             lock (_HTTPCookies)
                                             {

                                                 _HTTPCookies.Add(securityTokenId,
                                                                  new SecurityToken(Astronaut.Id,
                                                                                    expires));

                                                 File.AppendAllText(UsersAPIPath + DefaultHTTPCookiesFile,
                                                                    securityTokenId + ";" + Astronaut.Id + ";" + expires.ToIso8601() + Environment.NewLine);

                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode  = HTTPStatusCode.Created,
                                                     ContentType     = HTTPContentType.TEXT_UTF8,
                                                     Content         = new JObject(
                                                                           new JProperty("@context",  SignInOutContext),
                                                                           new JProperty("login",     Astronaut.Id.ToString()),
                                                                           new JProperty("username",  Astronaut.Name),
                                                                           new JProperty("email",     Astronaut.EMail.Address.ToString())
                                                                       ).ToUTF8Bytes(),
                                                     CacheControl    = "private",
                                                     SetCookies      = new String[] {
                                                                           String.Concat(CookieName,
                                                                                         GenerateCookieUserData(Astronaut),
                                                                                         GenerateCookieSettings(expires)),
                                                                           String.Concat(SessionCookieName, "=", securityTokenId.ToString(),
                                                                                         GenerateCookieSettings(expires),
                                                                                         "; HttpOnly")
                                                                       },
                                                     Connection      = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region DELETE      ~/users/{UserId}

            // ----------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf
            // ----------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "users/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   errorResponse,
                                                                 Recursive: true))
                                             {
                                                 return errorResponse;
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                 out User_Id?  UserId,
                                                                 out User      User,
                                                                 out           errorResponse))
                                             {
                                                 return errorResponse;
                                             }

                                             #endregion

                                             #region Validate user

                                             if (HTTPUser != User && !CanImpersonate(HTTPUser,
                                                                                     User,
                                                                                     Access_Levels.ReadWrite))
                                             {
                                                 return new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "OPTIONS, ADD, EXISTS, GET, SET, AUTH, DEAUTH, IMPERSONATE, DEPERSONATE, DELETE",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.JSON_UTF8,
                                                         Content                    = JSONObject.Create(
                                                                                             new JProperty("description", "This operation is not allowed!")
                                                                                         ).ToUTF8Bytes(),
                                                         Connection                 = "close",
                                                         Vary                       = "Accept"
                                                     }.AsImmutable;
                                             }

                                             #endregion


                                             var result = await DeleteUser(User,
                                                                         null,
                                                                         Request.EventTrackingId,
                                                                         HTTPUser.Id);


                                             return result?.IsSuccess == true

                                                     ? new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.OK,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = "OPTIONS, ADD, EXISTS, GET, SET, AUTH, DEAUTH, IMPERSONATE, DEPERSONATE, DELETE",
                                                             AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = User.ToJSON(false).ToUTF8Bytes(),
                                                             Connection                 = "close",
                                                             Vary                       = "Accept"
                                                         }.AsImmutable

                                                     : new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.FailedDependency,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = "OPTIONS, ADD, EXISTS, GET, SET, AUTH, DEAUTH, IMPERSONATE, DEPERSONATE, DELETE",
                                                             AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                             new JProperty("description", result?.ErrorDescription?.ToJSON())
                                                                                         ).ToUTF8Bytes(),
                                                             Connection                 = "close",
                                                             Vary                       = "Accept"
                                                         }.AsImmutable;

            });

            #endregion


            #region SET         ~/users/{UserId}/password

            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.SET,
                                         URLPathPrefix + "users/{UserId}/password",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   ChangePasswordRequest,
                                         HTTPResponseLogger:  ChangePasswordResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return Response;
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?              UserIdURL,
                                                                    out User                  User,
                                                                    out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion


                                             // Has the current HTTP user the required
                                             // access rights to update?
                                             if (HTTPUser.Id != UserIdURL.Value)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET, SET, CHOWN",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;


                                             #region Parse JSON

                                             if (!Request.TryParseJObjectRequestBody(out JObject JSONObj, out HTTPResponse))
                                                 return HTTPResponse;

                                             #endregion

                                             #region Parse CurrentPassword    [mandatory]

                                             if (!JSONObj.ParseMandatory("currentPassword",
                                                                         "current password",
                                                                         Password.TryParse,
                                                                         out Password  CurrentPassword,
                                                                         out String    errorResponse))
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", errorResponse)
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             }

                                             #endregion

                                             #region Parse NewPassword        [mandatory]

                                             if (!JSONObj.ParseMandatory("newPassword",
                                                                         "new password",
                                                                         Password.TryParse,
                                                                         out Password  NewPassword,
                                                                         out           errorResponse))
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", errorResponse)
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             }

                                             if (PasswordQualityCheck(NewPassword.UnsecureString) < 1.0)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            ContentType     = HTTPContentType.JSON_UTF8,
                                                            Content         = JSONObject.Create(
                                                                                  new JProperty("@context",      SignInOutContext),
                                                                                  new JProperty("statuscode",    400),
                                                                                  new JProperty("property",     "password"),
                                                                                  new JProperty("description",  "The choosen password does not match the password quality criteria!")
                                                                              ).ToString().ToUTF8Bytes(),
                                                            CacheControl    = "private",
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion



                                             var result = await ChangePassword(User,
                                                                               NewPassword,
                                                                               CurrentPassword,
                                                                               EventTrackingId: Request.EventTrackingId,
                                                                               CurrentUserId:   HTTPUser.Id);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.OK,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "SET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "SET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                         });

            #endregion

            #region GET         ~/users/{UserId}/profilephoto

            HTTPServer.RegisterFilesystemFile(HTTPHostname.Any,
                                              URLPathPrefix + "users/{UserId}/profilephoto",
                                              URLParams => "LocalHTTPRoot/data/Users/" + URLParams[0] + ".png",
                                              DefaultFile: "HTTPRoot/images/defaults/DefaultUser.png");

            #endregion

            #region GET         ~/users/{UserId}/organizations

            // ------------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/users/{UserId}/organizations?summary
            // ------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}/organizations",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive: true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?  UserIdURL,
                                                                    out User      User,
                                                                    out           Response))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             var AllMyOrganizations = new OrganizationInfo(NoOwner, HTTPUser).Childs;

                                             var summary = Request.QueryString.GetBoolean("summary", false);

                                             if (summary)
                                             {
                                                 // [
                                                 //     {
                                                 //         "@id":   "hamzatest",
                                                 //         "name":  { "deu": "Hamza_tests" }
                                                 //     },
                                                 //     ...
                                                 // ]
                                             }

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET, COUNT, OPTIONS",
                                                     AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                     ETag                       = "1",
                                                     ContentType                = HTTPContentType.JSON_UTF8,
                                                     Content                    = AllMyOrganizations.ToJSON().ToUTF8Bytes(),
                                                     Vary                       = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion


            #region GET         ~/users/{UserId}/notifications

            #region JSON

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/notifications
            // --------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}/notifications",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive: true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode             = HTTPStatusCode.OK,
                                                        Server                     = HTTPServer.DefaultServerName,
                                                        Date                       = Timestamp.Now,
                                                        AccessControlAllowOrigin   = "*",
                                                        AccessControlAllowMethods  = "GET, SET",
                                                        AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                        ETag                       = "1",
                                                        ContentType                = HTTPContentType.JSON_UTF8,
                                                        Content                    = GetNotifications(HTTPUser).ToUTF8Bytes(),
                                                        Connection                 = "close",
                                                        Vary                       = "Accept"
                                                    }.AsImmutable);

            });

            #endregion

            #region HTML

            // -------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/users/ahzf/notifications
            // -------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}/notifications",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?              UserId,
                                                                    out User                  User,
                                                                    out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             // You request your own profile or you are a valid *admin*
                                             return Task.FromResult(User == HTTPUser || CanImpersonate(HTTPUser, User)

                                                         ? new HTTPResponse.Builder(Request) {
                                                               HTTPStatusCode              = HTTPStatusCode.OK,
                                                               Server                      = HTTPServer.DefaultServerName,
                                                               Date                        = Timestamp.Now,
                                                               AccessControlAllowOrigin    = "*",
                                                               AccessControlAllowMethods   = "GET",
                                                               AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                               ContentType                 = HTTPContentType.HTML_UTF8,
                                                               Content                     = MixWithHTMLTemplate("user.notifications.shtml").ToUTF8Bytes(),
                                                               Connection                  = "close",
                                                               Vary                        = "Accept"
                                                           }.AsImmutable

                                                         : new HTTPResponse.Builder(Request) {
                                                               HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                               Server                      = HTTPServer.DefaultServerName,
                                                               Date                        = Timestamp.Now,
                                                               AccessControlAllowOrigin    = "*",
                                                               AccessControlAllowMethods   = "GET",
                                                               AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                               Connection                  = "close"
                                                           }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region SET         ~/users/{UserId}/notifications

            // ---------------------------------------------------------------------------------------------
            // curl -v -X SET \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //          }" \
            //      http://127.0.0.1:2000/users/214080158
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.SET,
                                         URLPathPrefix + "users/{UserId}/notifications",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   SetUserNotificationsRequest,
                                         HTTPResponseLogger:  SetUserNotificationsResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   HTTPResponse,
                                                                 AccessLevel:               Access_Levels.ReadOnly,
                                                                 Recursive:                 true))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?  UserIdURL,
                                                                    out User      User,
                                                                    out           HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Has the current HTTP user the required access rights to update?

                                             if (UserIdURL != HTTPUser.Id)
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET, SET, CHOWN",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                             }

                                             #endregion


                                             #region Parse JSON and new notifications...

                                             if (!Request.TryParseJArrayRequestBody(out JArray JSONArray, out HTTPResponse))
                                                 return HTTPResponse;

                                             String ErrorString = null;

                                             if (JSONArray.Count > 0)
                                             {

                                                 var JSONObjects = JSONArray.Cast<JObject>().ToArray();

                                                 if (!JSONObjects.Any())
                                                     goto fail;

                                                 String context = null;

                                                 foreach (var JSONObject in JSONObjects)
                                                 {

                                                     context = JSONObject["@context"]?.Value<String>();

                                                     if (context.IsNullOrEmpty())
                                                         goto fail;

                                                     switch (context)
                                                     {

                                                         case TelegramNotification.JSONLDContext:
                                                             if (!TelegramNotification.TryParse(JSONObject, out TelegramNotification telegramNotification))
                                                             {
                                                                 ErrorString = "Could not parse Telegram notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(HTTPUser, telegramNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case TelegramGroupNotification.JSONLDContext:
                                                             if (!TelegramGroupNotification.TryParse(JSONObject, out TelegramGroupNotification telegramGroupNotification))
                                                             {
                                                                 ErrorString = "Could not parse Telegram group notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(HTTPUser, telegramGroupNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case SMSNotification.JSONLDContext:
                                                             if (!SMSNotification.TryParse(JSONObject, out SMSNotification   smsNotification))
                                                             {
                                                                 ErrorString = "Could not parse sms notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(HTTPUser, smsNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case HTTPSNotification.JSONLDContext:
                                                             if (!HTTPSNotification.TryParse(JSONObject, out HTTPSNotification httpsNotification))
                                                             {
                                                                 ErrorString = "Could not parse https notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(HTTPUser, httpsNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case EMailNotification.JSONLDContext:
                                                             if (!EMailNotification.TryParse(JSONObject, out EMailNotification eMailNotification))
                                                             {
                                                                 ErrorString = "Could not parse e-mail notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(HTTPUser, eMailNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         default:
                                                             goto fail;

                                                     }

                                                 }

                                             }

                                             goto goon;

                                             #region fail...

                                             fail:

                                             return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", ErrorString ?? "Invalid array of notifications!")
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             #endregion

                                             goon:

                                             #endregion


                                             return new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode              = HTTPStatusCode.OK,
                                                        Server                      = HTTPServer.DefaultServerName,
                                                        Date                        = Timestamp.Now,
                                                        AccessControlAllowOrigin    = "*",
                                                        AccessControlAllowMethods   = "GET, SET",
                                                        AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                        ContentType                 = HTTPContentType.JSON_UTF8,
                                                        Content                     = GetNotifications(HTTPUser).ToUTF8Bytes(),
                                                        Connection                  = "close"
                                                    }.AsImmutable;

                                         });

            #endregion

            #region DELETE      ~/users/{UserId}/notifications

            // ---------------------------------------------------------------------------------------------
            // curl -v -X DELETE \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //          }" \
            //      http://127.0.0.1:2000/users/214080158
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "users/{UserId}/notifications",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   DeleteUserNotificationsRequest,
                                         HTTPResponseLogger:  DeleteUserNotificationsResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   HTTPResponse,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?  UserIdURL,
                                                                    out User      User,
                                                                    out           HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Has the current HTTP user the required access rights to update?

                                             if (UserIdURL != HTTPUser.Id)
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET, SET, CHOWN",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                             }

                                             #endregion


                                             #region Parse JSON and new notifications...

                                             if (!Request.TryParseJArrayRequestBody(out JArray JSONArray, out HTTPResponse))
                                                 return HTTPResponse;

                                             String ErrorString = null;

                                             if (JSONArray.Count > 0)
                                             {

                                                 var JSONObjects = JSONArray.Cast<JObject>().ToArray();

                                                 if (!JSONObjects.Any())
                                                     goto fail;

                                                 String context = null;

                                                 foreach (var JSONObject in JSONObjects)
                                                 {

                                                     context = JSONObject["@context"]?.Value<String>();

                                                     if (context.IsNullOrEmpty())
                                                         goto fail;

                                                     switch (context)
                                                     {

                                                         case TelegramNotification.JSONLDContext:
                                                             if (!TelegramNotification.TryParse(JSONObject, out TelegramNotification telegramNotification))
                                                             {
                                                                 ErrorString = "Could not parse Telegram notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(HTTPUser, telegramNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case TelegramGroupNotification.JSONLDContext:
                                                             if (!TelegramGroupNotification.TryParse(JSONObject, out TelegramGroupNotification telegramGroupNotification))
                                                             {
                                                                 ErrorString = "Could not parse Telegram group notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(HTTPUser, telegramGroupNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case SMSNotification.JSONLDContext:
                                                             if (!SMSNotification.  TryParse(JSONObject, out SMSNotification   smsNotification))
                                                             {
                                                                 ErrorString = "Could not parse sms notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(HTTPUser, smsNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case HTTPSNotification.JSONLDContext:
                                                             if (!HTTPSNotification.TryParse(JSONObject, out HTTPSNotification httpsNotification))
                                                             {
                                                                 ErrorString = "Could not parse https notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(HTTPUser, httpsNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case EMailNotification.JSONLDContext:
                                                             if (!EMailNotification.TryParse(JSONObject, out EMailNotification eMailNotification))
                                                             {
                                                                 ErrorString = "Could not parse e-mail notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(HTTPUser, eMailNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         default:
                                                             goto fail;

                                                     }

                                                 }

                                             }

                                             goto goon;

                                             #region fail...

                                             fail:

                                             return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", ErrorString ?? "Invalid array of notifications!")
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             #endregion

                                             goon:

                                             #endregion


                                             return new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode              = HTTPStatusCode.OK,
                                                        Server                      = HTTPServer.DefaultServerName,
                                                        Date                        = Timestamp.Now,
                                                        AccessControlAllowOrigin    = "*",
                                                        AccessControlAllowMethods   = "GET, SET",
                                                        AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                        ContentType                 = HTTPContentType.JSON_UTF8,
                                                        Content                     = GetNotifications(HTTPUser).ToUTF8Bytes(),
                                                        Connection                  = "close"
                                                    }.AsImmutable;

                                         });

            #endregion

            #region GET         ~/users/{UserId}/notifications/{notificationId}

            #region JSON

            // -------------------------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/notifications/{notificationId}
            // -------------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}/notifications/{notificationId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive: true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Get notificationId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2)
                                             {

                                                 return Task.FromResult(
                                                            new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                                Server          = HTTPServer.DefaultServerName,
                                                                Date            = Timestamp.Now,
                                                                Connection      = "close"
                                                            }.AsImmutable);

                                             }

                                             var notificationId = Request.ParsedURLParameters[1];

                                             #endregion

                                             #region Return notification for notification identification

                                             if (UInt32.TryParse(notificationId, out UInt32 NotificationId))
                                             {

                                                 return Task.FromResult(new HTTPResponse.Builder(Request) {
                                                                            HTTPStatusCode             = HTTPStatusCode.OK,
                                                                            Server                     = HTTPServer.DefaultServerName,
                                                                            Date                       = Timestamp.Now,
                                                                            AccessControlAllowOrigin   = "*",
                                                                            AccessControlAllowMethods  = "GET, SET",
                                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                            ETag                       = "1",
                                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                                            Content                    = GetNotification(HTTPUser, NotificationId).ToUTF8Bytes(),
                                                                            Connection                 = "close",
                                                                            Vary                       = "Accept"
                                                                        }.AsImmutable);

                                             }

                                             #endregion


                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable);

            });

            #endregion

            #region HTML

            // ------------------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/users/ahzf/notifications/{notificationId}
            // ------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}/notifications/{notificationId}",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?              UserId,
                                                                    out User                  User,
                                                                    out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion

                                             #region Get notificationId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2 ||
                                                 !UInt32.TryParse(Request.ParsedURLParameters[1], out UInt32 NotificationId))
                                             {

                                                 return Task.FromResult(
                                                            new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                                Server          = HTTPServer.DefaultServerName,
                                                                Date            = Timestamp.Now,
                                                                Connection      = "close"
                                                            }.AsImmutable);

                                             }

                                             #endregion


                                             // You request your own profile or you are a valid *admin*
                                             return Task.FromResult(User == HTTPUser || CanImpersonate(HTTPUser, User)

                                                         ? new HTTPResponse.Builder(Request) {
                                                               HTTPStatusCode              = HTTPStatusCode.OK,
                                                               Server                      = HTTPServer.DefaultServerName,
                                                               Date                        = Timestamp.Now,
                                                               AccessControlAllowOrigin    = "*",
                                                               AccessControlAllowMethods   = "GET",
                                                               AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                               ContentType                 = HTTPContentType.HTML_UTF8,
                                                               Content                     = MixWithHTMLTemplate("user.editNotification.shtml").ToUTF8Bytes(),
                                                               Connection                  = "close",
                                                               Vary                        = "Accept"
                                                           }.AsImmutable

                                                         : new HTTPResponse.Builder(Request) {
                                                               HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                               Server                      = HTTPServer.DefaultServerName,
                                                               Date                        = Timestamp.Now,
                                                               AccessControlAllowOrigin    = "*",
                                                               AccessControlAllowMethods   = "GET",
                                                               AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                               Connection                  = "close"
                                                           }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region GET         ~/users/{UserId}/notification/_new

            // ------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/users/ahzf/notification/_new
            // ------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}/notification/_new",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check UserId URL parameter

                                             if (!Request.ParseUser(this,
                                                                    out User_Id?              UserId,
                                                                    out User                  User,
                                                                    out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             if (User != HTTPUser)
                                             {
                                                 return Task.FromResult(
                                                            new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                                Server                      = HTTPServer.DefaultServerName,
                                                                Date                        = Timestamp.Now,
                                                                AccessControlAllowOrigin    = "*",
                                                                AccessControlAllowMethods   = "GET",
                                                                AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                                Connection                  = "close"
                                                            }.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode              = HTTPStatusCode.OK,
                                                     Server                      = HTTPServer.DefaultServerName,
                                                     Date                        = Timestamp.Now,
                                                     AccessControlAllowOrigin    = "*",
                                                     AccessControlAllowMethods   = "GET",
                                                     AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                     ContentType                 = HTTPContentType.HTML_UTF8,
                                                     Content                     = MixWithHTMLTemplate("user.editNotification.shtml").ToUTF8Bytes(),
                                                     Connection                  = "close",
                                                     Vary                        = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion


            #region GET         ~/users/{UserId}/APIKeys

            // --------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/APIKeys
            // --------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "users/{UserId}/APIKeys",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             try
                                             {

                                                 #region Get HTTP user and its organizations

                                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                                 if (!TryGetHTTPUser(Request,
                                                                     out User                   HTTPUser,
                                                                     out HashSet<Organization>  HTTPOrganizations,
                                                                     out HTTPResponse.Builder   errorResponse,
                                                                     Recursive: true))
                                                 {
                                                     return Task.FromResult(errorResponse.AsImmutable);
                                                 }

                                                 #endregion

                                                 #region Check UserId URL parameter

                                                 if (!Request.ParseUser(this,
                                                                        out User_Id?  UserId,
                                                                        out User      User,
                                                                        out           errorResponse))
                                                 {
                                                     return Task.FromResult(errorResponse.AsImmutable);
                                                 }

                                                 #endregion

                                                 #region Validate user

                                                 if (HTTPUser != User && !CanImpersonate(HTTPUser, User))
                                                 {
                                                     return Task.FromResult(
                                                            new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "ADD, GET",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description", "This operation is not allowed!")
                                                                                             ).ToUTF8Bytes(),
                                                                Connection                 = "close",
                                                                Vary                       = "Accept"
                                                            }.AsImmutable);
                                                 }

                                                 #endregion

                                                 return Task.FromResult(new HTTPResponse.Builder(Request) {
                                                                            HTTPStatusCode             = HTTPStatusCode.OK,
                                                                            Server                     = HTTPServer.DefaultServerName,
                                                                            Date                       = Timestamp.Now,
                                                                            AccessControlAllowOrigin   = "*",
                                                                            AccessControlAllowMethods  = "ADD, GET",
                                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                            ETag                       = "1",
                                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                                            Content                    = new JArray(
                                                                                                             GetAPIKeysForUser(User).
                                                                                                             SafeSelect       (apiKey => apiKey.ToJSON(Embedded: false))
                                                                                                         ).ToUTF8Bytes(),
                                                                            Connection                 = "close",
                                                                            Vary                       = "Accept"
                                                                        }.AsImmutable);

                                             }
                                             catch (Exception e)
                                             {
                                                 return Task.FromResult(
                                                            new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.InternalServerError,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "ADD, GET",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description", "Could not fetch the requestes API keys! " + e.Message)
                                                                                             ).ToUTF8Bytes(),
                                                                Connection                 = "close",
                                                                Vary                       = "Accept"
                                                            }.AsImmutable);
                                             }

            });

            #endregion

            #region ADD         ~/users/{UserId}/APIKeys

            // ---------------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/APIKeys
            // ---------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.ADD,
                                         URLPathPrefix + "users/{UserId}/APIKeys",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             try
                                             {

                                                 #region Get HTTP user and its organizations

                                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                                 if (!TryGetHTTPUser(Request,
                                                                     out User                   HTTPUser,
                                                                     out HashSet<Organization>  HTTPOrganizations,
                                                                     out HTTPResponse.Builder   errorResponse,
                                                                     Recursive: true))
                                                 {
                                                     return errorResponse;
                                                 }

                                                 #endregion

                                                 #region Check UserId URL parameter

                                                 if (!Request.ParseUser(this,
                                                                        out User_Id?  UserId,
                                                                        out User      User,
                                                                        out           errorResponse))
                                                 {
                                                     return errorResponse;
                                                 }

                                                 #endregion

                                                 #region Parse JSON HTTP body...

                                                 if (!Request.TryParseJObjectRequestBody(out JObject JSONBody, out errorResponse))
                                                     return errorResponse;

                                                 #region Parse APIKey    [mandatory]

                                                 if (!APIKey.TryParse(JSONBody,
                                                                              _Users.TryGetValue,
                                                                              out APIKey  apiKey,
                                                                              out String      errorString))
                                                 {

                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "ADD, GET",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description", errorString)
                                                                                             ).ToUTF8Bytes()
                                                            }.AsImmutable;

                                                 }

                                                 #endregion

                                                 #endregion

                                                 #region Validate user

                                                 if (apiKey.User != User || (HTTPUser != User && !CanImpersonate(HTTPUser, User)))
                                                 {
                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "ADD, GET",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description", "This operation is not allowed!")
                                                                                             ).ToUTF8Bytes(),
                                                                Connection                 = "close",
                                                                Vary                       = "Accept"
                                                            }.AsImmutable;
                                                 }

                                                 #endregion


                                                 var result = await AddAPIKey(apiKey,
                                                                              null,
                                                                              Request.EventTrackingId,
                                                                              HTTPUser.Id);

                                                 return result != null

                                                            ? new HTTPResponse.Builder(Request) {
                                                                      HTTPStatusCode             = HTTPStatusCode.OK,
                                                                      Server                     = HTTPServer.DefaultServerName,
                                                                      Date                       = Timestamp.Now,
                                                                      AccessControlAllowOrigin   = "*",
                                                                      AccessControlAllowMethods  = "ADD, GET",
                                                                      AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                      ContentType                = HTTPContentType.JSON_UTF8,
                                                                      Content                    = apiKey.ToJSON().ToUTF8Bytes(),
                                                                      Connection                 = "close",
                                                                      Vary                       = "Accept"
                                                                  }.AsImmutable

                                                            : new HTTPResponse.Builder(Request) {
                                                                      HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                                      Server                     = HTTPServer.DefaultServerName,
                                                                      Date                       = Timestamp.Now,
                                                                      AccessControlAllowOrigin   = "*",
                                                                      AccessControlAllowMethods  = "ADD, GET",
                                                                      AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                      ContentType                = HTTPContentType.JSON_UTF8,
                                                                      Content                    = JSONObject.Create(
                                                                                                       new JProperty("description", errorString)
                                                                                                   ).ToUTF8Bytes()
                                                                  }.AsImmutable;

                                             }
                                             catch (Exception e)
                                             {
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.InternalServerError,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "ADD, GET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", "Could not fetch the requestes API keys! " + e.Message)
                                                                                         ).ToUTF8Bytes(),
                                                            Connection                 = "close",
                                                            Vary                       = "Accept"
                                                        }.AsImmutable;
                                             }

            });

            #endregion

            #region DELETE      ~/users/{UserId}/APIKeys/{APIKeyId}

            // ---------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:2100/users/ahzf/APIKeys/abcdefgh
            // ---------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "users/{UserId}/APIKeys/{APIKeyId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             try
                                             {

                                                 #region Get HTTP user and its organizations

                                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                                 if (!TryGetHTTPUser(Request,
                                                                     out User                   HTTPUser,
                                                                     out HashSet<Organization>  HTTPOrganizations,
                                                                     out HTTPResponse.Builder   errorResponse,
                                                                     Recursive: true))
                                                 {
                                                     return errorResponse;
                                                 }

                                                 #endregion

                                                 #region Check UserId URL parameter

                                                 if (!Request.ParseUser(this,
                                                                        out User_Id?  UserId,
                                                                        out User      User,
                                                                        out           errorResponse))
                                                 {
                                                     return errorResponse;
                                                 }

                                                 #endregion

                                                 #region Get API key

                                                 if (Request.ParsedURLParameters.Length < 1)
                                                 {
                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "DELETE",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description", "Missing API key!")
                                                                                             ).ToUTF8Bytes(),
                                                                Connection                 = "close",
                                                                Vary                       = "Accept"
                                                            };
                                                 }

                                                 var apiKeyId = APIKey_Id.TryParse(Request.ParsedURLParameters[0]);

                                                 if (!apiKeyId.HasValue || apiKeyId.Value.IsNullOrEmpty)
                                                 {
                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "DELETE",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description", "Invalid API key!")
                                                                                             ).ToUTF8Bytes(),
                                                                Connection                 = "close",
                                                                Vary                       = "Accept"
                                                            };
                                                 }

                                                 if (!TryGetAPIKey(apiKeyId.Value, out APIKey apiKeyInfo))
                                                 {
                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "DELETE",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description", "Unknown API key!")
                                                                                             ).ToUTF8Bytes(),
                                                                Connection                 = "close",
                                                                Vary                       = "Accept"
                                                            };
                                                 }

                                                 #endregion

                                                 #region Validate user

                                                 if (apiKeyInfo.User != User || (HTTPUser != User && !CanImpersonate(HTTPUser, User)))
                                                 {
                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.Forbidden,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "DELETE",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description", "This operation is not allowed!")
                                                                                             ).ToUTF8Bytes(),
                                                                Connection                 = "close",
                                                                Vary                       = "Accept"
                                                            }.AsImmutable;
                                                 }

                                                 #endregion


                                                 await RemoveAPIKey(apiKeyInfo,
                                                                    null,
                                                                    Request.EventTrackingId,
                                                                    HTTPUser.Id);


                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.OK,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "DELETE",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = apiKeyInfo.ToJSON().ToUTF8Bytes(),
                                                            Connection                 = "close",
                                                            Vary                       = "Accept"
                                                        }.AsImmutable;

                                             }
                                             catch (Exception e)
                                             {
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.InternalServerError,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "DELETE",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", "Could not delete the requested API key! " + e.Message)
                                                                                         ).ToUTF8Bytes(),
                                                            Connection                 = "close",
                                                            Vary                       = "Accept"
                                                        }.AsImmutable;
                                             }

            });

            #endregion

            #endregion

            #region ~/userGroups

            #region GET         ~/userGroups

            #region HTML

            // -------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/userGroups
            // -------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "userGroups",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its users

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.OK,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "GET",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.HTML_UTF8,
                                                         Content                    = MixWithHTMLTemplate("user.userGroups.shtml").ToUTF8Bytes(),
                                                         Connection                 = "close",
                                                         Vary                       = "Accept"
                                                     }.AsImmutable);

                                         });

            #endregion

            #region JSON

            // ------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/userGroups
            // ------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "userGroups",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Try to get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive: true);

                                             #endregion


                                             var withMetadata           = Request.QueryString.GetBoolean("withMetadata", false);
                                             var matchFilter            = Request.QueryString.CreateStringFilter<UserGroup>("match",
                                                                                                                            (group, include) => group.Id.ToString().IndexOf(include) >= 0 ||
                                                                                                                                                group.Name.       Matches(include, IgnoreCase: true) ||
                                                                                                                                                group.Description.Matches(include, IgnoreCase: true));

                                             var skip                   = Request.QueryString.GetUInt64 ("skip");
                                             var take                   = Request.QueryString.GetUInt64 ("take");

                                             var includeCryptoHash      = Request.QueryString.GetBoolean("includeCryptoHash", true);

                                             //var expand                 = Request.QueryString.GetStrings("expand");
                                             //var expandTags             = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             var filteredUserGroups     = _UserGroups.Values.
                                                                              //Where         (userGroup => userGroup.Id.ToString() != "Admins").
                                                                              Where         (matchFilter).
                                                                              OrderBy       (userGroup => userGroup.Name.FirstText()).
                                                                              ToArray();

                                             var filteredCount          = filteredUserGroups.ULongCount();
                                             var totalCount             = HTTPOrganizations.ULongCount();

                                             var JSONResults            = filteredUserGroups.
                                                                              ToJSON(skip,
                                                                                     take,
                                                                                     true, //Embedded
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     GetUserGroupSerializator(Request, HTTPUser),
                                                                                     includeCryptoHash);


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode                = HTTPStatusCode.OK,
                                                     Server                        = HTTPServer.DefaultServerName,
                                                     Date                          = Timestamp.Now,
                                                     AccessControlAllowOrigin      = "*",
                                                     AccessControlAllowMethods     = "GET, COUNT, OPTIONS",
                                                     AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                     ETag                          = "1",
                                                     ContentType                   = HTTPContentType.JSON_UTF8,
                                                     Content                       = withMetadata
                                                                                         ? JSONObject.Create(
                                                                                               new JProperty("totalCount",     totalCount),
                                                                                               new JProperty("filteredCount",  filteredCount),
                                                                                               new JProperty("userGroups",     JSONResults)
                                                                                           ).ToUTF8Bytes()
                                                                                         : JSONResults.ToUTF8Bytes(),
                                                     X_ExpectedTotalNumberOfItems  = filteredCount,
                                                     Connection                    = "close",
                                                     Vary                          = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion


            #region GET         ~/userGroups/{UserGroupId}

            #region HTML

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/userGroups/{UserGroupId}
            // --------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "userGroups/{UserGroupId}",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its users

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.OK,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "GET",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.HTML_UTF8,
                                                         Content                    = MixWithHTMLTemplate("user.userGroup.shtml").ToUTF8Bytes(),
                                                         Connection                 = "close",
                                                         Vary                       = "Accept"
                                                     }.AsImmutable);

                                         });

            #endregion

            #region JSON

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/userGroups/{UserGroupId}
            // --------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "userGroups/{UserGroupId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive: true);

                                             #endregion

                                             #region Check UserGroupId URL parameter

                                             Request.ParseUserGroup(this,
                                                                    out UserGroup_Id?         UserGroupId,
                                                                    out UserGroup             UserGroup,
                                                                    out HTTPResponse.Builder  HTTPResponse);

                                             #endregion


                                             if (UserGroup != null)
                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode              = HTTPStatusCode.OK,
                                                         Server                      = HTTPServer.DefaultServerName,
                                                         Date                        = Timestamp.Now,
                                                         AccessControlAllowOrigin    = "*",
                                                         AccessControlAllowMethods   = "GET, SET",
                                                         AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                         ContentType                 = HTTPContentType.HTML_UTF8,
                                                         Content                     = UserGroup.ToJSON().ToUTF8Bytes(),
                                                         Connection                  = "close",
                                                         Vary                        = "Accept"
                                                     }.AsImmutable);


                                             return Task.FromResult(
                                                              new HTTPResponse.Builder(Request) {
                                                                        HTTPStatusCode             = HTTPStatusCode.Unauthorized,
                                                                        Server                     = HTTPServer.DefaultServerName,
                                                                        Date                       = Timestamp.Now,
                                                                        AccessControlAllowOrigin   = "*",
                                                                        AccessControlAllowMethods  = "GET, SET",
                                                                        AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                        Connection                 = "close"
                                                                    }.AsImmutable);

                                         });

            #endregion

            #endregion

            #endregion


            #region ~/organizations

            #region GET         ~/organizations

            #region JSON

            // ---------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/organizations
            // ---------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Try to get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive: true);

                                             #endregion


                                             var withMetadata            = Request.QueryString.GetBoolean("withMetadata", false);
                                             var includeFilter           = Request.QueryString.CreateStringFilter<Organization>("match",
                                                                                                                                (organization, include) => organization.Id.ToString().IndexOf(include)               > 0 ||
                                                                                                                                                           organization.Name.         Matches(include, IgnoreCase: true) ||
                                                                                                                                                           organization.Description.  Matches(include, IgnoreCase: true));

                                             var skip                    = Request.QueryString.GetUInt64 ("skip");
                                             var take                    = Request.QueryString.GetUInt64 ("take");

                                             var includeCryptoHash       = Request.QueryString.GetBoolean("includeCryptoHash", true);

                                             var expand                  = Request.QueryString.GetStrings("expand");
                                             var expandMembers           = expand.ContainsIgnoreCase("members")           ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandParents           = expand.ContainsIgnoreCase("parents")           ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandSubOrganizations  = expand.ContainsIgnoreCase("subOrganizations")  ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandTags              = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             var filteredOrganizations   = HTTPOrganizations.
                                                                               OrderBy(organization => organization.Name.FirstText()).
                                                                               Where(includeFilter).
                                                                               ToArray();

                                             var filteredCount           = filteredOrganizations.ULongCount();
                                             var totalCount              = HTTPOrganizations.ULongCount();

                                             var JSONResults             = filteredOrganizations.
                                                                               ToJSON(skip,
                                                                                      take,
                                                                                      false, //Embedded
                                                                                      expandMembers,
                                                                                      expandParents,
                                                                                      expandSubOrganizations,
                                                                                      expandTags,
                                                                                      GetOrganizationSerializator(Request, HTTPUser),
                                                                                      includeCryptoHash);


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode                 = HTTPStatusCode.OK,
                                                     Server                         = HTTPServer.DefaultServerName,
                                                     Date                           = Timestamp.Now,
                                                     AccessControlAllowOrigin       = "*",
                                                     AccessControlAllowMethods      = "OPTIONS, GET, COUNT, ADD",
                                                     AccessControlAllowHeaders      = "Content-Type, Accept, Authorization",
                                                     ETag                           = "1",
                                                     ContentType                    = HTTPContentType.JSON_UTF8,
                                                     Content                        = withMetadata
                                                                                          ? JSONObject.Create(
                                                                                                new JProperty("totalCount",     totalCount),
                                                                                                new JProperty("filteredCount",  filteredCount),
                                                                                                new JProperty("organizations",  JSONResults)
                                                                                            ).ToUTF8Bytes()
                                                                                          : JSONResults.ToUTF8Bytes(),
                                                     X_ExpectedTotalNumberOfItems   = filteredCount,
                                                     Connection                     = "close",
                                                     Vary                           = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region HTML

            // ----------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/organizations
            // ----------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.OK,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "OPTIONS, GET, COUNT, ADD",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.HTML_UTF8,
                                                         Content                    = MixWithHTMLTemplate("organization.organizations.shtml").ToUTF8Bytes(),
                                                         Connection                 = "close",
                                                         Vary                       = "Accept"
                                                     }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region COUNT       ~/organizations

            // ------------------------------------------------------------------------------------
            // curl -v -X COUNT -H "Accept: application/json" http://127.0.0.1:2000/organizations
            // ------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.COUNT,
                                         URLPathPrefix + "organizations",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive: true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "OPTIONS, GET, COUNT, ADD",
                                                     AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                     ETag                       = "1",
                                                     ContentType                = HTTPContentType.JSON_UTF8,
                                                     Content                    = JSONObject.Create(
                                                                                      new JProperty("count", Organizations.ULongCount())
                                                                                  ).ToUTF8Bytes(),
                                                     Connection                 = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region ADD         ~/organizations

            // ---------------------------------------------------------------------------------------------
            // curl -v -X Add \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //              \"@context\" :             \"https://opendata.social/contexts/usersAPI/user+json\", \
            //              \"name\" :                 { \"deu\" : \"ACME Inc.\" },\
            //              \"description\" :          { \"deu\" : \"Testing123!\" },\
            //              \"parentOrganization\" :   \"GraphDefined\", \
            //              \"address\" :         { \
            //                                      \"country\" :      \"Germany\",
            //                                      \"postalCode\" :   \"00749\",
            //                                      \"city\" :         { \"deu\": \"Jena\" },
            //                                      \"street\" :       \"Biberweg 18\",
            //                                      \"houseNumber\" :  \"18\",
            //                                      \"floorLevel\" :   \"2\"
            //                                    }, \
            //              \"privacyLevel\" :    \"World\" \
            //          }" \
            //      http://127.0.0.1:2000/organizations
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.ADD,
                                         URLPathPrefix + "organizations",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:  AddOrganizationHTTPRequest,
                                         HTTPResponseLogger: AddOrganizationHTTPResponse,
                                         HTTPDelegate:       async Request => {

                                             try
                                             {

                                                 #region Get HTTP user and its organizations

                                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                                 if (!TryGetHTTPUser(Request,
                                                                     out User                   HTTPUser,
                                                                     out HashSet<Organization>  HTTPOrganizations,
                                                                     out HTTPResponse.Builder   Response,
                                                                     AccessLevel:               Access_Levels.ReadWrite,
                                                                     Recursive:                 true))
                                                 {
                                                     return Response;
                                                 }

                                                 #endregion

                                                 #region Parse JSON and create the new child organization...

                                                 if (!Request.TryParseJObjectRequestBody(out JObject JSONObj, out HTTPResponse.Builder HTTPResponse))
                                                     return HTTPResponse;

                                                 if (!Organization.TryParseJSON(JSONObj,
                                                                                out Organization    newOrganization,
                                                                                out String          ErrorResponse,
                                                                                OrganizationIdURL:  Organization_Id.Random()))
                                                 {
                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                                Server                      = HTTPServer.DefaultServerName,
                                                                Date                        = Timestamp.Now,
                                                                AccessControlAllowOrigin    = "*",
                                                                AccessControlAllowMethods   = "OPTIONS, GET, COUNT, ADD",
                                                                AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                                ContentType                 = HTTPContentType.JSON_UTF8,
                                                                Content                     = JSONObject.Create(
                                                                                                  new JProperty("description", ErrorResponse)
                                                                                              ).ToUTF8Bytes(),
                                                                Connection                  = "close"
                                                            }.AsImmutable;
                                                 }

                                                 #endregion

                                                 #region Parse parent organization

                                                 if (!JSONObj.ParseMandatory("parentOrganization",
                                                                             "parent organization",
                                                                             HTTPServer.DefaultHTTPServerName,
                                                                             Organization_Id.TryParse,
                                                                             out Organization_Id ParentOrganizationId,
                                                                             Request,
                                                                             out HTTPResponse))
                                                 {
                                                     return HTTPResponse;
                                                 }

                                                 if (!_Organizations.TryGetValue(ParentOrganizationId, out Organization ParentOrganization))
                                                 {

                                                     return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = "OPTIONS, GET, COUNT, ADD",
                                                             AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                              new JProperty("description",  "Unknown parent organization!")
                                                                                          ).ToUTF8Bytes(),
                                                             Connection                 = "close"
                                                         }.AsImmutable;

                                                 }

                                                 #endregion


                                                 var result = await AddOrganization(newOrganization,
                                                                                    ParentOrganization,
                                                                                    null,
                                                                                    Request.EventTrackingId,
                                                                                    HTTPUser.Id);


                                                 return result?.IsSuccess == true

                                                            ? new HTTPResponse.Builder(Request) {
                                                                  HTTPStatusCode              = HTTPStatusCode.Created,
                                                                  Server                      = HTTPServer.DefaultServerName,
                                                                  Date                        = Timestamp.Now,
                                                                  AccessControlAllowOrigin    = "*",
                                                                  AccessControlAllowMethods   = "OPTIONS, GET, COUNT, ADD",
                                                                  AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                                  ContentType                 = HTTPContentType.JSON_UTF8,
                                                                  Content                     = result.Organization.ToJSON().ToUTF8Bytes(),
                                                                  Connection                  = "close"
                                                              }.AsImmutable

                                                            : new HTTPResponse.Builder(Request) {
                                                                  HTTPStatusCode              = HTTPStatusCode.BadRequest,
                                                                  Server                      = HTTPServer.DefaultServerName,
                                                                  Date                        = Timestamp.Now,
                                                                  AccessControlAllowOrigin    = "*",
                                                                  AccessControlAllowMethods   = "OPTIONS, GET, COUNT, ADD",
                                                                  AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                                  ContentType                 = HTTPContentType.JSON_UTF8,
                                                                  Content                     = result.ToJSON().ToUTF8Bytes(),
                                                                  Connection                  = "close"
                                                              }.AsImmutable;

                                             }
                                             catch (Exception e)
                                             {
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.InternalServerError,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "OPTIONS, GET, COUNT, ADD",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description",  "Could not create the given organization! " + e.Message)
                                                                                         ).ToUTF8Bytes(),
                                                            Connection                 = "close"
                                                        }.AsImmutable;
                                             }

                                         });

            #endregion


            #region GET         ~/organizations/{OrganizationId}

            #region JSON

            // -------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/organizations/214080158
            // -------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations/{OrganizationId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Try to get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive: true);

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion

                                             var showMgt                 = Request.QueryString.GetBoolean("showMgt", false);

                                             var expand                  = Request.QueryString.GetStrings("expand");
                                             var expandMembers           = expand.ContainsIgnoreCase("members")           ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandParents           = expand.ContainsIgnoreCase("parents")           ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandSubOrganizations  = expand.ContainsIgnoreCase("subOrganizations")  ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandTags              = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             var includeCryptoHash       = Request.QueryString.GetBoolean("includeCryptoHash", true);

                                             return Task.FromResult(
                                                        (//Organization.PrivacyLevel == PrivacyLevel.Private &&
                                                         !HTTPOrganizations.Contains(Organization))

                                                            ? new HTTPResponse.Builder(Request) {
                                                                  HTTPStatusCode             = HTTPStatusCode.Unauthorized,
                                                                  Server                     = HTTPServer.DefaultServerName,
                                                                  Date                       = Timestamp.Now,
                                                                  AccessControlAllowOrigin   = "*",
                                                                  AccessControlAllowMethods  = "GET, EXISTS",
                                                                  AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                  Connection                 = "close"
                                                              }.AsImmutable

                                                            : new HTTPResponse.Builder(Request) {
                                                                  HTTPStatusCode             = HTTPStatusCode.OK,
                                                                  Server                     = HTTPServer.DefaultServerName,
                                                                  Date                       = Timestamp.Now,
                                                                  AccessControlAllowOrigin   = "*",
                                                                  AccessControlAllowMethods  = "GET, EXISTS",
                                                                  AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                  ContentType                = HTTPContentType.JSON_UTF8,
                                                                  Content                    = (showMgt == true
                                                                                                    ? new OrganizationInfo2(Organization,
                                                                                                                            HTTPUser).ToJSON(false,
                                                                                                                                             expandMembers,
                                                                                                                                             expandParents,
                                                                                                                                             expandSubOrganizations,
                                                                                                                                             expandTags,
                                                                                                                                             includeCryptoHash)
                                                                                                    : Organization.ToJSON(false,
                                                                                                                          expandMembers,
                                                                                                                          expandParents,
                                                                                                                          expandSubOrganizations,
                                                                                                                          expandTags,
                                                                                                                          includeCryptoHash)).ToUTF8Bytes(),
                                                                  Connection                 = "close",
                                                                  Vary                       = "Accept"
                                                              }.AsImmutable);

                                         });

            #endregion

            #region HTML

            // ------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/organizations/GraphDefined
            // ------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations/{OrganizationId}",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             if (Organization != null && HTTPOrganizations.Contains(Organization))
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode              = HTTPStatusCode.OK,
                                                         Server                      = HTTPServer.DefaultServerName,
                                                         Date                        = Timestamp.Now,
                                                         AccessControlAllowOrigin    = "*",
                                                         AccessControlAllowMethods   = "GET",
                                                         AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                         ContentType                 = HTTPContentType.HTML_UTF8,
                                                         Content                     = MixWithHTMLTemplate("organization.organization.shtml").ToUTF8Bytes(),
                                                         Connection                  = "close",
                                                         Vary                        = "Accept"
                                                     }.AsImmutable);

                                             }

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region EXISTS      ~/organizations/{OrganizationId}

            // ---------------------------------------------------------
            // curl -v -X EXISTS http://127.0.0.1:2000/organizations/7
            // ---------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.EXISTS,
                                         URLPathPrefix + "organizations/{OrganizationId}",
                                         HTTPDelegate: Request => {

                                             #region Try to get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive: true);

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.OK,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "GET, EXISTS",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                Connection                 = "close"
                                                            }.AsImmutable);

                                         });

            #endregion

            #region ADD         ~/organizations/{organizationId}

            // ---------------------------------------------------------------------------------------------
            // curl -v -X ADD \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //              \"@id\" :             \"214080158\", \
            //              \"@context\" :        \"https://opendata.social/contexts/usersAPI/user+json\", \
            //              \"description\" :     { \"deu\" : \"Test AED in Erlangen Raum Yavin 4\" },\
            //              \"dataLicenseIds\" :  [ \"ODbL\" ],\
            //              \"ownerId\" :         \"Organization\", \
            //              \"address\" :         { \
            //                                      \"country\" :      \"Germany\",
            //                                      \"postalCode\" :   \"91052\",
            //                                      \"city\" :         { \"deu\": \"Erlangen\" },
            //                                      \"street\" :       \"Henkestraße\",
            //                                      \"houseNumber\" :  \"91\",
            //                                      \"floorLevel\" :   \"1\"
            //                                    }, \
            //              \"geoLocation\" :     { \"lat\": 49.594760, \"lng\": 11.019356 }, \
            //              \"privacyLevel\" :    \"Public\" \
            //          }" \
            //      http://127.0.0.1:2000/users/214080158
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.ADD,
                                         URLPathPrefix + "organizations/{organizationId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:  AddOrganizationHTTPRequest,
                                         HTTPResponseLogger: AddOrganizationHTTPResponse,
                                         HTTPDelegate:       async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return Response;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganizationId(this,
                                                                              out Organization_Id?      OrganizationIdURL,
                                                                              out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Parse JSON and create the new child organization...

                                             if (!Request.TryParseJObjectRequestBody(out JObject JSONObj, out HTTPResponse))
                                                 return HTTPResponse;

                                             if (!Organization.TryParseJSON(JSONObj,
                                                                            out Organization  NewChildOrganization,
                                                                            out String        ErrorResponse,
                                                                            OrganizationIdURL))
                                             {
                                                 return new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                        Server                     = HTTPServer.DefaultServerName,
                                                        Date                       = Timestamp.Now,
                                                        AccessControlAllowOrigin   = "*",
                                                        AccessControlAllowMethods  = "GET, SET",
                                                        AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                        ContentType                = HTTPContentType.JSON_UTF8,
                                                        Content                    = JSONObject.Create(
                                                                                         new JProperty("description",  "Could not parse the given child organization data!")
                                                                                     ).ToUTF8Bytes()
                                                    }.AsImmutable;
                                             }

                                             #endregion

                                             // {
                                             //     "@id":                             newChildOrganizationId,
                                             //     "@context":                        "https://opendata.social/contexts/UsersAPI+json/organization",
                                             //     "parentOrganization":              organization["@id"],
                                             //     "name":                            { "eng": newChildOrganizationName != "" ? newChildOrganizationName : newChildOrganizationId },
                                             //     "admins": [{
                                             //         "@id":       SignInUser,
                                             //         "@context":  "https://opendata.social/contexts/usersAPI/user+json",
                                             //         "name":      Username,
                                             //         "email":     UserEMail
                                             //     }],
                                             //     "members":                         [],
                                             //     "youAreMember":                    true,
                                             //     "youCanAddMembers":                true,
                                             //     "youCanCreateChildOrganizations":  true,
                                             //     "childs":                          []
                                             // }

                                             #region Parse parent organization

                                             if (!JSONObj.ParseMandatory("parentOrganization",
                                                                        "parent organization",
                                                                        HTTPServer.DefaultHTTPServerName,
                                                                        Organization_Id.TryParse,
                                                                        out Organization_Id ParentOrganizationId,
                                                                        Request,
                                                                        out HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             if (!_TryGetOrganization(ParentOrganizationId, out Organization ParentOrganization))
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "GET, SET",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.JSON_UTF8,
                                                         Content                    = JSONObject.Create(
                                                                                             new JProperty("description",  "Unknown parent organization!")
                                                                                         ).ToUTF8Bytes()
                                                     }.AsImmutable;

                                             }

                                             #endregion

                                             #region Parse admins

                                             if (!JSONObj.ParseMandatory("admins",
                                                                         "organization admins",
                                                                         HTTPServer.DefaultHTTPServerName,
                                                                         out JArray AdminsJSON,
                                                                         Request,
                                                                         out HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }


                                             User Admin      = null;
                                             var Admins      = new List<User>();
                                             var AdminNames  = AdminsJSON.Select(admin => (admin as JObject)).
                                                                         Where(admin => admin != null).
                                                                         Select(admin => User_Id.TryParse(admin["@id"].Value<String>())).
                                                                         ToArray();

                                             foreach (var admin in AdminNames)
                                             {

                                                 if (!admin.HasValue)
                                                 {

                                                     return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = "GET, SET",
                                                             AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                                 new JProperty("description",  "Invalid admin user '" + admin.Value  + "'!")
                                                                                             ).ToUTF8Bytes()
                                                         }.AsImmutable;

                                                 }

                                                 Admin = GetUser(admin.Value);

                                                 if (Admin == null)
                                                 {

                                                     return new HTTPResponse.Builder(Request) {
                                                             HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                             Server                     = HTTPServer.DefaultServerName,
                                                             Date                       = Timestamp.Now,
                                                             AccessControlAllowOrigin   = "*",
                                                             AccessControlAllowMethods  = "GET, SET",
                                                             AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                             ContentType                = HTTPContentType.JSON_UTF8,
                                                             Content                    = JSONObject.Create(
                                                                                                 new JProperty("description",  "Unknown admin user '" + admin.Value + "'!")
                                                                                             ).ToUTF8Bytes()
                                                         }.AsImmutable;

                                                 }

                                                 Admins.Add(Admin);

                                             }

                                             #endregion


                                             try
                                             {

                                                 var result = await AddOrganization(new Organization(NewChildOrganization.Id,
                                                                                                     NewChildOrganization.Name,
                                                                                                     NewChildOrganization.Description
                                                                                                     //Website,
                                                                                                     //EMail,
                                                                                                     //Telephone,
                                                                                                     //Address,
                                                                                                     //GeoLocation,
                                                                                                     //Tags,
                                                                                                     //IsDisabled,
                                                                                                     //DataSource: DataSource
                                                                                                     ),
                                                                                    ParentOrganization,
                                                                                    async (_organization, _eventTrackingId) => {

                                                                                        foreach (var admin in Admins)
                                                                                            await _AddUserToOrganization(admin,
                                                                                                                         User2OrganizationEdgeLabel.IsAdmin,
                                                                                                                         _organization);

                                                                                    },
                                                                                    Request.EventTrackingId,
                                                                                    HTTPUser.Id);

                                                 return new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode              = HTTPStatusCode.Created,
                                                         Server                      = HTTPServer.DefaultServerName,
                                                         Date                        = Timestamp.Now,
                                                         AccessControlAllowOrigin    = "*",
                                                         AccessControlAllowMethods   = "GET, SET",
                                                         AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                         Connection                  = "close"
                                                     }.AsImmutable;

                                             }
                                             catch (Exception e)
                                             {

                                                 return new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "GET, SET",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.JSON_UTF8,
                                                         Content                    = JSONObject.Create(
                                                                                             new JProperty("description",  "Could not create the given child organization! " + e.Message)
                                                                                         ).ToUTF8Bytes()
                                                     }.AsImmutable;

                                             }

                                         });

            #endregion

            #region SET         ~/organizations/{organizationId}

            // ---------------------------------------------------------------------------------------------
            // curl -v -X SET \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //              \"@id\" :             \"214080158\", \
            //              \"@context\" :        \"https://opendata.social/contexts/UsersAPI+json/organization\", \
            //              \"description\" :     { \"deu\" : \"Test AED in Erlangen Raum Yavin 4\" },\
            //              \"address\" :         { \
            //                                      \"country\" :      \"Germany\",
            //                                      \"postalCode\" :   \"91052\",
            //                                      \"city\" :         { \"deu\": \"Erlangen\" },
            //                                      \"street\" :       \"Henkestraße\",
            //                                      \"houseNumber\" :  \"91\",
            //                                      \"floorLevel\" :   \"1\"
            //                                    }, \
            //              \"geoLocation\" :     { \"lat\": 49.594760, \"lng\": 11.019356 }, \
            //              \"privacyLevel\" :    \"Public\" \
            //          }" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.SET,
                                         URLPathPrefix + "organizations/{organizationId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:  SetOrganizationHTTPRequest,
                                         HTTPResponseLogger: SetOrganizationHTTPResponse,
                                         HTTPDelegate:       async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return Response;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationIdURL,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Organization exists, but the given user is not an admin!

                                             if (Organization != null && !HTTPOrganizations.Contains(Organization))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET, SET, CHOWN",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                             #endregion




                                             #region Parse JSON and create the new child organization...

                                             if (!Request.TryParseJObjectRequestBody(out JObject JSONObj, out HTTPResponse))
                                                 return HTTPResponse;

                                             if (Organization.TryParseJSON(JSONObj,
                                                                           out Organization  UpdatedOrganization,
                                                                           out String        ErrorResponse,
                                                                           OrganizationIdURL))
                                             {

                                                 try
                                                 {

                                                     var _NewChildOrganization = await UpdateOrganization(UpdatedOrganization,
                                                                                                          CurrentUserId:  HTTPUser.Id);

                                                 }
                                                 catch (Exception e)
                                                 {

                                                     return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "GET, SET",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description",  "Could not create the given child organization! " + e.Message)
                                                                                             ).ToUTF8Bytes()
                                                            }.AsImmutable;

                                                 }

                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Created,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET, SET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            ContentType                 = HTTPContentType.JSON_UTF8,
                                                            Content                     = UpdatedOrganization.ToJSON().ToUTF8Bytes(),
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                             }

                                             #endregion

                                             return new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                        Server                     = HTTPServer.DefaultServerName,
                                                        Date                       = Timestamp.Now,
                                                        AccessControlAllowOrigin   = "*",
                                                        AccessControlAllowMethods  = "GET, SET",
                                                        AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                        ContentType                = HTTPContentType.JSON_UTF8,
                                                        Content                    = JSONObject.Create(
                                                                                         new JProperty("description",  "Could not parse the given child organization data!")
                                                                                     ).ToUTF8Bytes()
                                                    }.AsImmutable;

                                         });

            #endregion

            #region DELETE      ~/organizations/{organizationId}

            // ---------------------------------------------------------------------------------------------
            // curl -v -X DELETE \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "organizations/{organizationId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:  DeleteOrganizationHTTPRequest,
                                         HTTPResponseLogger: DeleteOrganizationHTTPResponse,
                                         HTTPDelegate:       async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Response;
                                             }

                                             #endregion

                                             #region Check Organization

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationIdURL,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             //ToDo: Check admin!

                                             if (!HTTPOrganizations.Contains(Organization))
                                                 return new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.Unauthorized,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "GET, SET, DELETE",
                                                                AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = JSONObject.Create(
                                                                                                 new JProperty("description",  "Unknown parent organization!")
                                                                                             ).ToUTF8Bytes()
                                                            }.AsImmutable;


                                             var result = await DeleteOrganization(Organization,
                                                                                   null,
                                                                                   Request.EventTrackingId,
                                                                                   HTTPUser.Id);

                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "GET, SET",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.FailedDependency,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "GET, SET",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              ContentType                 = HTTPContentType.JSON_UTF8,
                                                              Content                     = JSONObject.Create(
                                                                                                new JProperty("errorDescription",  result.ErrorDescription.ToJSON())
                                                                                            ).ToUTF8Bytes(),
                                                              Connection                  = "close"
                                                          }.AsImmutable;

                                     });

            #endregion


            #region GET         ~/organizations/{OrganizationId}/address

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/organizations/GraphDefined/address
            // --------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations/{OrganizationId}/address",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.ReadOnly,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             if (Organization != null && HTTPOrganizations.Contains(Organization))
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode              = HTTPStatusCode.OK,
                                                         Server                      = HTTPServer.DefaultServerName,
                                                         Date                        = Timestamp.Now,
                                                         AccessControlAllowOrigin    = "*",
                                                         AccessControlAllowMethods   = "GET",
                                                         AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                         ContentType                 = HTTPContentType.HTML_UTF8,
                                                         Content                     = MixWithHTMLTemplate("organization.address.shtml").ToUTF8Bytes(),
                                                         Connection                  = "close",
                                                         Vary                        = "Accept"
                                                     }.AsImmutable);

                                             }

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable);

                                         });

            #endregion

            #region GET         ~/organizations/{OrganizationId}/members

            // -----------------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/organizations/GraphDefined/members
            // -----------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations/{OrganizationId}/members",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.ReadOnly,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             if (Organization != null && HTTPOrganizations.Contains(Organization))
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode              = HTTPStatusCode.OK,
                                                         Server                      = HTTPServer.DefaultServerName,
                                                         Date                        = Timestamp.Now,
                                                         AccessControlAllowOrigin    = "*",
                                                         AccessControlAllowMethods   = "GET",
                                                         AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                         ContentType                 = HTTPContentType.HTML_UTF8,
                                                         Content                     = MixWithHTMLTemplate("organization.members.shtml").ToUTF8Bytes(),
                                                         Connection                  = "close",
                                                         Vary                        = "Accept"
                                                     }.AsImmutable);

                                             }

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable);

                                         });

            #endregion

            #region ADD         ~/organizations/{OrganizationId}/admins/{UserId}

            // -----------------------------------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/admins/ahzf
            // -----------------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.ADD,
                                         URLPathPrefix + "organizations/{OrganizationId}/admins/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Response.AsImmutable;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse.AsImmutable;
                                             }

                                             #endregion

                                             #region Get UserId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                             if (!userId.HasValue)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             if (!TryGetUser(userId.Value, out User user))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             var result = await AddUserToOrganization(user,
                                                                                      User2OrganizationEdgeLabel.IsAdmin,
                                                                                      Organization);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close",
                                                              Vary                        = "Accept"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close"
                                                          }.AsImmutable;

                                         });

            #endregion

            #region ADD         ~/organizations/{OrganizationId}/members/{UserId}

            // ------------------------------------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/members/ahzf
            // ------------------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.ADD,
                                         URLPathPrefix + "organizations/{OrganizationId}/members/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Response.AsImmutable;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse.AsImmutable;
                                             }

                                             #endregion

                                             #region Get UserId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                             if (!userId.HasValue)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             if (!TryGetUser(userId.Value, out User user))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             var result = await AddUserToOrganization(user,
                                                                                      User2OrganizationEdgeLabel.IsMember,
                                                                                      Organization);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close",
                                                              Vary                        = "Accept"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close"
                                                          }.AsImmutable;

                                         });

            #endregion

            #region ADD         ~/organizations/{OrganizationId}/guests/{UserId}

            // -----------------------------------------------------------------------------------------------------------
            // curl -v -X ADD -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/guests/ahzf
            // -----------------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.ADD,
                                         URLPathPrefix + "organizations/{OrganizationId}/guests/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Response.AsImmutable;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse.AsImmutable;
                                             }

                                             #endregion

                                             #region Get UserId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                             if (!userId.HasValue)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             if (!TryGetUser(userId.Value, out User user))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             var result = await AddUserToOrganization(user,
                                                                                      User2OrganizationEdgeLabel.IsGuest,
                                                                                      Organization);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close",
                                                              Vary                        = "Accept"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close"
                                                          }.AsImmutable;

                                         });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/_all/{UserId}

            // ------------------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/_all/ahzf
            // ------------------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "organizations/{OrganizationId}/_all/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Response.AsImmutable;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse.AsImmutable;
                                             }

                                             #endregion

                                             #region Get UserId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                             if (!userId.HasValue)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             if (!TryGetUser(userId.Value, out User user))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             var result = await RemoveUserFromOrganization(user,
                                                                                           Organization);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close",
                                                              Vary                        = "Accept"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close"
                                                          }.AsImmutable;

                                         });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/admins/{UserId}

            // --------------------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/admins/ahzf
            // --------------------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "organizations/{OrganizationId}/admins/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Response.AsImmutable;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse.AsImmutable;
                                             }

                                             #endregion

                                             #region Get UserId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                             if (!userId.HasValue)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             if (!TryGetUser(userId.Value, out User user))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             var result = await RemoveUserFromOrganization(user,
                                                                                           User2OrganizationEdgeLabel.IsAdmin,
                                                                                           Organization);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close",
                                                              Vary                        = "Accept"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close"
                                                          }.AsImmutable;

                                         });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/members/{UserId}

            // ---------------------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/members/ahzf
            // ---------------------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "organizations/{OrganizationId}/members/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Response.AsImmutable;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse.AsImmutable;
                                             }

                                             #endregion

                                             #region Get UserId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                             if (!userId.HasValue)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             if (!TryGetUser(userId.Value, out User user))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             var result = await RemoveUserFromOrganization(user,
                                                                                           User2OrganizationEdgeLabel.IsMember,
                                                                                           Organization);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close",
                                                              Vary                        = "Accept"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close"
                                                          }.AsImmutable;

                                         });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/guests/{UserId}

            // --------------------------------------------------------------------------------------------------------------
            // curl -v -X DELETE -H "Accept: application/json" http://127.0.0.1:3001/organizations/GraphDefined/guests/ahzf
            // --------------------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "organizations/{OrganizationId}/guests/{UserId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Response.AsImmutable;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return HTTPResponse.AsImmutable;
                                             }

                                             #endregion

                                             #region Get UserId URL parameter

                                             if (Request.ParsedURLParameters.Length < 2)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             var userId = User_Id.TryParse(Request.ParsedURLParameters[1]);

                                             if (!userId.HasValue)
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             if (!TryGetUser(userId.Value, out User user))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode  = HTTPStatusCode.NotFound,
                                                            Server          = HTTPServer.DefaultServerName,
                                                            Date            = Timestamp.Now,
                                                            Connection      = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             var result = await RemoveUserFromOrganization(user,
                                                                                           User2OrganizationEdgeLabel.IsGuest,
                                                                                           Organization);


                                             return result?.IsSuccess == true

                                                        ? new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.OK,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close",
                                                              Vary                        = "Accept"
                                                          }.AsImmutable

                                                        : new HTTPResponse.Builder(Request) {
                                                              HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                              Server                      = HTTPServer.DefaultServerName,
                                                              Date                        = Timestamp.Now,
                                                              AccessControlAllowOrigin    = "*",
                                                              AccessControlAllowMethods   = "ADD, DELETE",
                                                              AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                              Connection                  = "close"
                                                          }.AsImmutable;

                                         });

            #endregion

            #region GET         ~/organizations/{OrganizationId}/newMember

            // -----------------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/organizations/GraphDefined/newMember
            // -----------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations/{OrganizationId}/newMember",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             if (Organization != null && HTTPOrganizations.Contains(Organization))
                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode              = HTTPStatusCode.OK,
                                                         Server                      = HTTPServer.DefaultServerName,
                                                         Date                        = Timestamp.Now,
                                                         AccessControlAllowOrigin    = "*",
                                                         AccessControlAllowMethods   = "GET",
                                                         AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                         ContentType                 = HTTPContentType.HTML_UTF8,
                                                         Content                     = MixWithHTMLTemplate("organization.newMember.shtml").ToUTF8Bytes(),
                                                         Connection                  = "close",
                                                         Vary                        = "Accept"
                                                     }.AsImmutable);


                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable);

                                         });

            #endregion

            #region GET         ~/organizations/{OrganizationId}/subOrganizations

            // -----------------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/organizations/GraphDefined/subOrganizations
            // -----------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations/{OrganizationId}/subOrganizations",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.ReadOnly,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             if (Organization != null && HTTPOrganizations.Contains(Organization))
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode              = HTTPStatusCode.OK,
                                                         Server                      = HTTPServer.DefaultServerName,
                                                         Date                        = Timestamp.Now,
                                                         AccessControlAllowOrigin    = "*",
                                                         AccessControlAllowMethods   = "GET",
                                                         AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                         ContentType                 = HTTPContentType.HTML_UTF8,
                                                         Content                     = MixWithHTMLTemplate("organization.subOrganizations.shtml").ToUTF8Bytes(),
                                                         Connection                  = "close",
                                                         Vary                        = "Accept"
                                                     }.AsImmutable);

                                             }

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable);

                                         });

            #endregion

            #region GET         ~/organizations/{OrganizationId}/newSubOrganization

            // -----------------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/organizations/GraphDefined/newSubOrganization
            // -----------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations/{OrganizationId}/newSubOrganization",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             if (Organization != null && HTTPOrganizations.Contains(Organization))
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode              = HTTPStatusCode.OK,
                                                         Server                      = HTTPServer.DefaultServerName,
                                                         Date                        = Timestamp.Now,
                                                         AccessControlAllowOrigin    = "*",
                                                         AccessControlAllowMethods   = "GET",
                                                         AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                         ContentType                 = HTTPContentType.HTML_UTF8,
                                                         Content                     = MixWithHTMLTemplate("organization.newSubOrganization.shtml").ToUTF8Bytes(),
                                                         Connection                  = "close",
                                                         Vary                        = "Accept"
                                                     }.AsImmutable);

                                             }

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Unauthorized,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable);

                                         });

            #endregion


            #region GET         ~/organizations/{OrganizationId}/notifications

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/organizations/ahzf/notifications
            // --------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizations/{OrganizationId}/notifications",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive: true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?      OrganizationId,
                                                                            out Organization          Organization,
                                                                            out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode             = HTTPStatusCode.OK,
                                                        Server                     = HTTPServer.DefaultServerName,
                                                        Date                       = Timestamp.Now,
                                                        AccessControlAllowOrigin   = "*",
                                                        AccessControlAllowMethods  = "GET, SET",
                                                        AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                        ETag                       = "1",
                                                        ContentType                = HTTPContentType.JSON_UTF8,
                                                        Content                    = GetNotifications(Organization).ToUTF8Bytes(),
                                                        Connection                 = "close"
                                                    }.AsImmutable);

            });

            #endregion

            #region SET         ~/organizations/{OrganizationId}/notifications

            // ---------------------------------------------------------------------------------------------
            // curl -v -X SET \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //          }" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.SET,
                                         URLPathPrefix + "organizations/{OrganizationId}/notifications",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   SetOrganizationNotificationsRequest,
                                         HTTPResponseLogger:  SetOrganizationNotificationsResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   HTTPResponse,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?  OrganizationId,
                                                                            out Organization      Organization,
                                                                            out                   HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Has the current HTTP user the required access rights to update?

                                             if (!HTTPOrganizations.Contains(Organization))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET, SET, CHOWN",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             #region Parse JSON and new notifications...

                                             if (!Request.TryParseJArrayRequestBody(out JArray JSONArray, out HTTPResponse))
                                                 return HTTPResponse;

                                             String ErrorString = null;

                                             if (JSONArray.Count > 0)
                                             {

                                                 var JSONObjects = JSONArray.Cast<JObject>().ToArray();

                                                 if (!JSONObjects.Any())
                                                     goto fail;

                                                 String context = null;

                                                 foreach (var JSONObject in JSONObjects)
                                                 {

                                                     context = JSONObject["@context"]?.Value<String>();

                                                     if (context.IsNullOrEmpty())
                                                         goto fail;

                                                     switch (context)
                                                     {

                                                         case TelegramNotification.JSONLDContext:
                                                             if (!TelegramNotification.TryParse(JSONObject, out TelegramNotification telegramNotification))
                                                             {
                                                                 ErrorString = "Could not parse Telegram notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(Organization, telegramNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case TelegramGroupNotification.JSONLDContext:
                                                             if (!TelegramGroupNotification.TryParse(JSONObject, out TelegramGroupNotification telegramGroupNotification))
                                                             {
                                                                 ErrorString = "Could not parse Telegram group notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(Organization, telegramGroupNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case SMSNotification.JSONLDContext:
                                                             if (!SMSNotification.TryParse(JSONObject, out SMSNotification   smsNotification))
                                                             {
                                                                 ErrorString = "Could not parse sms notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(Organization, smsNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case HTTPSNotification.JSONLDContext:
                                                             if (!HTTPSNotification.TryParse(JSONObject, out HTTPSNotification httpsNotification))
                                                             {
                                                                 ErrorString = "Could not parse https notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(Organization, httpsNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case EMailNotification.JSONLDContext:
                                                             if (!EMailNotification.TryParse(JSONObject, out EMailNotification eMailNotification))
                                                             {
                                                                 ErrorString = "Could not parse e-mail notification!";
                                                                 goto fail;
                                                             }
                                                             await AddNotification(Organization, eMailNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         default:
                                                             goto fail;

                                                     }

                                                 }

                                             }

                                             goto goon;

                                             #region fail...

                                             fail:

                                             return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", ErrorString ?? "Invalid array of notifications!")
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             #endregion

                                             goon:

                                             #endregion


                                             return new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode              = HTTPStatusCode.OK,
                                                        Server                      = HTTPServer.DefaultServerName,
                                                        Date                        = Timestamp.Now,
                                                        AccessControlAllowOrigin    = "*",
                                                        AccessControlAllowMethods   = "GET, SET",
                                                        AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                        ContentType                 = HTTPContentType.JSON_UTF8,
                                                        Content                     = GetNotifications(HTTPUser).ToUTF8Bytes(),
                                                        Connection                  = "close"
                                                    }.AsImmutable;

                                         });

            #endregion

            #region DELETE      ~/organizations/{OrganizationId}/notifications

            // ---------------------------------------------------------------------------------------------
            // curl -v -X DELETE \
            //      -H "Accept:       application/json; charset=utf-8" \
            //      -H "Content-Type: application/json; charset=utf-8" \
            //      -d "{ \
            //          }" \
            //      http://127.0.0.1:2000/organizations/214080158
            // ---------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.DELETE,
                                         URLPathPrefix + "organizations/{OrganizationId}/notifications",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPRequestLogger:   DeleteOrganizationNotificationsRequest,
                                         HTTPResponseLogger:  DeleteOrganizationNotificationsResponse,
                                         HTTPDelegate:        async Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   HTTPResponse,
                                                                 AccessLevel:               Access_Levels.ReadWrite,
                                                                 Recursive:                 true))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Check OrganizationId URL parameter

                                             if (!Request.ParseOrganization(this,
                                                                            out Organization_Id?  OrganizationIdURL,
                                                                            out Organization      Organization,
                                                                            out                   HTTPResponse))
                                             {
                                                 return HTTPResponse;
                                             }

                                             #endregion

                                             #region Has the current HTTP user the required access rights to update?

                                             if (!HTTPOrganizations.Contains(Organization))
                                                 return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode              = HTTPStatusCode.Forbidden,
                                                            Server                      = HTTPServer.DefaultServerName,
                                                            Date                        = Timestamp.Now,
                                                            AccessControlAllowOrigin    = "*",
                                                            AccessControlAllowMethods   = "GET, SET, CHOWN",
                                                            AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                            Connection                  = "close"
                                                        }.AsImmutable;

                                             #endregion


                                             #region Parse JSON and new notifications...

                                             if (!Request.TryParseJArrayRequestBody(out JArray JSONArray, out HTTPResponse))
                                                 return HTTPResponse;

                                             String ErrorString = null;

                                             if (JSONArray.Count > 0)
                                             {

                                                 var JSONObjects = JSONArray.Cast<JObject>().ToArray();

                                                 if (!JSONObjects.Any())
                                                     goto fail;

                                                 String context = null;

                                                 foreach (var JSONObject in JSONObjects)
                                                 {

                                                     context = JSONObject["@context"]?.Value<String>();

                                                     if (context.IsNullOrEmpty())
                                                         goto fail;

                                                     switch (context)
                                                     {

                                                         case TelegramNotification.JSONLDContext:
                                                             if (!TelegramNotification.TryParse(JSONObject, out TelegramNotification telegramNotification))
                                                             {
                                                                 ErrorString = "Could not parse Telegram notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(Organization, telegramNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case TelegramGroupNotification.JSONLDContext:
                                                             if (!TelegramGroupNotification.TryParse(JSONObject, out TelegramGroupNotification telegramGroupNotification))
                                                             {
                                                                 ErrorString = "Could not parse Telegram group notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(Organization, telegramGroupNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case SMSNotification.JSONLDContext:
                                                             if (!SMSNotification.  TryParse(JSONObject, out SMSNotification   smsNotification))
                                                             {
                                                                 ErrorString = "Could not parse sms notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(Organization, smsNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case HTTPSNotification.JSONLDContext:
                                                             if (!HTTPSNotification.TryParse(JSONObject, out HTTPSNotification httpsNotification))
                                                             {
                                                                 ErrorString = "Could not parse https notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(Organization, httpsNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         case EMailNotification.JSONLDContext:
                                                             if (!EMailNotification.TryParse(JSONObject, out EMailNotification eMailNotification))
                                                             {
                                                                 ErrorString = "Could not parse e-mail notification!";
                                                                 goto fail;
                                                             }
                                                             await RemoveNotification(Organization, eMailNotification, Request.EventTrackingId, HTTPUser.Id);
                                                             break;

                                                         default:
                                                             goto fail;

                                                     }

                                                 }

                                             }

                                             goto goon;

                                             #region fail...

                                             fail:

                                             return new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.BadRequest,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("description", ErrorString ?? "Invalid array of notifications!")
                                                                                         ).ToUTF8Bytes()
                                                        }.AsImmutable;

                                             #endregion

                                             goon:

                                             #endregion


                                             return new HTTPResponse.Builder(Request) {
                                                        HTTPStatusCode              = HTTPStatusCode.OK,
                                                        Server                      = HTTPServer.DefaultServerName,
                                                        Date                        = Timestamp.Now,
                                                        AccessControlAllowOrigin    = "*",
                                                        AccessControlAllowMethods   = "GET, SET",
                                                        AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                        ContentType                 = HTTPContentType.JSON_UTF8,
                                                        Content                     = GetNotifications(HTTPUser).ToUTF8Bytes(),
                                                        Connection                  = "close"
                                                    }.AsImmutable;

                                         });

            #endregion

            #endregion

            #region ~/organizationGroups

            #region GET         ~/organizationGroups

            #region HTML

            // --------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/organizationGroups
            // --------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizationGroups",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP organization and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP organization is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.OK,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "GET",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.HTML_UTF8,
                                                         Content                    = MixWithHTMLTemplate("organization.organizationGroups.shtml").ToUTF8Bytes(),
                                                         Connection                 = "close",
                                                         Vary                       = "Accept"
                                                     }.AsImmutable);

                                         });

            #endregion

            #region JSON

            // --------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2000/organizationGroups
            // --------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "organizationGroups",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Try to get HTTP organization and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive: true);

                                             #endregion


                                             var withMetadata           = Request.QueryString.GetBoolean("withMetadata", false);
                                             var includeFilter          = Request.QueryString.CreateStringFilter<OrganizationGroup>("match",
                                                                                                                                    (group, include) => group.Id.ToString().IndexOf(include) >= 0 ||
                                                                                                                                                        group.Name.       Matches(include, IgnoreCase: true) ||
                                                                                                                                                        group.Description.Matches(include, IgnoreCase: true));

                                             var skip                   = Request.QueryString.GetUInt64 ("skip");
                                             var take                   = Request.QueryString.GetUInt64 ("take");

                                             var includeCryptoHash      = Request.QueryString.GetBoolean("includeCryptoHash", true);

                                             var expand                 = Request.QueryString.GetStrings("expand");
                                             //var expandTags             = expand.ContainsIgnoreCase("tags")              ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             var filteredGroups         = _OrganizationGroups.Values.
                                                                              Where         (includeFilter).
                                                                              OrderBy       (organization => organization.Name).
                                                                              ToArray();

                                             var filteredCount          = filteredGroups.ULongCount();
                                             var totalCount             = HTTPOrganizations.ULongCount();

                                             var JSONResults            = filteredGroups.
                                                                              ToJSON(skip,
                                                                                     take,
                                                                                     false, //Embedded
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     InfoStatus.ShowIdOnly,
                                                                                     GetOrganizationGroupSerializator(Request, HTTPUser),
                                                                                     includeCryptoHash);


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode                = HTTPStatusCode.OK,
                                                     Server                        = HTTPServer.DefaultServerName,
                                                     Date                          = Timestamp.Now,
                                                     AccessControlAllowOrigin      = "*",
                                                     AccessControlAllowMethods     = "GET, COUNT, OPTIONS",
                                                     AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                     ETag                          = "1",
                                                     ContentType                   = HTTPContentType.JSON_UTF8,
                                                     Content                       = withMetadata
                                                                                         ? JSONObject.Create(
                                                                                               new JProperty("totalCount",          totalCount),
                                                                                               new JProperty("filteredCount",       filteredCount),
                                                                                               new JProperty("organizationGroups",  JSONResults)
                                                                                           ).ToUTF8Bytes()
                                                                                         : JSONResults.ToUTF8Bytes(),
                                                     X_ExpectedTotalNumberOfItems  = filteredCount,
                                                     Connection                    = "close",
                                                     Vary                          = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion

            #endregion


            #region ~/notifications

            #region GET         ~/notifications

            #region JSON

            // ---------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/notifications
            // ---------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "notifications",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive: true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.OK,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONArray.Create(
                                                                                             GetNotificationMessages(HTTPUser).Select(notificationMessage => notificationMessage.ToJSON())
                                                                                         ).ToUTF8Bytes(),
                                                            Connection                 = "close",
                                                            Vary                       = "Accept"
                                                        }.AsImmutable);

            });

            #endregion

            #region HTML

            // ----------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/notifications
            // ----------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "notifications",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode              = HTTPStatusCode.OK,
                                                     Server                      = HTTPServer.DefaultServerName,
                                                     Date                        = Timestamp.Now,
                                                     AccessControlAllowOrigin    = "*",
                                                     AccessControlAllowMethods   = "GET",
                                                     AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                     ContentType                 = HTTPContentType.HTML_UTF8,
                                                     Content                     = MixWithHTMLTemplate("notification.messages.shtml").ToUTF8Bytes(),
                                                     Connection                  = "close",
                                                     Vary                        = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region GET         ~/notifications/{notificationId}

            // ------------------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/notifications/{notificationId}
            // ------------------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "notifications/{notificationId}",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Get notificationId URL parameter

                                             if (Request.ParsedURLParameters.Length < 1 ||
                                                 !UInt32.TryParse(Request.ParsedURLParameters[0], out UInt32 NotificationId))
                                             {

                                                 return Task.FromResult(
                                                            new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode  = HTTPStatusCode.BadRequest,
                                                                Server          = HTTPServer.DefaultServerName,
                                                                Date            = Timestamp.Now,
                                                                Connection      = "close"
                                                            }.AsImmutable);

                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode              = HTTPStatusCode.OK,
                                                     Server                      = HTTPServer.DefaultServerName,
                                                     Date                        = Timestamp.Now,
                                                     AccessControlAllowOrigin    = "*",
                                                     AccessControlAllowMethods   = "GET",
                                                     AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                     ContentType                 = HTTPContentType.HTML_UTF8,
                                                     Content                     = MixWithHTMLTemplate("notification.editNotification.shtml").ToUTF8Bytes(),
                                                     Connection                  = "close",
                                                     Vary                        = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region GET         ~/notificationSettings

            // ---------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/notificationSettings
            // ---------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "notificationSettings",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode              = HTTPStatusCode.OK,
                                                     Server                      = HTTPServer.DefaultServerName,
                                                     Date                        = Timestamp.Now,
                                                     AccessControlAllowOrigin    = "*",
                                                     AccessControlAllowMethods   = "GET",
                                                     AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                     ContentType                 = HTTPContentType.HTML_UTF8,
                                                     Content                     = MixWithHTMLTemplate("notification.settings.shtml").ToUTF8Bytes(),
                                                     Connection                  = "close",
                                                     Vary                        = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion


            #region GET         ~/newNotification

            #region JSON

            // -----------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:2100/newNotification
            // -----------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newNotification",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive: true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.OK,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = JSONObject.Create(
                                                                                             new JProperty("@context",  "https://opendata.social/contexts/UsersAPI/newNotification"),
                                                                                             new JProperty("user",      JSONObject.Create(

                                                                                                 new JProperty("name",  HTTPUser.EMail.OwnerName),
                                                                                                 new JProperty("email", HTTPUser.EMail.Address.ToString()),

                                                                                                 HTTPUser.MobilePhone.HasValue
                                                                                                     ? new JProperty("phoneNumber", HTTPUser.MobilePhone.Value.ToString())
                                                                                                     : null

                                                                                             )),
                                                                                             new JProperty("notificationGroups", new JArray(
                                                                                                  _NotificationGroups.Values.Select(notificationGroup => notificationGroup.ToJSON())
                                                                                             ))
                                                                                          ).ToUTF8Bytes(),
                                                            Connection                 = "close",
                                                            Vary                       = "Accept"
                                                        }.AsImmutable);

            });

            #endregion

            #region HTML

            // ----------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/newNotification
            // ----------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newNotification",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode              = HTTPStatusCode.OK,
                                                     Server                      = HTTPServer.DefaultServerName,
                                                     Date                        = Timestamp.Now,
                                                     AccessControlAllowOrigin    = "*",
                                                     AccessControlAllowMethods   = "GET",
                                                     AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                     ContentType                 = HTTPContentType.HTML_UTF8,
                                                     Content                     = MixWithHTMLTemplate("notification.editNotification.shtml").ToUTF8Bytes(),
                                                     Connection                  = "close",
                                                     Vary                        = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion

            #endregion


            #region ~/dashboard

            #region GET         ~/dashboard

            // ----------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/dashboard
            // ----------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "dashboard",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode              = HTTPStatusCode.OK,
                                                     Server                      = HTTPServer.DefaultServerName,
                                                     Date                        = Timestamp.Now,
                                                     AccessControlAllowOrigin    = "*",
                                                     AccessControlAllowMethods   = "GET",
                                                     AccessControlAllowHeaders   = "Content-Type, Accept, Authorization",
                                                     ContentType                 = HTTPContentType.HTML_UTF8,
                                                     Content                     = MixWithHTMLTemplate("dashboard.dashboard.shtml").ToUTF8Bytes(),
                                                     Connection                  = "close",
                                                     Vary                        = "Accept"
                                                 }.AsImmutable);

                                         }, AllowReplacement: URLReplacement.Allow);

            #endregion

            #endregion


            #region ~/newsPostings

            #region OPTIONS     ~/newsPostings

            // ---------------------------------------------------------
            // curl -X OPTIONS -v http://127.0.0.1:3001/newsPostings
            // ---------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.OPTIONS,
                                         URLPathPrefix + "newsPostings",
                                         HTTPDelegate: Request => {

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET, COUNT, SEARCH, OPTIONS",
                                                     AccessControlAllowHeaders  = "X-PINGOTHER, Content-Type, Accept, Authorization, X-App-Version",
                                                     Connection                 = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region GET         ~/newsPostings

            #region JSON

            // ------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/newsPostings
            // ------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newsPostings",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive:                 true);

                                             #endregion


                                             var withMetadata        = Request.QueryString.GetBoolean    ("withMetadata", false);
                                             var matchFilter         = Request.QueryString.CreateStringFilter<NewsPosting>("match",
                                                                                                                           (newsPosting, pattern) => newsPosting.Id.ToString().Contains(pattern) ||
                                                                                                                                                     newsPosting.Headline.Matches(pattern, IgnoreCase: true) ||
                                                                                                                                                     newsPosting.Text.    Matches(pattern, IgnoreCase: true));

                                             var from                = Request.QueryString.TryGetDateTime("from");
                                             var to                  = Request.QueryString.TryGetDateTime("to");
                                             var skip                = Request.QueryString.GetUInt64     ("skip");
                                             var take                = Request.QueryString.GetUInt64     ("take");

                                             var includeCryptoHash   = Request.QueryString.GetBoolean    ("includeCryptoHash", true);

                                             var expand              = Request.QueryString.GetStrings    ("expand");
                                             var expandTags          = expand.ContainsIgnoreCase("tags")     ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandAuthorId      = expand.ContainsIgnoreCase("authorId") ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             var now                 = Timestamp.Now;

                                             var allNews             = _NewsPostings.Values.
                                                                           Where(posting => posting.PublicationDate <= now).
                                                                           ToArray();
                                             var totalCount          = _NewsPostings.ULongCount();

                                             var filteredNews        = allNews.
                                                                           Where(posting => !from.HasValue || posting.PublicationDate >= from.Value).
                                                                           Where(posting => !to.  HasValue || posting.PublicationDate <  to.  Value).
                                                                           Where(matchFilter).
                                                                           ToArray();
                                             var filteredCount       = filteredNews.ULongCount();

                                             var JSONResults         = filteredNews.
                                                                           OrderByDescending(posting => posting.PublicationDate).
                                                                           ToJSON(skip,
                                                                                  take,
                                                                                  false, //Embedded
                                                                                  expandTags,
                                                                                  expandAuthorId,
                                                                                  GetNewsPostingSerializator(Request, HTTPUser),
                                                                                  includeCryptoHash);


                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode                = HTTPStatusCode.OK,
                                                            Server                        = HTTPServer.DefaultServerName,
                                                            Date                          = Timestamp.Now,
                                                            AccessControlAllowOrigin      = "*",
                                                            AccessControlAllowMethods     = "GET",
                                                            AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                            ContentType                   = HTTPContentType.JSON_UTF8,
                                                            Content                       = withMetadata
                                                                                                ? JSONObject.Create(
                                                                                                      new JProperty("totalCount",     totalCount),
                                                                                                      new JProperty("filteredCount",  filteredCount),
                                                                                                      new JProperty("newsPostings",   JSONResults)
                                                                                                  ).ToUTF8Bytes()
                                                                                                : JSONResults.ToUTF8Bytes(),
                                                            X_ExpectedTotalNumberOfItems  = filteredCount,
                                                            Connection                    = "close",
                                                            Vary                          = "Accept"
                                                        }.AsImmutable);

                                         });

            #endregion

            #region HTML

            // -----------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/newsPostings
            // -----------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newsPostings",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET",
                                                     AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                     ContentType                = HTTPContentType.HTML_UTF8,
                                                     Content                    = MixWithHTMLTemplate("newsPosting.newsPostings.shtml").ToUTF8Bytes(),
                                                     Connection                 = "close",
                                                     Vary                       = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region COUNT       ~/newsPostings

            // ---------------------------------------------------------------------------
            // curl -v -X COUNT -H "Accept: application/json" http://127.0.0.1:3001/newsPostings
            // ---------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.COUNT,
                                         URLPathPrefix + "newsPostings",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             var since  = Request.QueryString.GetDateTime("since");

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode                = HTTPStatusCode.OK,
                                                            Server                        = HTTPServer.DefaultServerName,
                                                            Date                          = Timestamp.Now,
                                                            AccessControlAllowOrigin      = "*",
                                                            AccessControlAllowMethods     = "GET",
                                                            AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                            ContentType                   = HTTPContentType.JSON_UTF8,
                                                            Content                       = JSONObject.Create(
                                                                                                new JProperty("count",
                                                                                                              _NewsPostings.Values.ULongCount(news => !since.HasValue || news.PublicationDate >= since.Value))
                                                                                            ).ToUTF8Bytes(),
                                                            Connection                    = "close"
                                                     }.AsImmutable);

                                         });

            #endregion


            #region OPTIONS          ~/newsPostings/{postingId}

            // -------------------------------------------------------------------
            // curl -X OPTIONS -v http://127.0.0.1:3001/newsPostings/214080158
            // -------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.OPTIONS,
                                         URLPathPrefix + "newsPostings/{postingId}",
                                         HTTPDelegate: Request => {

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET, COUNT, SEARCH, OPTIONS",
                                                     AccessControlAllowHeaders  = "X-PINGOTHER, Content-Type, Accept, Authorization, X-App-Version",
                                                     Connection                 = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region GET              ~/newsPostings/{postingId}

            #region JSON

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/newsPostings/214080158
            // --------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newsPostings/{postingId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Check NewsPostingId URI parameter

                                             if (!Request.ParseNewsPosting(this,
                                                                           out NewsPosting_Id?       NewsPostingId,
                                                                           out NewsPosting           NewsPosting,
                                                                           out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion


                                             var expand             = Request.QueryString.GetStrings("expand");
                                             var expandTags         = expand.ContainsIgnoreCase("tags")     ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandAuthorId     = expand.ContainsIgnoreCase("authorId") ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode             = HTTPStatusCode.OK,
                                                            Server                     = HTTPServer.DefaultServerName,
                                                            Date                       = Timestamp.Now,
                                                            AccessControlAllowOrigin   = "*",
                                                            AccessControlAllowMethods  = "GET, SET",
                                                            AccessControlAllowHeaders  = "X-PINGOTHER, Content-Type, Accept, Authorization, X-App-Version",
                                                            ETag                       = "1",
                                                            ContentType                = HTTPContentType.JSON_UTF8,
                                                            Content                    = GetNewsPostingSerializator(Request, HTTPUser)
                                                                                                            (NewsPosting,
                                                                                                             false, //Embedded
                                                                                                             expandTags,
                                                                                                             expandAuthorId).
                                                                                                         ToUTF8Bytes(),
                                                            Connection                 = "close",
                                                            Vary                       = "Accept"
                                                        }.AsImmutable);

                                         });

            #endregion

            #region HTML

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/newsPostings/214080158
            // --------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newsPostings/{postingId}",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check NewsPostingId URI parameter

                                             if (!Request.ParseNewsPosting(this,
                                                                           out NewsPosting_Id?       NewsPostingId,
                                                                           out NewsPosting           NewsPosting,
                                                                           out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET",
                                                     AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                     ContentType                = HTTPContentType.HTML_UTF8,
                                                     Content                    = MixWithHTMLTemplate("News.News.shtml").ToUTF8Bytes(),
                                                     Connection                 = "close",
                                                     Vary                       = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion

            #endregion

            #region ~/newsBanners

            #region OPTIONS     ~/newsBanners

            // ---------------------------------------------------------
            // curl -X OPTIONS -v http://127.0.0.1:3001/newsBanners
            // ---------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.OPTIONS,
                                         URLPathPrefix + "newsBanners",
                                         HTTPDelegate: Request => {

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET, COUNT, SEARCH, OPTIONS",
                                                     AccessControlAllowHeaders  = "X-PINGOTHER, Content-Type, Accept, Authorization, X-App-Version",
                                                     Connection                 = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region GET         ~/newsBanners

            #region JSON

            // ------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/newsBanners
            // ------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newsBanners",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive:                 true);

                                             #endregion


                                             var withMetadata        = Request.QueryString.GetBoolean    ("withMetadata", false);
                                             var matchFilter         = Request.QueryString.CreateStringFilter<NewsBanner>("match",
                                                                                                                          (newsBanner, pattern) => newsBanner.Id.ToString().Contains(pattern) ||
                                                                                                                                                   newsBanner.Text.Matches(pattern, IgnoreCase: true));

                                             var from                = Request.QueryString.TryGetDateTime("from");
                                             var to                  = Request.QueryString.TryGetDateTime("to");
                                             var skip                = Request.QueryString.GetUInt64     ("skip");
                                             var take                = Request.QueryString.GetUInt64     ("take");

                                             var includeCryptoHash   = Request.QueryString.GetBoolean    ("includeCryptoHash", true);

                                             var expand              = Request.QueryString.GetStrings    ("expand");
                                             var expandTags          = expand.ContainsIgnoreCase("tags")         ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandDataLicenses  = expand.ContainsIgnoreCase("dataLicenses") ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandOwnerId       = expand.ContainsIgnoreCase("ownerId")      ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             var now                 = Timestamp.Now;

                                             var allNews             = _NewsBanners.Values.
                                                                           ToArray();
                                             var totalCount          = _NewsBanners.ULongCount();

                                             var filteredNews        = allNews.
                                                                           Where(matchFilter).
                                                                           Where(banner => !from.HasValue || banner.StartTimestamp >= from.Value).
                                                                           Where(banner => !to.  HasValue || banner.EndTimestamp   <  to.  Value).
                                                                           ToArray();
                                             var filteredCount       = filteredNews.ULongCount();

                                             var JSONResults         = filteredNews.
                                                                           OrderByDescending(banner => banner.StartTimestamp).
                                                                           ToJSON(skip,
                                                                                  take,
                                                                                  false, //Embedded
                                                                                  expandTags,
                                                                                  expandOwnerId,
                                                                                  GetNewsBannerSerializator(Request, HTTPUser),
                                                                                  includeCryptoHash);


                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode                = HTTPStatusCode.OK,
                                                            Server                        = HTTPServer.DefaultServerName,
                                                            Date                          = Timestamp.Now,
                                                            AccessControlAllowOrigin      = "*",
                                                            AccessControlAllowMethods     = "GET",
                                                            AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                            ContentType                   = HTTPContentType.JSON_UTF8,
                                                            Content                       = withMetadata
                                                                                                ? JSONObject.Create(
                                                                                                      new JProperty("totalCount",     totalCount),
                                                                                                      new JProperty("filteredCount",  filteredCount),
                                                                                                      new JProperty("newsBanners",    JSONResults)
                                                                                                  ).ToUTF8Bytes()
                                                                                                : JSONResults.ToUTF8Bytes(),
                                                            X_ExpectedTotalNumberOfItems  = filteredCount,
                                                            Connection                    = "close",
                                                            Vary                          = "Accept"
                                                        }.AsImmutable);

                                         });

            #endregion

            #region HTML

            // -----------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/newsBanners
            // -----------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newsBanners",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET",
                                                     AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                     ContentType                = HTTPContentType.HTML_UTF8,
                                                     Content                    = MixWithHTMLTemplate("newsBanner.newsBanners.shtml").ToUTF8Bytes(),
                                                     Connection                 = "close",
                                                     Vary                       = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region COUNT       ~/newsBanners

            // ---------------------------------------------------------------------------
            // curl -v -X COUNT -H "Accept: application/json" http://127.0.0.1:3001/newsBanners
            // ---------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.COUNT,
                                         URLPathPrefix + "newsBanners",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             var since  = Request.QueryString.GetDateTime("since");

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode                = HTTPStatusCode.OK,
                                                            Server                        = HTTPServer.DefaultServerName,
                                                            Date                          = Timestamp.Now,
                                                            AccessControlAllowOrigin      = "*",
                                                            AccessControlAllowMethods     = "GET",
                                                            AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                            ContentType                   = HTTPContentType.JSON_UTF8,
                                                            Content                       = JSONObject.Create(
                                                                                                new JProperty("count",
                                                                                                              _NewsBanners.Values.ULongCount(news => !since.HasValue || news.StartTimestamp >= since.Value))
                                                                                            ).ToUTF8Bytes(),
                                                            Connection                    = "close"
                                                     }.AsImmutable);

                                         });

            #endregion


            #region OPTIONS          ~/newsBanners/{bannerId}

            // -------------------------------------------------------------------
            // curl -X OPTIONS -v http://127.0.0.1:3001/newsBanners/214080158
            // -------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.OPTIONS,
                                         URLPathPrefix + "newsBanners/{bannerId}",
                                         HTTPDelegate: Request => {

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET, COUNT, SEARCH, OPTIONS",
                                                     AccessControlAllowHeaders  = "X-PINGOTHER, Content-Type, Accept, Authorization, X-App-Version",
                                                     Connection                 = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region GET              ~/newsBanners/{bannerId}

            #region JSON

            // -----------------------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/newsBanners/214080158
            // -----------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newsBanners/{bannerId}",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Check NewsId URI parameter

                                             if (!Request.ParseNewsBanner(this,
                                                                          out NewsBanner_Id?        NewsBannerId,
                                                                          out NewsBanner            NewsBanner,
                                                                          out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             var includeCryptoHash   = Request.QueryString.GetBoolean("includeCryptoHash", true);

                                             var expand              = Request.QueryString.GetStrings("expand");
                                             var expandTags          = expand.ContainsIgnoreCase("tags")         ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandOwnerId       = expand.ContainsIgnoreCase("ownerId")      ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             return Task.FromResult(
                                                       new HTTPResponse.Builder(Request) {
                                                                HTTPStatusCode             = HTTPStatusCode.OK,
                                                                Server                     = HTTPServer.DefaultServerName,
                                                                Date                       = Timestamp.Now,
                                                                AccessControlAllowOrigin   = "*",
                                                                AccessControlAllowMethods  = "GET, SET",
                                                                AccessControlAllowHeaders  = "X-PINGOTHER, Content-Type, Accept, Authorization, X-App-Version",
                                                                ETag                       = "1",
                                                                ContentType                = HTTPContentType.JSON_UTF8,
                                                                Content                    = GetNewsBannerSerializator(Request, HTTPUser)
                                                                                                                       (NewsBanner,
                                                                                                                        false, //Embedded
                                                                                                                        expandTags,
                                                                                                                        expandOwnerId,
                                                                                                                        includeCryptoHash).
                                                                                                                    ToUTF8Bytes(),
                                                                Connection                 = "close",
                                                                Vary                       = "Accept"
                                                            }.AsImmutable);

                                         });

            #endregion

            #region HTML

            // --------------------------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/newsBanners/214080158
            // --------------------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "newsBanners/{bannerId}",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             #region Check NewsBannerId URI parameter

                                             if (!Request.ParseNewsBanner(this,
                                                                          out NewsBanner_Id?        NewsBannerId,
                                                                          out NewsBanner            NewsBanner,
                                                                          out HTTPResponse.Builder  HTTPResponse))
                                             {
                                                 return Task.FromResult(HTTPResponse.AsImmutable);
                                             }

                                             #endregion


                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.OK,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "GET",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                         ContentType                = HTTPContentType.HTML_UTF8,
                                                         Content                    = MixWithHTMLTemplate("News.News.shtml").ToUTF8Bytes(),
                                                         Connection                 = "close",
                                                         Vary                       = "Accept"
                                                     }.AsImmutable);


                                         });

            #endregion

            #endregion

            #endregion

            #region ~/FAQs

            #region OPTIONS     ~/FAQs

            // ---------------------------------------------------------
            // curl -X OPTIONS -v http://127.0.0.1:3001/FAQs
            // ---------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.OPTIONS,
                                         URLPathPrefix + "FAQs",
                                         HTTPDelegate: Request => {

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET, COUNT, SEARCH, OPTIONS",
                                                     AccessControlAllowHeaders  = "X-PINGOTHER, Content-Type, Accept, Authorization, X-App-Version",
                                                     Connection                 = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region GET         ~/FAQs

            #region JSON

            // ------------------------------------------------------------------
            // curl -v -H "Accept: application/json" http://127.0.0.1:3001/FAQs
            // ------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "FAQs",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             TryGetHTTPUser(Request,
                                                            out User                   HTTPUser,
                                                            out HashSet<Organization>  HTTPOrganizations,
                                                            out HTTPResponse.Builder   Response,
                                                            Recursive:                 true);

                                             #endregion


                                             var withMetadata        = Request.QueryString.GetBoolean    ("withMetadata", false);
                                             var matchFilter         = Request.QueryString.CreateStringFilter<FAQ>("match",
                                                                                                                   (faq, pattern) => faq.Id.ToString().Contains(pattern) ||
                                                                                                                                     faq.Question.Matches(pattern, IgnoreCase: true) ||
                                                                                                                                     faq.Answer.  Matches(pattern, IgnoreCase: true));

                                             var from                = Request.QueryString.TryGetDateTime("from");
                                             var to                  = Request.QueryString.TryGetDateTime("to");
                                             var skip                = Request.QueryString.GetUInt64     ("skip");
                                             var take                = Request.QueryString.GetUInt64     ("take");

                                             var includeCryptoHash   = Request.QueryString.GetBoolean    ("includeCryptoHash", true);

                                             var expand              = Request.QueryString.GetStrings    ("expand");
                                             var expandTags          = expand.ContainsIgnoreCase("tags")     ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;
                                             var expandAuthorId      = expand.ContainsIgnoreCase("authorId") ? InfoStatus.Expanded : InfoStatus.ShowIdOnly;

                                             var now                 = Timestamp.Now;

                                             var allFAQs             = _FAQs.Values.
                                                                           Where(posting => posting.PublicationDate <= now).
                                                                           ToArray();
                                             var totalCount          = allFAQs.ULongCount();

                                             var filteredFAQs        = allFAQs.
                                                                           Where(matchFilter).
                                                                           Where(posting => !from.HasValue || posting.PublicationDate >= from.Value).
                                                                           Where(posting => !to.  HasValue || posting.PublicationDate <  to.  Value).
                                                                           ToArray();
                                             var filteredCount       = filteredFAQs.ULongCount();

                                             var JSONResults         = filteredFAQs.
                                                                           OrderBy(posting => posting.PublicationDate).
                                                                           ToJSON(skip,
                                                                                  take,
                                                                                  false, //Embedded
                                                                                  expandTags,
                                                                                  expandAuthorId,
                                                                                  GetFAQSerializator(Request, HTTPUser),
                                                                                  includeCryptoHash);


                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode                = HTTPStatusCode.OK,
                                                            Server                        = HTTPServer.DefaultServerName,
                                                            Date                          = Timestamp.Now,
                                                            AccessControlAllowOrigin      = "*",
                                                            AccessControlAllowMethods     = "GET",
                                                            AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                            ContentType                   = HTTPContentType.JSON_UTF8,
                                                            Content                       = withMetadata
                                                                                                ? JSONObject.Create(
                                                                                                      new JProperty("totalCount",     totalCount),
                                                                                                      new JProperty("filteredCount",  filteredCount),
                                                                                                      new JProperty("FAQs",           JSONResults)
                                                                                                  ).ToUTF8Bytes()
                                                                                                : JSONResults.ToUTF8Bytes(),
                                                            X_ExpectedTotalNumberOfItems  = filteredCount,
                                                            Connection                    = "close",
                                                            Vary                          = "Accept"
                                                        }.AsImmutable);

                                         });

            #endregion

            #region HTML

            // -----------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:3001/FAQs
            // -----------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.GET,
                                         URLPathPrefix + "FAQs",
                                         HTTPContentType.HTML_UTF8,
                                         HTTPDelegate: Request => {

                                             #region Get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode             = HTTPStatusCode.OK,
                                                     Server                     = HTTPServer.DefaultServerName,
                                                     Date                       = Timestamp.Now,
                                                     AccessControlAllowOrigin   = "*",
                                                     AccessControlAllowMethods  = "GET",
                                                     AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
                                                     ContentType                = HTTPContentType.HTML_UTF8,
                                                     Content                    = MixWithHTMLTemplate("FAQ.FAQs.shtml").ToUTF8Bytes(),
                                                     Connection                 = "close",
                                                     Vary                       = "Accept"
                                                 }.AsImmutable);

                                         });

            #endregion

            #endregion

            #region COUNT       ~/FAQs

            // ---------------------------------------------------------------------------
            // curl -v -X COUNT -H "Accept: application/json" http://127.0.0.1:3001/FAQs
            // ---------------------------------------------------------------------------
            HTTPServer.AddMethodCallback(Hostname,
                                         HTTPMethod.COUNT,
                                         URLPathPrefix + "FAQs",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             var since  = Request.QueryString.GetDateTime("since");

                                             return Task.FromResult(
                                                        new HTTPResponse.Builder(Request) {
                                                            HTTPStatusCode                = HTTPStatusCode.OK,
                                                            Server                        = HTTPServer.DefaultServerName,
                                                            Date                          = Timestamp.Now,
                                                            AccessControlAllowOrigin      = "*",
                                                            AccessControlAllowMethods     = "GET",
                                                            AccessControlAllowHeaders     = "Content-Type, Accept, Authorization",
                                                            ContentType                   = HTTPContentType.JSON_UTF8,
                                                            Content                       = JSONObject.Create(
                                                                                                new JProperty("count",
                                                                                                              _FAQs.Values.ULongCount(news => !since.HasValue || news.PublicationDate >= since.Value))
                                                                                            ).ToUTF8Bytes(),
                                                            Connection                    = "close"
                                                     }.AsImmutable);

                                         });

            #endregion


            #region GET         ~/FAQ/_new

            //// ---------------------------------------------------------------
            //// curl -v -H "Accept: text/html" http://127.0.0.1:3001/FAQ/_new
            //// ---------------------------------------------------------------
            //HTTPServer.AddMethodCallback(Hostname,
            //                             HTTPMethod.GET,
            //                             URIPrefix + "FAQ/_new",
            //                             HTTPContentType.HTML_UTF8,
            //                             HTTPDelegate: Request => {

            //                                 #region Get HTTP user and its organizations

            //                                 // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
            //                                 if (!TryGetHTTPUser(Request,
            //                                                     out User                   HTTPUser,
            //                                                     out HashSet<Organization>  HTTPOrganizations,
            //                                                     out HTTPResponse           Response,
            //                                                     Recursive:                 true))
            //                                 {
            //                                     return Task.FromResult(Response);
            //                                 }

            //                                 #endregion

            //                                 var _MemoryStream1 = new MemoryStream();
            //                                 GetType().Assembly.GetManifestResourceStream(HTTPRoot + "template.html").SeekAndCopyTo(_MemoryStream1, 0);
            //                                 var Template = _MemoryStream1.ToArray().ToUTF8String();

            //                                 var _MemoryStream2 = new MemoryStream();
            //                                 GetType().Assembly.GetManifestResourceStream(HTTPRoot + "FAQ.newQuestion.shtml").SeekAndCopyTo(_MemoryStream2, 3);

            //                                 return Task.FromResult(
            //                                     new HTTPResponse.Builder(Request) {
            //                                         HTTPStatusCode             = HTTPStatusCode.OK,
            //                                         Server                     = HTTPServer.DefaultServerName,
            //                                         Date                       = Timestamp.Now,
            //                                         AccessControlAllowOrigin   = "*",
            //                                         AccessControlAllowMethods  = "GET, SET",
            //                                         AccessControlAllowHeaders  = "Content-Type, Accept, Authorization",
            //                                         ETag                       = "1",
            //                                         ContentType                = HTTPContentType.HTML_UTF8,
            //                                         Content                    = Template.Replace("<%= content %>", _MemoryStream2.ToArray().ToUTF8String()).
            //                                                                                            Replace("<%= logoimage %>", String.Concat(@"<img src=""", LogoImage, @""" /> ")).
            //                                                                                            //Replace("/defibrillator/defibrillator.min.css", "/defibrillator/newDefibrillator.min.css").
            //                                                                                            //Replace("/defibrillator/defibrillator.js",      "/defibrillator/newDefibrillator.js").
            //                                                                                            //Replace("StartDefibrillator(true);",            "StartNewDefibrillator(true);").
            //                                                                                            ToUTF8Bytes(),
            //                                         Connection                 = "close"
            //                                     }.AsImmutable);

            //                             });

            #endregion

            #endregion


            #region GET    .well-known/openpgpkey/policy

            #endregion

            #region HEAD   .well-known/openpgpkey/hu/{Id}

            #endregion

            #region GET    .well-known/openpgpkey/hu/{Id}

            // application/octet-string

            // EMailAddress.toLower().SHA1().ZBase32() == 32 octet string
            // Z-Base-32 method RFC 6189 section 5.1.6

            // https://www.ietf.org/id/draft-koch-openpgp-webkey-service-06.txt
            // The server MUST NOT return an ASCII armored version of the key.

            #endregion


            #region POST        ~/serviceCheck

            // curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"123\"}" http://127.0.0.1:2000/serviceCheck
            // {
            //      "timestamp":  "2019-11-28T19:07:52.6430383Z",
            //      "instance":   "ZBOOK",
            //      "content":    "321",
            //      "signature":  "3044022048ffa223332a3e22735c4c9ac2..."
            // }

            // -------------------------------------------------------------------
            // curl -v -H "Accept: text/html" http://127.0.0.1:2100/serviceCheck
            // -------------------------------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.POST,
                                         URLPathPrefix + "serviceCheck",
                                         HTTPContentType.JSON_UTF8,
                                         HTTPDelegate: Request => {

                                             try
                                             {

                                                 #region Parse JSON

                                                 if (!Request.TryParseJObjectRequestBody(out JObject JSONObj, out HTTPResponse.Builder response))
                                                     return Task.FromResult(response.AsImmutable);

                                                 var content = JSONObj["content"]?.Value<String>() ?? "";

                                                 #endregion

                                                 var reply       = JSONObject.Create(
                                                                       new JProperty("timestamp",  Timestamp.Now),
                                                                       new JProperty("instance",   Environment.MachineName),
                                                                       new JProperty("content",    content.Reverse())
                                                                   );

                                                 //var ECP         = ECNamedCurveTable.GetByName("secp256r1");
                                                 //var ECSpec      = new ECDomainParameters(ECP.Curve, ECP.G, ECP.N, ECP.H, ECP.GetSeed());
                                                 //var C           = (FpCurve) ECSpec.Curve;

                                                 //var g           = GeneratorUtilities.GetKeyPairGenerator("ECDH");
                                                 //g.Init(new ECKeyGenerationParameters(ECSpec, new SecureRandom()));
                                                 //var keyPair     = g.GenerateKeyPair();

                                                 //var privateKey  = (keyPair.Private as ECPrivateKeyParameters);//.D.ToByteArray().ToHexString();
                                                 //var publicKey   = (keyPair.Public  as ECPublicKeyParameters);//. Q.GetEncoded(). ToHexString();

                                                 //var skHEX       = privateKey.D.ToByteArray().ToHexString();
                                                 //var pkHEX       = publicKey.Q.GetEncoded().ToHexString();

                                                 if (ServiceCheckPublicKey != null)
                                                     reply.Add("publicKey", ServiceCheckPublicKey.Q.GetEncoded().ToHexString());

                                                 if (ServiceCheckPrivateKey != null)
                                                 {

                                                     var plaintext   = reply.ToString(Newtonsoft.Json.Formatting.None);
                                                     var SHA256Hash  = new SHA256Managed().ComputeHash(plaintext.ToUTF8Bytes());

                                                     var signer      = SignerUtilities.GetSigner("NONEwithECDSA");
                                                     signer.Init(true, ServiceCheckPrivateKey);
                                                     signer.BlockUpdate(SHA256Hash, 0, SHA256Hash.Length);
                                                     var signature   = signer.GenerateSignature().ToHexString();

                                                     reply.Add("signature", signature);

                                                 }

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.OK,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "POST",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept",
                                                         ContentType                = HTTPContentType.JSON_UTF8,
                                                         Content                    = reply.ToUTF8Bytes(),
                                                         Connection                 = "close"
                                                     }.AsImmutable);

                                             }
                                             catch (Exception e)
                                             {

                                                 return Task.FromResult(
                                                     new HTTPResponse.Builder(Request) {
                                                         HTTPStatusCode             = HTTPStatusCode.InternalServerError,
                                                         Server                     = HTTPServer.DefaultServerName,
                                                         Date                       = Timestamp.Now,
                                                         AccessControlAllowOrigin   = "*",
                                                         AccessControlAllowMethods  = "POST",
                                                         AccessControlAllowHeaders  = "Content-Type, Accept",
                                                         ContentType                = HTTPContentType.TEXT_UTF8,
                                                         Content                    = (e.Message + Environment.NewLine + Environment.NewLine + e.StackTrace).ToUTF8Bytes(),
                                                         Connection                 = "close"
                                                     }.AsImmutable);

                                             }

                                         }, AllowReplacement: URLReplacement.Allow);

            #endregion


            #region /hashimage

            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.GET,
                                         HTTPPath.Parse("/hashimage"),
                                         HTTPContentType.PNG,
                                         HTTPDelegate: Request => {

                Byte x =  13;
                Byte y =  13;
                Byte t = 255;

                var ByteArray = SecurityVisualization.DrunkenBishop("fc:94:b0:c1:e5:b0:98:7c:58:43:99:76:97:ee:9f:b7");
                ByteArray     = SecurityVisualization.DrunkenBishop("AE0D 5C5C 4EB5 C3F0 683E  2173 B1EA 6EEA A89A 2896", x, y);
                var MaxValue  = ByteArray.Max();

                var size = 10UL;
                var _Bitmap = new Bitmap((Int32) (x * size), (Int32) (y * size));

                var _Pens = new Brush[] {
                    new SolidBrush(Color.FromArgb(t, 240, 240, 240)),
                    new SolidBrush(Color.FromArgb(t, 120, 120, 240)),
                    new SolidBrush(Color.FromArgb(t, 105, 105, 210)),
                    new SolidBrush(Color.FromArgb(t,  90,  90, 180)),
                    new SolidBrush(Color.FromArgb(t,  75,  75, 150)),
                    new SolidBrush(Color.FromArgb(t,  60,  60, 120)),
                    new SolidBrush(Color.FromArgb(t,  45,  45,  90)),
                    new SolidBrush(Color.FromArgb(t,  30,  30,  60)),
                    new SolidBrush(Color.FromArgb(t,  15,  15,  30)),
                    new SolidBrush(Color.FromArgb(t,   0,   0,   0))
                };

                var g = Graphics.FromImage(_Bitmap);
                ByteArray.ForEachCounted((_byte, i) => {
                    g.FillRectangle(_Pens[Math.Min(_byte, _Pens.Length-1)], size * ((i - 1) % x), size * ((i - 1) / x), size - 1, size-1);
                });


                var s = new MemoryStream();
                _Bitmap.Save(s, ImageFormat.Png);
                var f = s.ToArray();

                return Task.FromResult(
                    new HTTPResponse.Builder(Request) {
                        HTTPStatusCode  = HTTPStatusCode.OK,
                        Server          = HTTPServer.DefaultServerName,
                        ContentType     = HTTPContentType.PNG,
                        Content         = f,
                        CacheControl    = "public",
                        //Expires         = "Mon, 25 Jun 2015 21:31:12 GMT",
                        Connection      = "close"
                    }.AsImmutable);

            });

            #endregion


            #region /restart

            // -----------------------------------------------
            // curl -v -X POST http://127.0.0.1:2000/restart
            // -----------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.POST,
                                         URLPathPrefix + "/restart",
                                         HTTPRequestLogger:   RestartRequest,
                                         HTTPResponseLogger:  RestartResponse,
                                         HTTPDelegate:        Request => {

                                             #region Try to get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             Environment.Exit(1000);

                                             // Will not happen anyway!
                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                                     Server          = HTTPServer.DefaultServerName,
                                                     Connection      = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

            #region /stop

            // -----------------------------------------------
            // curl -v -X POST http://127.0.0.1:2000/stop
            // -----------------------------------------------
            HTTPServer.AddMethodCallback(HTTPHostname.Any,
                                         HTTPMethod.POST,
                                         URLPathPrefix + "/stop",
                                         HTTPRequestLogger:   StopRequest,
                                         HTTPResponseLogger:  StopResponse,
                                         HTTPDelegate:        Request => {

                                             #region Try to get HTTP user and its organizations

                                             // Will return HTTP 401 Unauthorized, when the HTTP user is unknown!
                                             if (!TryGetHTTPUser(Request,
                                                                 out User                   HTTPUser,
                                                                 out HashSet<Organization>  HTTPOrganizations,
                                                                 out HTTPResponse.Builder   Response,
                                                                 AccessLevel:               Access_Levels.Admin,
                                                                 Recursive:                 true))
                                             {
                                                 return Task.FromResult(Response.AsImmutable);
                                             }

                                             #endregion

                                             Environment.Exit(0);

                                             // Will not happen anyway!
                                             return Task.FromResult(
                                                 new HTTPResponse.Builder(Request) {
                                                     HTTPStatusCode  = HTTPStatusCode.Unauthorized,
                                                     Server          = HTTPServer.DefaultServerName,
                                                     Connection      = "close"
                                                 }.AsImmutable);

                                         });

            #endregion

        }

        #endregion

        #region Database file...

        #region (protected) ReadDatabaseFile(ProcessEventDelegate, DatabaseFileName = null)

        /// <summary>
        /// Read the database file.
        /// </summary>
        /// <param name="ProcessEventDelegate">A delegate to process each database entry.</param>
        /// <param name="DatabaseFileName">The optional database file name.</param>
        protected async Task ReadDatabaseFile(Func<String, JObject, String, UInt64?, Task>  ProcessEventDelegate,
                                              String                                        DatabaseFileName = null)
        {

            if (DisableLogging)
                return;

            var databaseFileName = DatabaseFileName ?? this.DatabaseFileName;

            DebugX.Log("Reloading database file '" + databaseFileName + "'...");

            try
            {

                JObject JSONLine;
                String  JSONCommand;
                JObject JSONObject;

                File.ReadLines(databaseFileName).ForEachCounted(async (line, lineNumber) => {

                    if (line.IsNeitherNullNorEmpty() &&
                       !line.StartsWith("#") &&
                       !line.StartsWith("//"))
                    {

                        try
                        {

                            JSONLine                  = JObject.Parse(line);
                            JSONCommand               = (JSONLine.First as JProperty)?.Name;
                            JSONObject                = (JSONLine.First as JProperty)?.Value as JObject;
                            CurrentDatabaseHashValue  = JSONLine["sha256hash"]?["hashValue"]?.Value<String>();

                            if (JSONCommand.IsNotNullOrEmpty() && JSONObject != null)
                                await ProcessEventDelegate(JSONCommand,
                                                           JSONObject,
                                                           databaseFileName,
                                                           lineNumber);

                        }
                        catch (Exception e)
                        {
                            DebugX.Log(@"Could not (re-)load database file ''" + databaseFileName + "' line " + lineNumber + ": " + e.Message);
                        }

                    }

                });

            }
            catch (FileNotFoundException)
            { }
            catch (Exception e)
            {
                DebugX.LogT(@"Could not (re-)load database file '" + databaseFileName + "': " + e.Message);
            }



            DebugX.Log("Reloading all UsersAPI database helper files...");

            #region Read Password file...

            try
            {

                JObject JSONLine;
                String  JSONCommand;
                JObject JSONObject;

                // Info: File.Exists(...) is harmful!
                File.ReadLines(UsersAPIPath + DefaultPasswordFile).ForEachCounted((line, linenumber) => {

                    if (line.IsNeitherNullNorEmpty() &&
                       !line.StartsWith("#")         &&
                       !line.StartsWith("//"))
                    {

                        try
                        {

                            JSONLine                  = JObject.Parse(line);
                            JSONCommand               = (JSONLine.First as JProperty)?.Name;
                            JSONObject                = (JSONLine.First as JProperty)?.Value as JObject;
                            CurrentDatabaseHashValue  =  JSONLine["sha256hash"]?["hashValue"]?.Value<String>();

                            if (JSONCommand.IsNotNullOrEmpty() &&
                                JSONObject  != null            &&
                                User_Id.TryParse(JSONObject["login"].Value<String>(), out User_Id Login))
                            {

                                switch (JSONCommand)
                                {

                                    #region add

                                        case "add":
                                        case "addPassword":
                                        case "AddPassword":

                                            if (!_LoginPasswords.ContainsKey(Login))
                                            {

                                                _LoginPasswords.Add(Login,
                                                                    new LoginPassword(Login,
                                                                                      Password.ParseHash(JSONObject["newPassword"]["salt"].        Value<String>(),
                                                                                                         JSONObject["newPassword"]["passwordHash"].Value<String>())));

                                            }

                                            else
                                                DebugX.Log("Invalid 'AddPassword' command in '" + this.UsersAPIPath + DefaultPasswordFile + "' line " + linenumber + "!");

                                            break;

                                        #endregion

                                    #region change

                                        case "change":
                                        case "changePassword":
                                        case "ChangePassword":

                                            if (_LoginPasswords.TryGetValue(Login, out LoginPassword _LoginPassword) &&
                                                _LoginPassword.Password.     UnsecureString   == JSONObject["currentPassword"]["passwordHash"].Value<String>() &&
                                                _LoginPassword.Password.Salt.UnsecureString() == JSONObject["currentPassword"]["salt"].        Value<String>())
                                            {

                                                _LoginPasswords[Login] = new LoginPassword(Login,
                                                                                           Password.ParseHash(JSONObject["newPassword"]["salt"].        Value<String>(),
                                                                                                              JSONObject["newPassword"]["passwordHash"].Value<String>()));

                                            }

                                            else
                                                DebugX.Log("Invalid 'ChangePassword' command in '" + this.UsersAPIPath + DefaultPasswordFile + "' line " + linenumber + "!");

                                            break;

                                        #endregion

                                    #region reset

                                        case "reset":
                                        case "resetPassword":
                                        case "ResetPassword":

                                            if (_LoginPasswords.ContainsKey(Login))
                                                _LoginPasswords.Remove(Login);

                                            _LoginPasswords.Add(Login,
                                                                new LoginPassword(Login,
                                                                                  Password.ParseHash(JSONObject["newPassword"]["salt"].        Value<String>(),
                                                                                                     JSONObject["newPassword"]["passwordHash"].Value<String>())));

                                            break;

                                        #endregion

                                    default:
                                        DebugX.Log("Unknown command '" + JSONCommand + "' in password file '" + this.UsersAPIPath + DefaultPasswordFile + "' line " + linenumber + "!");
                                        break;

                                }

                            }

                            else
                                DebugX.Log("Could not read password file '" + this.UsersAPIPath + DefaultPasswordFile + "' line " + linenumber + "!");

                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Could not read password file '" + this.UsersAPIPath + DefaultPasswordFile + "' line " + linenumber + ": " + e.Message);
                        }

                    }

                });

            }
            catch (FileNotFoundException fe)
            { }
            catch (Exception e)
            {
                DebugX.LogT("Could not read password file '" + this.UsersAPIPath + DefaultPasswordFile + "' failed: " + e.Message);
            }

            #endregion

            #region Read HTTPCookiesFile file...

            lock (_HTTPCookies)
            {

                try
                {

                    File.ReadLines(UsersAPIPath + DefaultHTTPCookiesFile).ForEachCounted((line, linenumber) => {

                        try
                        {

                            var Tokens           = line.Split(new Char[] { ';' }, StringSplitOptions.None);

                            var SecurityTokenId  = SecurityToken_Id.Parse(Tokens[0]);
                            var Login            = User_Id.         Parse(Tokens[1]);
                            var Expires          = DateTime.        Parse(Tokens[2]);
                            var Astronaut        = Tokens.Length == 4
                                                       ? new User_Id?(User_Id.Parse(Tokens[3]))
                                                       : null;

                            if (!_HTTPCookies.ContainsKey(SecurityTokenId) &&
                                _LoginPasswords.ContainsKey(Login) &&
                                Expires > Timestamp.Now)
                            {

                                _HTTPCookies.Add(SecurityTokenId,
                                                 new SecurityToken(Login,
                                                                   Expires,
                                                                   Astronaut));

                            }

                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Could not read HTTP cookies file '" + this.UsersAPIPath + DefaultHTTPCookiesFile + "' line " + linenumber + ": " + e.Message);
                        }

                    });

                }
                catch (FileNotFoundException)
                { }
                catch (Exception e)
                {
                    DebugX.Log("Could not read HTTP cookies file '" + this.UsersAPIPath + DefaultHTTPCookiesFile + "': " + e.Message);
                }


                // Write filtered (no invalid users, no expired tokens) tokens back to file...
                try
                {

                    File.WriteAllLines(UsersAPIPath + DefaultHTTPCookiesFile,
                                       _HTTPCookies.Select(token => token.Key + ";" + token.Value.ToLogLine()));

                }
                catch (Exception e)
                {
                    DebugX.Log("Could not update HTTP cookies file '" + this.UsersAPIPath + DefaultHTTPCookiesFile + "': " + e.Message);
                }

            }

            #endregion

            #region Read PasswordResets file...

            try
            {

                JObject  JSONLine;
                String   JSONCommand;
                JObject  JSONObject;

                var Now     = Timestamp.Now;
                var MaxAge  = TimeSpan.FromDays(7);

                // Info: File.Exists(...) is harmful!
                File.ReadLines(UsersAPIPath + DefaultPasswordResetsFile).ForEachCounted((line, linenumber) => {

                    if (line.IsNeitherNullNorEmpty() &&
                       !line.StartsWith("#")         &&
                       !line.StartsWith("//"))
                    {

                        try
                        {

                            JSONLine                  = JObject.Parse(line);
                            JSONCommand               = (JSONLine.First as JProperty)?.Name;
                            JSONObject                = (JSONLine.First as JProperty)?.Value as JObject;
                            //CurrentDatabaseHashValue  =  JSONLine["sha256hash"]?["hashValue"]?.Value<String>();

                            if (JSONCommand.IsNotNullOrEmpty() &&
                                JSONObject  != null &&
                                PasswordReset.TryParseJSON(JSONObject,
                                                           _Users.TryGetValue,
                                                           out PasswordReset _PasswordReset,
                                                           out String        ErrorResponse))
                            {

                                if (ErrorResponse == null)
                                {

                                    switch (JSONCommand.ToLower())
                                    {

                                        #region add

                                        case "add":

                                            if (!_PasswordResets.ContainsKey(_PasswordReset.SecurityToken1))
                                            {
                                                if (Now - _PasswordReset.Timestamp <= MaxAge)
                                                {
                                                    _PasswordResets.Add(_PasswordReset.SecurityToken1,
                                                                        _PasswordReset);
                                                }
                                            }

                                            else
                                                DebugX.Log("Invalid 'Add' command in '" + this.UsersAPIPath + DefaultPasswordResetsFile + "' line " + linenumber + "!");

                                            break;

                                        #endregion

                                        #region remove

                                        case "remove":
                                            _PasswordResets.Remove(_PasswordReset.SecurityToken1);
                                            break;

                                        #endregion

                                        default:
                                            DebugX.Log("Unknown command '" + JSONCommand + "' in password file '" + this.UsersAPIPath + DefaultPasswordResetsFile + "' line " + linenumber + "!");
                                            break;

                                    }

                                }

                            }

                            else
                                DebugX.Log("Could not read password file '" + this.UsersAPIPath + DefaultPasswordResetsFile + "' line " + linenumber + "!");

                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Could not read password file '" + this.UsersAPIPath + DefaultPasswordResetsFile + "' line " + linenumber + ": " + e.Message);
                        }

                    }

                });

            }
            catch (FileNotFoundException)
            { }
            catch (Exception e)
            {
                DebugX.LogT("Could not read password file '" + this.UsersAPIPath + DefaultPasswordResetsFile + "': " + e.Message);
            }

            #endregion

            DebugX.Log("Reloading of all UsersAPI database helper files finished...");

        }

        #endregion

        //ToDo: Receive Network Database Events

        #region (protected virtual) ProcessEvent(Command, Data, Sender = null, LineNumber = null)

        /// <summary>
        /// Process a database event.
        /// </summary>
        /// <param name="Command">The event command.</param>
        /// <param name="Data">The event data.</param>
        /// <param name="Sender">The event sender or file name.</param>
        /// <param name="LineNumber">The event line number within the event file.</param>
        protected virtual async Task ProcessEvent(String   Command,
                                                  JObject  Data,
                                                  String   Sender     = null,
                                                  UInt64?  LineNumber = null)
        {

            #region Initial checks

            if (Command.IsNullOrEmpty() || Data == null)
                return;

            User_Id          userId;
            User             user;
            UserGroup        userGroup;
            APIKey           apiKey;
            Organization_Id  organizationId;
            Organization     organization;
            NewsPosting      newsPosting;
            NewsBanner       newsBanner;
            FAQ              faq;

            #endregion

            switch (Command)
            {

                #region Create user

                case "createUser":

                    if (User.TryParseJSON(Data,
                                          out user,
                                          out String  ErrorResponse))
                    {
                        _Users.AddAndReturnValue(user.Id, user);
                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add user

                case "addUser":

                    if (User.TryParseJSON(Data,
                                          out user,
                                          out ErrorResponse))
                    {
                        _Users.AddAndReturnValue(user.Id, user);
                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add user if not exists

                case "addUserIfNotExists":

                    if (User.TryParseJSON(Data,
                                          out user,
                                          out ErrorResponse))
                    {

                        if (!_Users.ContainsKey(user.Id))
                        {
                            user.API = this;
                            _Users.AddAndReturnValue(user.Id, user);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add or update user

                case "addOrUpdateUser":

                    if (User.TryParseJSON(Data,
                                          out user,
                                          out ErrorResponse))
                    {

                        if (_Users.TryGetValue(user.Id, out User OldUser))
                        {
                            _Users.Remove(OldUser.Id);
                            user.CopyAllLinkedDataFrom(OldUser);
                        }

                        _Users.Add(user.Id, user);
                        user.API = this;

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Update user

                case "updateUser":

                    if (User.TryParseJSON(Data,
                                          out user,
                                          out ErrorResponse))
                    {

                        if (_Users.TryGetValue(user.Id, out User OldUser))
                        {

                            _Users.Remove(OldUser.Id);
                            user.API = this;
                            user.CopyAllLinkedDataFrom(OldUser);

                            _Users.Add(user.Id, user);

                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Delete user

                case "deleteUser":

                    if (User.TryParseJSON(Data,
                                          out user,
                                          out ErrorResponse))
                    {

                        if (_Users.TryGetValue(user.Id, out User __User))
                        {

                            // this --edge--> organization
                            foreach (var edge in __User.User2Organization_OutEdges.ToArray())
                                edge.Target.RemoveUser(edge);

                        }

                        _Users.Remove(user.Id);

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Remove user id

                //case "removeUserId":

                //    if (Data.ParseOptional("@id",
                //                                 "User identification to remove",
                //                                 User_Id.TryParse,
                //                                 out userId,
                //                                 out ErrorResponse))
                //    {

                //        if (TryGetUser(userId, out User __User))
                //        {

                //            // this --edge--> organization
                //            foreach (var edge in __User.User2Organization_OutEdges)
                //                edge.Target.RemoveInEdge(edge);

                //        }

                //        _Users.Remove(userId);

                //    }

                //    else
                //        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                //    break;

                #endregion


                #region Add API key

                case "addAPIKey":

                    if (APIKey.TryParse(Data,
                                        _Users.TryGetValue,
                                        out apiKey,
                                        out ErrorResponse))
                    {
                        _APIKeys.AddAndReturnValue(apiKey.Id, apiKey);
                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add API key if not exists

                case "addAPIKeyIfNotExists":

                    if (APIKey.TryParse(Data,
                                        _Users.TryGetValue,
                                        out apiKey,
                                        out ErrorResponse))
                    {

                        if (!_APIKeys.ContainsKey(apiKey.Id))
                        {
                            apiKey.API = this;
                            _APIKeys.AddAndReturnValue(apiKey.Id, apiKey);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add or update API key

                case "addOrUpdateAPIKey":

                    if (APIKey.TryParse(Data,
                                        _Users.TryGetValue,
                                        out apiKey,
                                        out ErrorResponse))
                    {

                        if (_APIKeys.TryGetValue(apiKey.Id, out APIKey OldAPIKey))
                        {
                            _APIKeys.Remove(OldAPIKey.Id);
                        }

                        _APIKeys.Add(apiKey.Id, apiKey);
                        apiKey.API = this;

                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Update API key

                case "updateAPIKey":

                    if (APIKey.TryParse(Data,
                                        _Users.TryGetValue,
                                        out apiKey,
                                        out ErrorResponse))
                    {

                        if (_APIKeys.TryGetValue(apiKey.Id, out APIKey OldAPIKey))
                        {
                            _APIKeys.Remove(OldAPIKey.Id);
                            apiKey.API = this;
                            _APIKeys.Add(apiKey.Id, apiKey);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Remove API key

                case "removeAPIKey":

                    if (APIKey.TryParse(Data,
                                        _Users.TryGetValue,
                                        out apiKey,
                                        out ErrorResponse))
                    {
                        _APIKeys.Remove(apiKey.Id);
                    }

                    else
                        DebugX.Log(String.Concat(nameof(apiKey), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion


                #region Add organization

                case "addOrganization":

                    if (Organization.TryParseJSON(Data,
                                                  out organization,
                                                  out ErrorResponse))
                    {

                        if (!_Organizations.ContainsKey(organization.Id))
                        {
                            organization.API = this;
                            _Organizations.Add(organization.Id, organization);
                        }

                        else
                            DebugX.Log("Organization '" + organization.Id + "' already exists!");

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add organization if not exists

                case "addOrganizationIfNotExists":

                    if (Organization.TryParseJSON(Data,
                                                  out organization,
                                                  out ErrorResponse))
                    {

                        if (!_Organizations.ContainsKey(organization.Id))
                        {
                            organization.API = this;
                            _Organizations.AddAndReturnValue(organization.Id, organization);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add or update organization

                case "addOrUpdateOrganization":

                    if (Organization.TryParseJSON(Data,
                                                  out organization,
                                                  out ErrorResponse))
                    {


                        if (_Organizations.TryGetValue(organization.Id, out Organization OldOrganization))
                        {
                            _Organizations.Remove(OldOrganization.Id);
                            organization.API = this;
                            organization.CopyAllLinkedDataFrom(OldOrganization);
                        }

                        _Organizations.Add(organization.Id, organization);
                        organization.API = this;

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Update organization

                case "updateOrganization":

                    if (Organization.TryParseJSON(Data,
                                                  out organization,
                                                  out ErrorResponse))
                    {

                        if (_Organizations.TryGetValue(organization.Id, out Organization OldOrganization))
                        {

                            _Organizations.Remove(OldOrganization.Id);
                            organization.API = this;
                            organization.CopyAllLinkedDataFrom(OldOrganization);

                            _Organizations.Add(organization.Id, organization);

                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Delete organization

                case "deleteOrganization":

                    if (Organization.TryParseJSON(Data,
                                                  out organization,
                                                  out ErrorResponse))
                    {

                        if (TryGetOrganization(organization.Id, out Organization __Organization))
                        {

                            // this --edge--> other_organization
                            foreach (var edge in __Organization.Organization2OrganizationOutEdges)
                                edge.Target.RemoveInEdge(edge);

                            // this <--edge-- other_organization
                            foreach (var edge in __Organization.Organization2OrganizationInEdges)
                                edge.Source.RemoveOutEdge(edge);

                            // this <--edge-- user
                            foreach (var edge in __Organization.User2OrganizationEdges)
                                edge.Source.RemoveOutEdge(edge);

                        }

                        _Organizations.Remove(organization.Id);

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Remove organization id

                //case "removeOrganizationId":

                //    if (Data.ParseOptional("@id",
                //                                 "Organization identification to remove",
                //                                 Organization_Id.TryParse,
                //                                 out organizationId,
                //                                 out ErrorResponse))
                //    {

                //        if (TryGetOrganization(organizationId, out Organization __Organization))
                //        {

                //            // this --edge--> other_organization
                //            foreach (var edge in __Organization.Organization2OrganizationOutEdges)
                //                edge.Target.RemoveInEdge(edge);

                //            // this <--edge-- other_organization
                //            foreach (var edge in __Organization.Organization2OrganizationInEdges)
                //                edge.Source.RemoveOutEdge(edge);

                //            // this <--edge-- user
                //            foreach (var edge in __Organization.User2OrganizationEdges)
                //                edge.Source.RemoveOutEdge(edge);

                //        }

                //        _Organizations.Remove(organizationId);

                //    }

                //    else
                //        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                //    break;

                #endregion


                #region Add user to organization

                case "addUserToOrganization":

                    if (!User_Id.TryParse(Data["user"]?.Value<String>(), out User_Id U2O_UserId))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid user identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetUser(U2O_UserId, out User U2O_User))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown user '" + U2O_UserId + "'!"));
                        break;
                    }


                    if (!Organization_Id.TryParse(Data["organization"]?.Value<String>(), out Organization_Id U2O_OrganizationId))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(U2O_OrganizationId, out Organization U2O_Organization))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown organization '" + U2O_OrganizationId + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out User2OrganizationEdgeLabel U2O_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }


                    U2O_Organization.AddUser(U2O_User.AddOutgoingEdge(U2O_EdgeLabel,
                                                                       U2O_Organization));

                    break;

                #endregion

                #region Remove user from organization

                case "removeUserFromOrganization":

                    if (!User_Id.TryParse(Data["user"]?.Value<String>(), out U2O_UserId))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid user identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetUser(U2O_UserId, out U2O_User))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown user '" + U2O_UserId + "'!"));
                        break;
                    }


                    if (!Organization_Id.TryParse(Data["organization"]?.Value<String>(), out U2O_OrganizationId))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(U2O_OrganizationId, out U2O_Organization))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown organization '" + U2O_OrganizationId + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out U2O_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }

                    foreach (var edge in U2O_User.Edges(U2O_Organization).Where(_edge => _edge.EdgeLabel == U2O_EdgeLabel).ToArray())
                        U2O_User.RemoveOutEdge(edge);

                    foreach (var edge in U2O_Organization.User2OrganizationInEdges(U2O_User).Where(_edge => _edge.EdgeLabel == U2O_EdgeLabel).ToArray())
                        U2O_Organization.RemoveUser(edge.EdgeLabel, U2O_User);

                    break;

                #endregion

                #region Link organizations

                case "linkOrganizations":

                    if (!Organization_Id.TryParse(Data["organizationOut"]?.Value<String>(), out Organization_Id O2O_OrganizationIdOut))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid outgoing organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(O2O_OrganizationIdOut, out Organization O2O_OrganizationOut))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown outgoing organization '" + O2O_OrganizationIdOut + "'!"));
                        break;
                    }


                    if (!Organization_Id.TryParse(Data["organizationIn"]?.Value<String>(), out Organization_Id O2O_OrganizationIdIn))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid incoming organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(O2O_OrganizationIdIn, out Organization O2O_OrganizationIn))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown incoming organization '" + O2O_OrganizationIdIn + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out Organization2OrganizationEdgeLabel O2O_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }


                    O2O_OrganizationIn.AddEdge(O2O_OrganizationOut.AddOutEdge(O2O_EdgeLabel,
                                                                              O2O_OrganizationIn));

                    break;

                #endregion

                #region Unlink organizations

                case "unlinkOrganizations":

                    if (!Organization_Id.TryParse(Data["organizationOut"]?.Value<String>(), out O2O_OrganizationIdOut))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid outgoing organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(O2O_OrganizationIdOut, out O2O_OrganizationOut))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown outgoing organization '" + O2O_OrganizationIdOut + "'!"));
                        break;
                    }


                    if (!Organization_Id.TryParse(Data["organizationIn"]?.Value<String>(), out O2O_OrganizationIdIn))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid incoming organization identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetOrganization(O2O_OrganizationIdIn, out O2O_OrganizationIn))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown incoming organization '" + O2O_OrganizationIdIn + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out O2O_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }

                    if (O2O_OrganizationOut.
                            Organization2OrganizationOutEdges.
                            Where(edge => edge.Target    == O2O_OrganizationIn).
                            Any  (edge => edge.EdgeLabel == O2O_EdgeLabel))
                    {

                        O2O_OrganizationOut.RemoveOutEdges(O2O_EdgeLabel, O2O_OrganizationIn);

                        if (O2O_OrganizationIn.
                                Organization2OrganizationInEdges.
                                Where(edge => edge.Source    == O2O_OrganizationOut).
                                Any  (edge => edge.EdgeLabel == O2O_EdgeLabel))
                        {
                            O2O_OrganizationIn.RemoveInEdges(O2O_EdgeLabel, O2O_OrganizationOut);
                        }

                    }

                    break;

                #endregion


                #region Add user group

                case "addUserGroup":

                    if (UserGroup.TryParseJSON(Data,
                                               _UserGroups.TryGetValue,
                                               _Users.TryGetValue,
                                               out userGroup,
                                               out ErrorResponse))
                    {

                        if (!_UserGroups.ContainsKey(userGroup.Id))
                        {
                            userGroup.API = this;
                            _UserGroups.AddAndReturnValue(userGroup.Id, userGroup);
                        }

                        else
                            DebugX.Log("User group '" + userGroup.Id + "' already exists!");

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add user group if not exists

                case "addUserGroupIfNotExists":

                    if (UserGroup.TryParseJSON(Data,
                                               _UserGroups.TryGetValue,
                                               _Users.TryGetValue,
                                               out userGroup,
                                               out ErrorResponse))
                    {

                        if (!_UserGroups.ContainsKey(userGroup.Id))
                        {
                            userGroup.API = this;
                            _UserGroups.AddAndReturnValue(userGroup.Id, userGroup);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion

                #region Add user to user group

                case "addUserToUserGroup":

                    if (!User_Id.TryParse(Data["user"]?.Value<String>(), out User_Id U2G_UserId))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid user identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetUser(U2G_UserId, out User U2G_User))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown user '" + U2G_UserId + "'!"));
                        break;
                    }


                    if (!UserGroup_Id.TryParse(Data["group"]?.Value<String>(), out UserGroup_Id U2G_GroupId))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Invalid group identification '" + Data["user"]?.Value<String>() + "'!"));
                        break;
                    }

                    if (!TryGetUserGroup(U2G_GroupId, out UserGroup U2G_Group))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown group '" + U2G_GroupId + "'!"));
                        break;
                    }


                    if (!Enum.TryParse(Data["edge"].Value<String>(), out User2UserGroupEdgeLabel U2G_EdgeLabel))
                    {
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, ": ", "Unknown edge label '" + Data["edge"].Value<String>() + "'!"));
                        break;
                    }


                    U2G_Group.AddUser(U2G_User.AddToUserGroup(U2G_EdgeLabel,
                                                              U2G_Group));

                    break;

                #endregion


                #region Add news posting if not exists

                case "addNewsPostingIfNotExists":

                    if (NewsPosting.TryParseJSON(Data,
                                                 _Users.TryGetValue,
                                                 out newsPosting,
                                                 out ErrorResponse))
                    {

                        if (!_NewsPostings.ContainsKey(newsPosting.Id))
                        {
                            newsPosting.API = this;
                            _NewsPostings.AddAndReturnValue(newsPosting.Id, newsPosting);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion


                #region Add news banner if not exists

                case "addNewsBannerIfNotExists":

                    if (NewsBanner.TryParseJSON(Data,
                                                _Users.TryGetValue,
                                                out newsBanner,
                                                out ErrorResponse))
                    {

                        if (!_NewsBanners.ContainsKey(newsBanner.Id))
                        {
                            newsBanner.API = this;
                            _NewsBanners.AddAndReturnValue(newsBanner.Id, newsBanner);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion


                #region Add FAQ if not exists

                case "addFAQIfNotExists":

                    if (FAQ.TryParseJSON(Data,
                                         _Users.TryGetValue,
                                         out faq,
                                         out ErrorResponse))
                    {

                        if (!_FAQs.ContainsKey(faq.Id))
                        {
                            faq.API = this;
                            _FAQs.AddAndReturnValue(faq.Id, faq);
                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " ", Command, Sender.IsNotNullOrEmpty() ? " via " + Sender : "", LineNumber.HasValue ? ", line " + LineNumber.Value : "", ": ", ErrorResponse));

                    break;

                #endregion


                #region Add    notification

                case "addNotification":

                    user          = null;
                    organization  = null;

                    if (Data["@context"]?.Value<String>().IsNotNullOrEmpty() == true &&

                       (Data["userId"]?.Value<String>().IsNotNullOrEmpty() == true &&
                        User_Id.TryParse(Data["userId"]?.Value<String>(), out userId) &&
                        TryGetUser(userId, out user))

                        ||

                       (Data["organizationId"]?.Value<String>().IsNotNullOrEmpty() == true &&
                        Organization_Id.TryParse(Data["organizationId"]?.Value<String>(), out organizationId) &&
                        TryGetOrganization(organizationId, out organization)))
                    {

                        switch (Data["@context"]?.Value<String>())
                        {

                            case TelegramNotification.JSONLDContext:

                                var telegramNotification = TelegramNotification.Parse(Data);

                                if (telegramNotification != null)
                                {
                                    user?.        AddNotification(telegramNotification);
                                    organization?.AddNotification(telegramNotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given Telegram notification!"));

                                break;


                            case TelegramGroupNotification.JSONLDContext:

                                var telegramGroupNotification = TelegramGroupNotification.Parse(Data);

                                if (telegramGroupNotification != null)
                                {
                                    user?.        AddNotification(telegramGroupNotification);
                                    organization?.AddNotification(telegramGroupNotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given Telegram group notification!"));

                                break;


                            case SMSNotification.JSONLDContext:

                                var smsnotification = SMSNotification.Parse(Data);

                                if (smsnotification != null)
                                {
                                    user?.        AddNotification(smsnotification);
                                    organization?.AddNotification(smsnotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given SMS notification!"));

                                break;


                            case HTTPSNotification.JSONLDContext:

                                var httpsnotification = HTTPSNotification.Parse(Data);

                                if (httpsnotification != null)
                                {
                                    user?.        AddNotification(httpsnotification);
                                    organization?.AddNotification(httpsnotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given HTTPS notification!"));

                                break;


                            case EMailNotification.JSONLDContext:

                                var emailnotification = EMailNotification.Parse(Data);

                                if (emailnotification != null)
                                {
                                    user?.        AddNotification(emailnotification);
                                    organization?.AddNotification(emailnotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given e-mail notification!"));

                                break;


                            default:
                                DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given 'add notification' command!"));
                                break;

                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given 'add notification' command as context '" + Data["@context"]?.Value<String>() + "' is unknown!"));

                    break;

                #endregion

                #region Remove notification

                case "removeNotification":

                    user          = null;
                    organization  = null;

                    if (Data["@context"]?.Value<String>().IsNotNullOrEmpty() == true &&

                       (Data["userId"]?.Value<String>().IsNotNullOrEmpty() == true &&
                        User_Id.TryParse(Data["userId"]?.Value<String>(), out userId) &&
                        TryGetUser(userId, out user))

                        ||

                       (Data["organizationId"]?.Value<String>().IsNotNullOrEmpty() == true &&
                        Organization_Id.TryParse(Data["organizationId"]?.Value<String>(), out organizationId) &&
                        TryGetOrganization(organizationId, out organization)))
                    {

                        switch (Data["@context"]?.Value<String>())
                        {

                            case TelegramNotification.JSONLDContext:

                                var telegramNotification = TelegramNotification.Parse(Data);

                                if (telegramNotification != null)
                                {
                                    user?.        RemoveNotification(telegramNotification);
                                    organization?.RemoveNotification(telegramNotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given Telegram notification!"));

                                break;


                            case TelegramGroupNotification.JSONLDContext:

                                var telegramGroupNotification = TelegramGroupNotification.Parse(Data);

                                if (telegramGroupNotification != null)
                                {
                                    user?.        RemoveNotification(telegramGroupNotification);
                                    organization?.RemoveNotification(telegramGroupNotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given Telegram group notification!"));

                                break;


                            case SMSNotification.JSONLDContext:

                                var smsnotification = SMSNotification.Parse(Data);

                                if (smsnotification != null)
                                {
                                    user?.        RemoveNotification(smsnotification);
                                    organization?.RemoveNotification(smsnotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given SMS notification!"));

                                break;


                            case HTTPSNotification.JSONLDContext:

                                var httpsnotification = HTTPSNotification.Parse(Data);

                                if (httpsnotification != null)
                                {
                                    user?.        RemoveNotification(httpsnotification);
                                    organization?.RemoveNotification(httpsnotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given HTTPS notification!"));

                                break;


                            case EMailNotification.JSONLDContext:

                                var emailnotification = EMailNotification.Parse(Data);

                                if (emailnotification != null)
                                {
                                    user?.        RemoveNotification(emailnotification);
                                    organization?.RemoveNotification(emailnotification);
                                }

                                else
                                    DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given e-mail notification!"));

                                break;

                        }

                    }

                    else
                        DebugX.Log(String.Concat(nameof(UsersAPI), " Could not parse the given 'remove notification' command!"));

                    break;

                #endregion


                default:
                    DebugX.Log(String.Concat(nameof(UsersAPI), ": does not know what to do with event '", Command,
                                             Sender.IsNotNullOrEmpty() ? " via " + Sender : "",
                                             LineNumber.HasValue ? ", line " + LineNumber.Value : "",
                                             "'!"));
                    break;

            }

        }

        #endregion


        #region (protected internal) WriteToDatabaseFile(              MessageType, JSONData, EventTrackingId, ...)

        /// <summary>
        /// Write data to a log file.
        /// </summary>
        /// <param name="MessageType">The type of the message.</param>
        /// <param name="JSONData">The JSON data of the message.</param>
        /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal Task WriteToDatabaseFile(NotificationMessageType  MessageType,
                                                    JObject                  JSONData,
                                                    EventTracking_Id         EventTrackingId,
                                                    User_Id?                 CurrentUserId   = null)

            => WriteToDatabaseFile(DatabaseFileName,
                                   MessageType,
                                   JSONData,
                                   EventTrackingId,
                                   CurrentUserId);

        #endregion

        #region (protected internal) WriteToDatabaseFile(DatabaseFile, MessageType, JSONData, EventTrackingId, ...)

        /// <summary>
        /// Write data to a database file.
        /// </summary>
        /// <param name="DatabaseFile">The database file.</param>
        /// <param name="MessageType">The type of the message.</param>
        /// <param name="JSONData">The JSON data of the message.</param>
        /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFile(String                   DatabaseFile,
                                                          NotificationMessageType  MessageType,
                                                          JObject                  JSONData,
                                                          EventTracking_Id         EventTrackingId,
                                                          User_Id?                 CurrentUserId     = null)
        {

            if (!DisableLogging || !DisableNotifications)
            {

                try
                {

                    var Now          = Timestamp.Now;

                    var JSONMessage  = new JObject(
                                           new JProperty(MessageType.ToString(),  JSONData),
                                           new JProperty("eventTrackingId",       (EventTrackingId ?? EventTracking_Id.New).ToString()),
                                           new JProperty("userId",                (CurrentUserId ?? CurrentAsyncLocalUserId.Value ?? Robot.Id).ToString()),
                                           new JProperty("systemId",              SystemId.ToString()),
                                           new JProperty("timestamp",             Now.ToIso8601()),
                                           new JProperty("sha256hash",            new JObject(
                                               new JProperty("nonce",                 Guid.NewGuid().ToString().Replace("-", "")),
                                               new JProperty("parentHash",            CurrentDatabaseHashValue)
                                           ))
                                       );

                    var SHA256                = new SHA256Managed();
                    CurrentDatabaseHashValue  = SHA256.ComputeHash(Encoding.Unicode.GetBytes(JSONMessage.ToString(Newtonsoft.Json.Formatting.None))).
                                                       Select(value => String.Format("{0:x2}", value)).
                                                       Aggregate();

                    (JSONMessage["sha256hash"] as JObject)?.Add(new JProperty("hashValue",  CurrentDatabaseHashValue));


                    #region Write to database file

                    if (!DisableLogging)
                    {

                        try
                        {

                            await LogFileSemaphore.WaitAsync();

                            var retry       = 0;
                            var maxRetries  = 23;

                            do
                            {

                                try
                                {

                                    File.AppendAllText(DatabaseFile ?? DatabaseFileName,
                                                       JSONMessage.ToString(Newtonsoft.Json.Formatting.None) + Environment.NewLine);

                                    retry = maxRetries;

                                }
                                catch (IOException ioEx)
                                {
                                    DebugX.Log("Retry " + retry + ": Could not write message '" + MessageType + "' to logfile '" + DatabaseFile + "': " + ioEx.Message);
                                    await Task.Delay(10);
                                    retry++;
                                }
                                catch (Exception e)
                                {
                                    DebugX.Log("Retry " + retry + ": Could not write message '" + MessageType + "' to logfile '" + DatabaseFile + "': " + e.Message);
                                    await Task.Delay(10);
                                    retry++;
                                }

                            } while (retry < maxRetries);

                        }
                        catch (Exception e)
                        {
                            //ToDo: Handle WriteToLogfileAndNotify(...Write to logfile...) exceptions!
                        }
                        finally
                        {
                            LogFileSemaphore.Release();
                        }

                    }

                    #endregion

                }
                catch (Exception e)
                {
                    //ToDo: Handle WriteToLogfileAndNotify(...) exceptions!
                }

            }

        }

        #endregion

        #region WriteCommentToDatabaseFile(Comment = null, DatabaseFile = APIDatabaseFile, ...)

        /// <summary>
        /// Write a comment or just an empty comment to a database file.
        /// </summary>
        /// <param name="Comment">An optional comment.</param>
        /// <param name="DatabaseFile">An optional database file.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task WriteCommentToDatabaseFile(String            Comment           = null,
                                                     String            DatabaseFile      = null,
                                                     EventTracking_Id  EventTrackingId   = null,
                                                     User_Id?          CurrentUserId     = null)
        {

            if (!DisableLogging || !DisableNotifications)
            {

                try
                {

                    if (!DisableLogging)
                    {

                        try
                        {

                            await LogFileSemaphore.WaitAsync();

                            var retry       = 0;
                            var maxRetries  = 23;
                            var text1       = (Comment ?? "no comment!") + (CurrentUserId.HasValue ? "by " + CurrentUserId.ToString() + " " : "");
                            var text2       = "# --" + (text1 != null ? "< " + text1 + " >" : "");
                            var text3       = text2 + new String('-', Math.Max(10, 200 - text2.Length)) + Environment.NewLine;

                            do
                            {

                                try
                                {
                                    File.AppendAllText(DatabaseFile ?? DatabaseFileName, text3);
                                    retry = maxRetries;
                                }
                                catch (IOException ioEx)
                                {
                                    DebugX.Log("Retry " + retry + ": Could not write comment '" + Comment + "' to logfile '" + DatabaseFile + "': " + ioEx.Message);
                                    await Task.Delay(10);
                                    retry++;
                                }
                                catch (Exception e)
                                {
                                    DebugX.Log("Retry " + retry + ": Could not write comment '" + Comment + "' to logfile '" + DatabaseFile + "': " + e.Message);
                                    await Task.Delay(10);
                                    retry++;
                                }

                            } while (retry < maxRetries);

                        }
                        catch (Exception e)
                        {
                            //ToDo: Handle WriteToLogfileAndNotify(...Write to logfile...) exceptions!
                        }
                        finally
                        {
                            LogFileSemaphore.Release();
                        }

                    }

                }
                catch (Exception e)
                {
                    //ToDo: Handle WriteToLogfileAndNotify(...) exceptions!
                }

            }

        }

        #endregion

        #region WriteToCustomLogfile(Logfilename, Lock, Data)

        public async Task WriteToCustomLogfile(String         Logfilename,
                                               SemaphoreSlim  Lock,
                                               String         Data)
        {

            if (!DisableLogging)
            {

                try
                {

                    await Lock.WaitAsync();

                    var retry       = 0;
                    var maxRetries  = 23;

                    do
                    {

                        try
                        {

                            File.AppendAllText(Logfilename,
                                               Data +
                                               Environment.NewLine);

                            retry = maxRetries;

                        }
                        catch (IOException ioEx)
                        {
                            DebugX.Log("Retry " + retry + ": Could not write custom logfile '" + Logfilename + "': " + ioEx.Message);
                            await Task.Delay(10);
                            retry++;
                        }
                        catch (Exception e)
                        {
                            DebugX.Log("Retry " + retry + ": Could not write custom logfile '" + Logfilename + "': " + e.Message);
                            await Task.Delay(10);
                            retry++;
                        }

                    } while (retry < maxRetries);

                }
                catch (Exception e)
                {
                    //ToDo: Handle WriteToCustomLogfile(...) exceptions!
                }
                finally
                {
                    Lock.Release();
                }

            }

        }

        #endregion

        #endregion

        #region ECC cryptography...

        #region GenerateKeys(ECParameters)

        public AsymmetricCipherKeyPair GenerateKeys(X9ECParameters ECParameters)
        {

            var EllipticCurveSpec = new ECDomainParameters(ECParameters.Curve,
                                                           ECParameters.G,
                                                           ECParameters.N,
                                                           ECParameters.H,
                                                           ECParameters.GetSeed());

            var g = GeneratorUtilities.GetKeyPairGenerator("ECDH");
            g.Init(new ECKeyGenerationParameters(EllipticCurveSpec, new SecureRandom()));

            return g.GenerateKeyPair();

        }

        #endregion


        #region SerializePrivateKey (PrivateKey)

        public Byte[] SerializePrivateKey(ECPrivateKeyParameters PrivateKey)
            => PrivateKey.D.ToByteArray();

        #endregion

        #region SerializePublicKey  (PublicKey)

        public Byte[] SerializePublicKey(ECPublicKeyParameters PublicKey)

            => PublicKey.Q.GetEncoded();

        #endregion

        #region SerializePublicKeyXY(PublicKey)

        public Tuple<Byte[], Byte[]> SerializePublicKeyXY(ECPublicKeyParameters PublicKey)

            => new Tuple<Byte[], Byte[]>(PublicKey.Q.XCoord.ToBigInteger().ToByteArray(),
                                         PublicKey.Q.YCoord.ToBigInteger().ToByteArray());

        #endregion


        #region ParsePrivateKeyBytes (ECParameters,      PrivateKeyBytes)

        public ECPrivateKeyParameters ParsePrivateKeyBytes(X9ECParameters  ECParameters,
                                                           Byte[]          PrivateKeyBytes)

            => ParsePrivateKeyBytes(new ECDomainParameters(ECParameters.Curve,
                                                           ECParameters.G,
                                                           ECParameters.N,
                                                           ECParameters.H,
                                                           ECParameters.GetSeed()),
                                    PrivateKeyBytes);

        #endregion

        #region ParsePrivateKeyBytes (EllipticCurveSpec, PrivateKeyBytes)

        public ECPrivateKeyParameters ParsePrivateKeyBytes(ECDomainParameters  EllipticCurveSpec,
                                                           Byte[]              PrivateKeyBytes)

            => new ECPrivateKeyParameters(
                   new BigInteger(PrivateKeyBytes),
                   EllipticCurveSpec);


        #endregion

        #region ParsePrivateKeyHEX   (ECParameters,      PrivateKeyHEX)

        public ECPrivateKeyParameters ParsePrivateKeyHEX(X9ECParameters  ECParameters,
                                                         String          PrivateKeyHEX)

            => ParsePrivateKeyHEX(new ECDomainParameters(ECParameters.Curve,
                                                         ECParameters.G,
                                                         ECParameters.N,
                                                         ECParameters.H,
                                                         ECParameters.GetSeed()),
                                  PrivateKeyHEX);

        #endregion

        #region ParsePrivateKeyHEX   (EllipticCurveSpec, PrivateKeyHEX)

        public ECPrivateKeyParameters ParsePrivateKeyHEX(ECDomainParameters  EllipticCurveSpec,
                                                         String              PrivateKeyHEX)

            => new ECPrivateKeyParameters(
                   new BigInteger(PrivateKeyHEX, 16),
                   EllipticCurveSpec);


        #endregion

        #region ParsePrivateKeyBase64(ECParameters,      PrivateKeyBase64)

        public ECPrivateKeyParameters ParsePrivateKeyBase64(X9ECParameters  ECParameters,
                                                            String          PrivateKeyBase64)

            => ParsePrivateKeyBase64(new ECDomainParameters(ECParameters.Curve,
                                                            ECParameters.G,
                                                            ECParameters.N,
                                                            ECParameters.H,
                                                            ECParameters.GetSeed()),
                                     PrivateKeyBase64);

        #endregion

        #region ParsePrivateKeyBase64(EllipticCurveSpec, PrivateKeyBase64)

        public ECPrivateKeyParameters ParsePrivateKeyBase64(ECDomainParameters  EllipticCurveSpec,
                                                            String              PrivateKeyBase64)

            => new ECPrivateKeyParameters(
                   new BigInteger(PrivateKeyBase64.FromBase64()),
                   EllipticCurveSpec);

        #endregion


        #region ParsePublicKey       (ECParameters,      PublicKey)

        public ECPublicKeyParameters ParsePublicKey(X9ECParameters  ECParameters,
                                                    Byte[]          PublicKey)

            => new ECPublicKeyParameters("ECDSA",
                                         ECParameters.Curve.DecodePoint(PublicKey),
                                         new ECDomainParameters(ECParameters.Curve,
                                                                ECParameters.G,
                                                                ECParameters.N,
                                                                ECParameters.H,
                                                                ECParameters.GetSeed()));

        #endregion

        #region ParsePublicKey       (EllipticCurveSpec, PublicKey)

        public ECPublicKeyParameters ParsePublicKey(ECDomainParameters  EllipticCurveSpec,
                                                    Byte[]              PublicKey)

            => new ECPublicKeyParameters("ECDSA",
                                         EllipticCurveSpec.Curve.DecodePoint(PublicKey),
                                         EllipticCurveSpec);

        #endregion

        #region ParsePublicKeyHEX    (ECParameters,      PublicKeyHEX)

        public ECPublicKeyParameters ParsePublicKeyHEX(X9ECParameters ECParameters,
                                                       String         PublicKeyHEX)

            => new ECPublicKeyParameters("ECDSA",
                                         ECParameters.Curve.DecodePoint(PublicKeyHEX.HexStringToByteArray()),
                                         new ECDomainParameters(ECParameters.Curve,
                                                                ECParameters.G,
                                                                ECParameters.N,
                                                                ECParameters.H,
                                                                ECParameters.GetSeed()));

        #endregion

        #region ParsePublicKeyHEX    (EllipticCurveSpec, PublicKeyHEX)

        public ECPublicKeyParameters ParsePublicKeyHEX(ECDomainParameters  EllipticCurveSpec,
                                                       String              PublicKeyHEX)

            => new ECPublicKeyParameters("ECDSA",
                                         EllipticCurveSpec.Curve.DecodePoint(PublicKeyHEX.HexStringToByteArray()),
                                         EllipticCurveSpec);

        #endregion

        #region ParsePublicKeyBase64 (ECParameters,      PublicKeyBase64)

        public ECPublicKeyParameters ParsePublicKeyBase64(X9ECParameters ECParameters,
                                                          String         PublicKeyBase64)

            => new ECPublicKeyParameters("ECDSA",
                                         ECParameters.Curve.DecodePoint(PublicKeyBase64.FromBase64()),
                                         new ECDomainParameters(ECParameters.Curve,
                                                                ECParameters.G,
                                                                ECParameters.N,
                                                                ECParameters.H,
                                                                ECParameters.GetSeed()));

        #endregion

        #region ParsePublicKeyBase64 (EllipticCurveSpec, PublicKeyBase64)

        public ECPublicKeyParameters ParsePublicKeyBase64(ECDomainParameters  EllipticCurveSpec,
                                                          String              PublicKeyBase64)

            => new ECPublicKeyParameters("ECDSA",
                                         EllipticCurveSpec.Curve.DecodePoint(PublicKeyBase64.FromBase64()),
                                         EllipticCurveSpec);

        #endregion


        #region CalculatePublicKey(PrivateKey)

        /// <summary>
        /// Calculate the public key only using domainParams.getG() and private key.
        /// </summary>
        /// <param name="PrivateKey"></param>
        public ECPublicKeyParameters CalculatePublicKey(ECPrivateKeyParameters PrivateKey)

            => new ECPublicKeyParameters("ECDSA",
                                         PrivateKey.Parameters.Curve.DecodePoint(
                                             PrivateKey.Parameters.G.Multiply(
                                                 new BigInteger(PrivateKey.D.ToByteArray()
                                             )
                                         ).GetEncoded()),
                                         PrivateKey.Parameters);

        #endregion


        #region VerifyMessageSignatures(JObject JSONMessage)

        public Boolean VerifyMessageSignatures(JObject JSONMessage)
        {

            if (JSONMessage == null)
                return false;

            if (!(JSONMessage["signatures"] is JArray signaturesJSON) || signaturesJSON.Type != JTokenType.Array || signaturesJSON.Count < 1)
                return false;

            JObject JSONMessageCopy = JObject.Parse(JSONMessage.ToString(Newtonsoft.Json.Formatting.None));
            JSONMessageCopy.Remove("signatures");
            var plainText           = JSONMessageCopy.ToString(Newtonsoft.Json.Formatting.None)?.ToUTF8Bytes();


            // loop!

            var signatureJSON = signaturesJSON.First;

            if (!(signatureJSON is JObject) || signatureJSON.Type != JTokenType.Object)
                return false;

            var publicKey  = signatureJSON["publicKey"]?.Value<String>()?.FromBase64();
            var signature  = signatureJSON["signature"]?.Value<String>()?.FromBase64();

            if (publicKey.IsNullOrEmpty() || signature.IsNullOrEmpty())
                return false;


            Byte[] pubKey = publicKey;
            //var aa = new X509EncodedKeySpec(signaturePublicKey);
            //var input = new Asn1InputStream(signaturePublicKey);

            //Byte[] pubKey = null;

            //Asn1Object p;
            //while ((p = input.ReadObject()) != null)
            //{
            //    pubKey = ((p.ToAsn1Object() as Asn1Sequence)[1] as DerBitString).GetBytes();
            //    Console.WriteLine(p.ToString());
            //}

            var ecp           = SecNamedCurves.GetByName("secp256r1");
            var ecParams      = new ECDomainParameters(ecp.Curve, ecp.G, ecp.N, ecp.H, ecp.GetSeed());
            var pubKeyParams  = new ECPublicKeyParameters("ECDSA", ecParams.Curve.DecodePoint(pubKey), ecParams);

            var SHA256Hash    = new SHA256Managed().ComputeHash(plainText);
            var BlockSize     = 32;

            var verifier      = SignerUtilities.GetSigner("NONEwithECDSA");
            verifier.Init(false, pubKeyParams);
            verifier.BlockUpdate(SHA256Hash, 0, BlockSize);
            var result        = verifier.VerifySignature(signature);

            return result;

        }

        #endregion

        #region SignMessage(JObject JSONMessage, params KeyPairs)

        public Boolean SignMessage(JObject JSONMessage, params AsymmetricCipherKeyPair[] KeyPairs)
        {

            if (JSONMessage == null || KeyPairs == null || !KeyPairs.Any())
                return false;

            foreach (var KeyPair in KeyPairs)
            {

                if (KeyPair == null)
                    continue;

                var privateKey  = KeyPair?.Private as ECPrivateKeyParameters;
                var publicKey   = KeyPair?.Public  as ECPublicKeyParameters;

                if (privateKey == null)
                    continue;

                if (publicKey == null)
                    continue;


                if (JSONMessage["signatures"] != null && JSONMessage["signatures"].Type != JTokenType.Array)
                    return false;

                var messageText  = JSONMessage.ToString(Newtonsoft.Json.Formatting.None);
                var messageJSON  = JObject.Parse(messageText);
                messageJSON.Remove("signatures");

                var cc = new Newtonsoft.Json.Converters.IsoDateTimeConverter {
                    DateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffZ"
                };

                var plainText    = messageJSON.ToString(Newtonsoft.Json.Formatting.None, cc);
                var SHA256Hash   = new SHA256Managed().ComputeHash(plainText.ToUTF8Bytes());
                var BlockSize    = 32;

                if (!(JSONMessage["signatures"] is JArray signaturesJSON))
                {
                    signaturesJSON = new JArray();
                    JSONMessage.Add("signatures", signaturesJSON);
                }

                var signatureJSON = new JObject();
                signaturesJSON.Add(signatureJSON);


                var publicKey_Bytes = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(publicKey).PublicKeyData.GetBytes();
                signatureJSON.Add(new JProperty("publicKey",     Convert.ToBase64String(publicKey_Bytes)));
                signatureJSON.Add(new JProperty("publicKeyHEX",  publicKey_Bytes.ToHexString()));

                var signer       = SignerUtilities.GetSigner("NONEwithECDSA");
                signer.Init(true, privateKey);
                signer.BlockUpdate(SHA256Hash, 0, BlockSize);
                var signature    = signer.GenerateSignature();
                signatureJSON.Add(new JProperty("signature",    Convert.ToBase64String(signature)));
                signatureJSON.Add(new JProperty("signatureHEX", signature.ToHexString()));


                Console.WriteLine();
                Console.WriteLine("Response: "  + JSONMessage.ToString(Newtonsoft.Json.Formatting.None));
                Console.WriteLine("PlainText: " + plainText);
                Console.WriteLine("sha256: "    + SHA256Hash.ToHexString());

                //// Re-Verify...
                //{
                //    var verifier = SignerUtilities.GetSigner("NONEwithECDSA");
                //    verifier.Init(false, publicKey);
                //    verifier.BlockUpdate(SHA256Hash, 0, BlockSize);
                //    Console.WriteLine("Signature Verification(1): " + (verifier.VerifySignature(signature) ? "ok" : "failed!"));
                //}

                {
                    var ecp           = SecNamedCurves.GetByName("secp256r1");
                    var ecParams      = new ECDomainParameters(ecp.Curve, ecp.G, ecp.N, ecp.H, ecp.GetSeed());
                    var pubKeyParams  = new ECPublicKeyParameters("ECDSA", ecParams.Curve.DecodePoint(publicKey_Bytes), ecParams);
                    var verifier      = SignerUtilities.GetSigner("NONEwithECDSA");
                    verifier.Init(false, pubKeyParams);
                    verifier.BlockUpdate(SHA256Hash, 0, BlockSize);
                    Console.WriteLine("Signature Verification(2): " + (verifier.VerifySignature(signature) ? "ok" : "failed!"));
                }

                Console.WriteLine();

            }

            return true;

        }

        #endregion


        //// key agreement protocol => ConcatenationKDFGenerator?
        //var keyAgreement  = AgreementUtilities.GetBasicAgreement("ECDH");
        //keyAgreement.Init(backendAPIPrivateKey);
        //var sharedSecret  = keyAgreement.CalculateAgreement(ownerPublicKey).
        //                                 ToByteArrayUnsigned();

        //var sha256Digest  = DigestUtilities.GetDigest("SHA256");
        //var keySize       = 32; // sha256Digest.GetDigestSize()
        //var kdf           = new ECDHKekGenerator(sha256Digest);
        //kdf.Init(new DHKdfParameters(NistObjectIdentifiers.Aes,
        //                             sharedSecret.Length,
        //                             sharedSecret));
        //var symmetricKey  = new Byte[keySize];
        //kdf.GenerateBytes(symmetricKey, 0, keySize);
        //var bigInt        = new BigInteger(1, symmetricKey);

        #endregion


        #region Users

        #region Data

        /// <summary>
        /// An enumeration of all users.
        /// </summary>
        protected internal readonly Dictionary<User_Id, User> _Users;

        /// <summary>
        /// An enumeration of all users.
        /// </summary>
        public IEnumerable<User> Users
        {
            get
            {

                if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _Users.Values.ToArray();

                    }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return new User[0];

            }
        }

        #endregion


        #region (class) UserContext

        /// <summary>
        /// A user context to simplify API usage.
        /// </summary>
        public class UserContext : IDisposable
        {

            /// <summary>
            /// The current user identification.
            /// </summary>
            public User_Id  Current    { get; }

            /// <summary>
            /// The privious user identification.
            /// </summary>
            public User_Id? Previous   { get; }


            /// <summary>
            /// Create a new user context.
            /// </summary>
            /// <param name="UserId">The new user identification.</param>
            public UserContext(User_Id UserId)
            {
                Previous                       = CurrentAsyncLocalUserId.Value;
                Current                        = UserId;
                CurrentAsyncLocalUserId.Value  = UserId;
            }

            /// <summary>
            /// Dispose this object.
            /// </summary>
            public void Dispose()
            {
                CurrentAsyncLocalUserId.Value = Previous;
            }

        }

        #endregion

        #region SetUserContext

        /// <summary>
        /// Set the current user context.
        /// </summary>
        /// <remarks>Wrap this into a using statement.</remarks>
        /// <param name="User">A user.</param>
        public UserContext SetUserContext(User User)

            => new UserContext(User.Id);


        /// <summary>
        /// Set the current user context.
        /// </summary>
        /// <remarks>Wrap this into a using statement.</remarks>
        /// <param name="UserId">A user identification.</param>
        public UserContext SetUserContext(User_Id UserId)

            => new UserContext(UserId);

        #endregion

        #region CurrentAsyncLocalUserId

        /// <summary>
        /// The current async local user identification.
        /// </summary>
        protected internal static AsyncLocal<User_Id?> CurrentAsyncLocalUserId = new AsyncLocal<User_Id?>();

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(User,                      MessageType,    OldUser = null, ...)

        /// <summary>
        /// Write the given user to the database and send out notifications.
        /// </summary>
        /// <typeparam name="TUser">The type of the user.</typeparam>
        /// <param name="User">The user.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldUser">The old/updated user.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify<TUser>(TUser                    User,
                                                                          NotificationMessageType  MessageType,
                                                                          TUser                    OldUser           = null,
                                                                          EventTracking_Id         EventTrackingId   = null,
                                                                          User_Id?                 CurrentUserId     = null)

            where TUser : User

        {

            if (User is null)
                throw new ArgumentNullException(nameof(User),         "The given user must not be null!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      User.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(User,
                                    MessageType,
                                    OldUser,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (User,                      MessageType(s), OldUser = null, ...)

        protected virtual String UserHTMLInfo(User User)

            => String.Concat(User.Name.IsNeitherNullNorEmpty()
                                 ? String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/users/", User.Id, "\">", User.Name, "</a> ",
                                                "(<a href=\"https://", ExternalDNSName, BasePath, "/users/", User.Id, "\">", User.Id,   "</a>)")
                                 : String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/users/", User.Id, "\">", User.Id,   "</a>"));

        protected virtual String UserTextInfo(User User)

            => String.Concat(User.Name.IsNeitherNullNorEmpty()
                                 ? String.Concat("'", User.Name, "' (", User.Id, ")")
                                 : String.Concat("'", User.Id.ToString(), "'"));


        /// <summary>
        /// Send user notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldUser">The old/updated user.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal virtual Task SendNotifications(User                     User,
                                                          NotificationMessageType  MessageType,
                                                          User                     OldUser           = null,
                                                          EventTracking_Id         EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)

            => SendNotifications(User,
                                 new NotificationMessageType[] { MessageType },
                                 OldUser,
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldUser">The old/updated user.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async virtual Task SendNotifications(User                                  User,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                User                                  OldUser           = null,
                                                                EventTracking_Id                      EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (User is null)
                throw new ArgumentNullException(nameof(User),          "The given user must not be null!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldUser == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            ComparizionResult? comparizionResult = null;

            if (messageTypes.Contains(updateUser_MessageType))
                comparizionResult = User.CompareWith(OldUser);


            #region Get notification settings from his organisations and higher-level organizations

            var allHisOrganizations = User.User2Organization_OutEdges.
                                           Where (edge => edge.EdgeLabel == User2OrganizationEdgeLabel.IsAdmin ||
                                                          edge.EdgeLabel == User2OrganizationEdgeLabel.IsMember).
                                           Select(edge => edge.Target).
                                           ToSafeHashSet();

            // Limit the number of levels, or people will get overwhelmed by e-mails...
            for (var i = 0; i <= 5; i++)
            {
                foreach (var higherLevelOrganization in allHisOrganizations.ToArray().
                                                                            SelectMany(org => org.Organization2OrganizationOutEdges.
                                                                                                  Where (edge => edge.EdgeLabel == Organization2OrganizationEdgeLabel.IsChildOf).
                                                                                                  Select(edge => edge.Target)))
                {
                    if (higherLevelOrganization != NoOwner)
                        allHisOrganizations.Add(higherLevelOrganization);
                }
            }

            #endregion


           if (!DisableNotifications)
           {

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        var AllTelegramNotifications  = User.GetNotificationsOf<TelegramNotification>(messageTypes).
                                                             ToSafeHashSet();

                        foreach (var telegramNotification in allHisOrganizations.SelectMany(org => org.GetNotificationsOf<TelegramNotification>(messageTypes)))
                            AllTelegramNotifications.Add(telegramNotification);

                        if (AllTelegramNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(addUser_MessageType))
                                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " was successfully added."),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                            if (messageTypes.Contains(updateUser_MessageType))
                                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " information had been successfully updated.\n", comparizionResult?.ToTelegram() ?? ""),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    var AllSMSNotifications  = User.GetNotificationsOf<SMSNotification>(messageTypes).ToSafeHashSet();

                    foreach (var SMSNotification in allHisOrganizations.SelectMany(org => org.GetNotificationsOf<SMSNotification>(messageTypes)))
                        AllSMSNotifications.Add(SMSNotification);

                    if (AllSMSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(addUser_MessageType))
                        {
                            SendSMS(String.Concat("User ", UserTextInfo(User), " was successfully added. ",
                                                  "https://", ExternalDNSName, BasePath, "/users/", User.Id),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);
                        }

                        if (messageTypes.Contains(updateUser_MessageType))
                        {
                            SendSMS(String.Concat("User ", UserTextInfo(User), " information had been successfully updated. ",
                                                  "https://", ExternalDNSName, BasePath, "/users/", User.Id),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);
                        }

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications  = User.GetNotificationsOf<HTTPSNotification>(messageTypes).
                                                      ToSafeHashSet();

                    foreach (var HTTPSNotification in allHisOrganizations.SelectMany(org => org.GetNotificationsOf<HTTPSNotification>(messageTypes)))
                        AllHTTPSNotifications.Add(HTTPSNotification);

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(addUser_MessageType))
                        {
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("userCreated",
                                                                 User.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));
                        }

                        if (messageTypes.Contains(updateUser_MessageType))
                        {
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("userUpdated",
                                                                 User.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));
                        }

                        //if (messageTypes.Contains(deleteUser_MessageType))
                        //{
                        //    await SendHTTPSNotifications(AllHTTPSNotifications,
                        //                                 new JObject(
                        //                                     new JProperty("userRemoved",
                        //                                         User.ToJSON()
                        //                                     ),
                        //                                     new JProperty("timestamp", Timestamp.Now.ToIso8601())
                        //                                 ));
                        //}

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region E-Mail Notifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications  = User.GetNotificationsOf<EMailNotification>(messageTypes).
                                                          ToSafeHashSet();

                        foreach (var eMailNotification in allHisOrganizations.SelectMany(org => org.GetNotificationsOf<EMailNotification>(messageTypes)))
                            AllEMailNotifications.Add(eMailNotification);

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(addUser_MessageType))
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIPassphrase,
                                             Subject        = "User " + UserTextInfo(User) + " was successfully created",

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "User ", UserHTMLInfo(User), " was successfully created.",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "User ", UserTextInfo(User), " was successfully created.\r\n",
                                                                            "https://", ExternalDNSName, BasePath, "/users/", User.Id, "\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });

                            if (messageTypes.Contains(updateUser_MessageType))
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIPassphrase,
                                             Subject        = "User " + UserTextInfo(User) + " information had been successfully updated",

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "User ", UserHTMLInfo(User), " information had been successfully updated.<br /><br />",
                                                                            comparizionResult?.ToHTML() ?? "",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "User ", UserTextInfo(User), " information had been successfully updated.\r\r\r\r",
                                                                            comparizionResult?.ToText() ?? "",
                                                                            "\r\r\r\r",
                                                                            "https://", ExternalDNSName, BasePath, "/users/", User.Id, "\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) SendNotifications           (User, ParentOrganizations, MessageType(s), ...)

        /// <summary>
        /// Send user notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="ParentOrganizations">The enumeration of parent organizations.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal virtual Task SendNotifications(User                       User,
                                                          IEnumerable<Organization>  ParentOrganizations,
                                                          NotificationMessageType    MessageType,
                                                          EventTracking_Id           EventTrackingId   = null,
                                                          User_Id?                   CurrentUserId     = null)

            => SendNotifications(User,
                                 ParentOrganizations,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="ParentOrganizations">The enumeration of parent organizations.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async virtual Task SendNotifications(User                                  User,
                                                                IEnumerable<Organization>             ParentOrganizations,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id                      EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (User is null)
                throw new ArgumentNullException(nameof(User),                 "The given user must not be null or empty!");

            if (ParentOrganizations is null)
                ParentOrganizations = new Organization[0];

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),         "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    messageTypesHash.Add(addUser_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    messageTypesHash.Add(OldUser == null
            //                           ? addUser_MessageType
            //                           : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        var AllTelegramNotifications  = ParentOrganizations.
                                                            SelectMany(parent => parent.User2OrganizationEdges).
                                                            SelectMany(edge   => edge.Source.GetNotificationsOf<TelegramNotification>(deleteUser_MessageType)).
                                                            ToSafeHashSet();

                        if (AllTelegramNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteUser_MessageType))
                                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " has been deleted."),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    var AllSMSNotifications = ParentOrganizations.
                                                  SelectMany(parent => parent.User2OrganizationEdges).
                                                  SelectMany(edge   => edge.Source.GetNotificationsOf<SMSNotification>(deleteUser_MessageType)).
                                                  ToSafeHashSet();

                    if (AllSMSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteUser_MessageType))
                            SendSMS(String.Concat("User ", UserTextInfo(User), " has been deleted."),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications = ParentOrganizations.
                                                    SelectMany(parent => parent.User2OrganizationEdges).
                                                    SelectMany(edge   => edge.Source.GetNotificationsOf<HTTPSNotification>(deleteUser_MessageType)).
                                                    ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteUser_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("userDeleted",
                                                                 User.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications = ParentOrganizations.
                                                        SelectMany(parent => parent.User2OrganizationEdges).
                                                        SelectMany(edge   => edge.Source.GetNotificationsOf<EMailNotification>(deleteUser_MessageType)).
                                                        ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteUser_MessageType))
                                await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIPassphrase,
                                         Subject        = "User " + UserTextInfo(User) + " has been deleted",

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserHTMLInfo(User), " has been deleted.<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserTextInfo(User), " has been deleted.\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) GetUserSerializator         (Request, User)

        protected internal UserToJSONDelegate GetUserSerializator(HTTPRequest  Request,
                                                                  User         User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (user,
                            embedded,
                            includeCryptoHash)

                            => user.ToJSON(embedded,
                                           includeCryptoHash);

            }

        }

        #endregion


        #region AddUser           (User, (Membership, Organization), SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// A delegate called whenever a user was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user was added.</param>
        /// <param name="User">The added user.</param>
        /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnUserAddedDelegate(DateTime          Timestamp,
                                                 User              User,
                                                 EventTracking_Id  EventTrackingId   = null,
                                                 User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user was added.
        /// </summary>
        public event OnUserAddedDelegate OnUserAdded;


        #region (protected internal) _AddUser(User,                            SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user to the API.
        /// </summary>
        /// <param name="User">A new user to be added to this API.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddUserResult> _AddUser(User                            User,
                                                              Boolean                         SkipDefaultNotifications   = false,
                                                              Action<User, EventTracking_Id>  OnAdded                    = null,
                                                              EventTracking_Id                EventTrackingId            = null,
                                                              User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return AddUserResult.ArgumentError(User,
                                                   eventTrackingId,
                                                   nameof(User),
                                                   "The given user must not be null!");

            if (User.API != null && User.API != this)
                return AddUserResult.ArgumentError(User,
                                                   eventTrackingId,
                                                   nameof(User),
                                                   "The given user is already attached to another API!");

            if (_Users.ContainsKey(User.Id))
                return AddUserResult.ArgumentError(User,
                                                   eventTrackingId,
                                                   nameof(User),
                                                   "The given user identification '" + User.Id + "' already exists!");

            if (User.Id.Length < MinUserIdLength)
                return AddUserResult.ArgumentError(User,
                                                   eventTrackingId,
                                                   nameof(User),
                                                   "The given user identification '" + User.Id + "' is too short!");

            if (User.Name.IsNullOrEmpty() || User.Name.Trim().IsNullOrEmpty())
                return AddUserResult.ArgumentError(User,
                                                   eventTrackingId,
                                                   nameof(User),
                                                   "The given user name must not be null!");

            if (User.Name.Length < MinUserNameLength)
                return AddUserResult.ArgumentError(User,
                                                   eventTrackingId,
                                                   nameof(User),
                                                   "The given user name '" + User.Name + "' is too short!");

            User.API = this;


            await WriteToDatabaseFile(addUser_MessageType,
                                      User.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _Users.Add(User.Id, User);

            #region Register 'New User Default'-Notifications

            if (!SkipDefaultNotifications)
            {

                var newUserDefaultNotificationMessageGroups = _NotificationGroups.Values.
                                                                  SelectMany(group       => group.Notifications).
                                                                  Where     (description => description.Tags.Contains(NotificationTag.NewUserDefault)).
                                                                  SelectMany(description => description.Messages).
                                                                  ToSafeHashSet();

                if (newUserDefaultNotificationMessageGroups.Any())
                    await _AddNotification(User,
                                           new EMailNotification(User.EMail,
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 newUserDefaultNotificationMessageGroups,
                                                                 "Default notifications for new users"),
                                           eventTrackingId,
                                           CurrentUserId);

            }

            #endregion


            OnAdded?.Invoke(User,
                            eventTrackingId);

            var OnUserAddedLocal = OnUserAdded;
            if (OnUserAddedLocal != null)
                await OnUserAddedLocal?.Invoke(Timestamp.Now,
                                               User,
                                               eventTrackingId,
                                               CurrentUserId);

            var resetPasswordResult = await _ResetPassword(User,
                                                           SuppressNotifications: true,
                                                           EventTrackingId:       eventTrackingId);

            await SMTPClient.Send(NewUserSignUpEMailCreator(User,
                                                            User.EMail,
                                                            resetPasswordResult.PasswordReset.SecurityToken1,
                                                            User.MobilePhone.HasValue,
                                                            DefaultLanguage,
                                                            eventTrackingId));

            await SendNotifications(User,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);


            return AddUserResult.Success(User,
                                         eventTrackingId);

        }

        #endregion

        #region AddUser                      (User,                            SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult> AddUser(User                            User,
                                                 Boolean                         SkipDefaultNotifications   = false,
                                                 Action<User, EventTracking_Id>  OnAdded                    = null,
                                                 EventTracking_Id                EventTrackingId            = null,
                                                 User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddUser(User,
                                          SkipDefaultNotifications,
                                          OnAdded,
                                          eventTrackingId,
                                          CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddUserResult.Failed(User,
                                                eventTrackingId,
                                                e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddUserResult.Failed(User,
                                        eventTrackingId,
                                        "Internal locking failed!");

        }

        #endregion

        #region AddUser                      (User, AccessRight, Organization, SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user and add him/her to the given organization.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult> AddUser(User                            User,
                                                 User2OrganizationEdgeLabel      AccessRight,
                                                 Organization                    Organization,
                                                 Boolean                         SkipDefaultNotifications   = false,
                                                 Action<User, EventTracking_Id>  OnAdded                    = null,
                                                 EventTracking_Id                EventTrackingId            = null,
                                                 User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        var result = await _AddUser(User,
                                                    SkipDefaultNotifications,
                                                    async(_user, _eventTrackingId) => {

                                                        await _AddUserToOrganization(_user,
                                                                                     AccessRight,
                                                                                     Organization,
                                                                                     _eventTrackingId,
                                                                                     SuppressNotifications:  true,
                                                                                     CurrentUserId:          CurrentUserId);

                                                        OnAdded?.Invoke(_user,
                                                                        _eventTrackingId);

                                                    },
                                                    eventTrackingId ?? EventTracking_Id.New,
                                                    CurrentUserId);

                        result.Organization = Organization;

                        if (result?.IsSuccess == true)
                            await SendNotifications(User,
                                                    AccessRight,
                                                    Organization,
                                                    addUserToOrganization_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                        return result;

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserResult.Failed(User,
                                                    eventTrackingId,
                                                    e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserResult.Failed(User,
                                        eventTrackingId,
                                        "Internal locking failed!");

        }

        #endregion

        #region AddUser                      (User, AccessRights,              SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user and add him/her to the given organization.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="AccessRights">The organization memberships of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserResult> AddUser(User                                                          User,
                                                 IEnumerable<Tuple<User2OrganizationEdgeLabel, Organization>>  AccessRights,
                                                 Boolean                                                       SkipDefaultNotifications   = false,
                                                 Action<User, EventTracking_Id>                                OnAdded                    = null,
                                                 EventTracking_Id                                              EventTrackingId            = null,
                                                 User_Id?                                                      CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (AccessRights is null || !AccessRights.Any())
                return AddUserResult.Failed(User,
                                            eventTrackingId,
                                            "The given enumeration of access rights must not be null or empty!");


            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        var result = await _AddUser(User,
                                                    SkipDefaultNotifications,
                                                    async(_user, _eventTrackingId) => {

                                                        foreach (var accessRight in AccessRights)
                                                            await _AddUserToOrganization(_user,
                                                                                         accessRight.Item1,
                                                                                         accessRight.Item2,
                                                                                         _eventTrackingId,
                                                                                         SuppressNotifications:  true,
                                                                                         CurrentUserId:          CurrentUserId);

                                                        OnAdded?.Invoke(_user,
                                                                        _eventTrackingId);

                                                    },
                                                    eventTrackingId ?? EventTracking_Id.New,
                                                    CurrentUserId);

                        result.Organization = AccessRights.First().Item2;

                        if (result?.IsSuccess == true)
                        {
                            foreach (var accessRight in AccessRights)
                                await SendNotifications(User,
                                                        accessRight.Item1,
                                                        accessRight.Item2,
                                                        addUserToOrganization_MessageType,
                                                        eventTrackingId,
                                                        CurrentUserId);
                        }

                        return result;

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserResult.Failed(User,
                                                    eventTrackingId,
                                                    e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserResult.Failed(User,
                                        eventTrackingId,
                                        "Internal locking failed!");

        }

        #endregion

        #endregion

        #region AddUserIfNotExists(User, (Membership, Organization), SkipDefaultNotifications = false, OnAdded = null, ...)

        #region (protected internal) _AddUserIfNotExists(User,                            SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given user to the API.
        /// </summary>
        /// <param name="User">A new user to be added to this API.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddUserIfNotExistsResult> _AddUserIfNotExists(User                            User,
                                                                                    Boolean                         SkipDefaultNotifications   = false,
                                                                                    Action<User, EventTracking_Id>  OnAdded                    = null,
                                                                                    EventTracking_Id                EventTrackingId            = null,
                                                                                    User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return AddUserIfNotExistsResult.ArgumentError(User,
                                                              eventTrackingId,
                                                              nameof(User),
                                                              "The given user must not be null!");

            if (User.API != null && User.API != this)
                return AddUserIfNotExistsResult.ArgumentError(User,
                                                              eventTrackingId,
                                                              nameof(User),
                                                              "The given user is already attached to another API!");

            if (_Users.ContainsKey(User.Id))
                return AddUserIfNotExistsResult.Success(_Users[User.Id],
                                                        AddedOrIgnored.Ignored,
                                                        eventTrackingId);

            if (User.Id.Length < MinUserIdLength)
                return AddUserIfNotExistsResult.ArgumentError(User,
                                                              eventTrackingId,
                                                              nameof(User),
                                                              "The given user identification '" + User.Id + "' is too short!");

            if (User.Name.IsNullOrEmpty() || User.Name.Trim().IsNullOrEmpty())
                return AddUserIfNotExistsResult.ArgumentError(User,
                                                              eventTrackingId,
                                                              nameof(User),
                                                              "The given user name must not be null!");

            if (User.Name.Length < MinUserNameLength)
                return AddUserIfNotExistsResult.ArgumentError(User,
                                                              eventTrackingId,
                                                              nameof(User),
                                                              "The given user name '" + User.Name + "' is too short!");

            User.API = this;


            await WriteToDatabaseFile(addUserIfNotExists_MessageType,
                                      User.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _Users.Add(User.Id, User);

            #region Register 'New User Default'-Notifications

            if (!SkipDefaultNotifications)
            {

                var newUserDefaultNotificationMessageGroups = _NotificationGroups.Values.
                                                                    SelectMany(group       => group.Notifications).
                                                                    Where     (description => description.Tags.Contains(NotificationTag.NewUserDefault)).
                                                                    SelectMany(description => description.Messages).
                                                                    ToSafeHashSet();

                if (newUserDefaultNotificationMessageGroups.Any())
                    await _AddNotification(User,
                                           new EMailNotification(User.EMail,
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 newUserDefaultNotificationMessageGroups,
                                                                 "Default notifications for new users"),
                                           eventTrackingId,
                                           CurrentUserId);

            }

            #endregion

            OnAdded?.Invoke(User,
                            eventTrackingId);

            var OnUserAddedLocal = OnUserAdded;
            if (OnUserAddedLocal != null)
                await OnUserAddedLocal?.Invoke(Timestamp.Now,
                                               User,
                                               eventTrackingId,
                                               CurrentUserId);

            var resetPasswordResult = await _ResetPassword(User,
                                                           SuppressNotifications: true,
                                                           EventTrackingId:       eventTrackingId);

            await SMTPClient.Send(NewUserSignUpEMailCreator(User,
                                                            User.EMail,
                                                            resetPasswordResult.PasswordReset.SecurityToken1,
                                                            User.MobilePhone.HasValue,
                                                            DefaultLanguage,
                                                            eventTrackingId));

            await SendNotifications(User,
                                    addUserIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);


            return AddUserIfNotExistsResult.Success(User,
                                                    AddedOrIgnored.Added,
                                                    eventTrackingId);

        }

        #endregion

        #region AddUserIfNotExists                      (User,                            SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserIfNotExistsResult> AddUserIfNotExists(User                            User,
                                                                       Boolean                         SkipDefaultNotifications   = false,
                                                                       Action<User, EventTracking_Id>  OnAdded                    = null,
                                                                       EventTracking_Id                EventTrackingId            = null,
                                                                       User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddUserIfNotExists(User,
                                                     SkipDefaultNotifications,
                                                     OnAdded,
                                                     eventTrackingId,
                                                     CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddUserIfNotExistsResult.Failed(User,
                                                           eventTrackingId,
                                                           e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddUserIfNotExistsResult.Failed(User,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion

        #region AddUserIfNotExists                      (User, AccessRight, Organization, SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user and add him/her to the given organization.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserIfNotExistsResult> AddUserIfNotExists(User                            User,
                                                                       User2OrganizationEdgeLabel      AccessRight,
                                                                       Organization                    Organization,
                                                                       Boolean                         SkipDefaultNotifications   = false,
                                                                       Action<User, EventTracking_Id>  OnAdded                    = null,
                                                                       EventTracking_Id                EventTrackingId            = null,
                                                                       User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {

                    try
                    {

                        var result = await _AddUserIfNotExists(User,
                                                               SkipDefaultNotifications,
                                                               async (_user, _eventTrackingId) => {

                                                                   await _AddUserToOrganization(_user,
                                                                                               AccessRight,
                                                                                               Organization,
                                                                                               _eventTrackingId,
                                                                                               SuppressNotifications:  true,
                                                                                               CurrentUserId:          CurrentUserId);

                                                                   OnAdded?.Invoke(_user,
                                                                                   _eventTrackingId);

                                                               },
                                                               eventTrackingId,
                                                               CurrentUserId);

                        result.Organization = Organization;

                        if (result?.IsSuccess == true)
                            await SendNotifications(User,
                                                    AccessRight,
                                                    Organization,
                                                    addUserToOrganization_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                        return result;

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserIfNotExistsResult.Failed(User,
                                                               eventTrackingId,
                                                               e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserIfNotExistsResult.Failed(User,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion

        #region AddUserIfNotExists                      (User, AccessRights,              SkipDefaultNotifications = false, OnAdded = null, ...)

        /// <summary>
        /// Add the given user and add him/her to the given organization.
        /// </summary>
        /// <param name="User">A new user.</param>
        /// <param name="AccessRights">The organization memberships of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserIfNotExistsResult> AddUserIfNotExists(User                                                          User,
                                                                       IEnumerable<Tuple<User2OrganizationEdgeLabel, Organization>>  AccessRights,
                                                                       Boolean                                                       SkipDefaultNotifications   = false,
                                                                       Action<User, EventTracking_Id>                                OnAdded                    = null,
                                                                       EventTracking_Id                                              EventTrackingId            = null,
                                                                       User_Id?                                                      CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (AccessRights is null || !AccessRights.Any())
                return AddUserIfNotExistsResult.Failed(User,
                                                       eventTrackingId,
                                                       "The given enumeration of access rights must not be null or empty!");


            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {

                    try
                    {

                        var result = await _AddUserIfNotExists(User,
                                                               SkipDefaultNotifications,
                                                               async (_user, _eventTrackingId) => {

                                                                   foreach (var accessRight in AccessRights)
                                                                       await _AddUserToOrganization(_user,
                                                                                                    accessRight.Item1,
                                                                                                    accessRight.Item2,
                                                                                                    _eventTrackingId,
                                                                                                    SuppressNotifications:  true,
                                                                                                    CurrentUserId:          CurrentUserId);

                                                                   OnAdded?.Invoke(_user,
                                                                                   _eventTrackingId);

                                                               },
                                                               eventTrackingId,
                                                               CurrentUserId);

                        result.Organization = AccessRights.First().Item2;

                        if (result?.IsSuccess == true)
                        {
                            foreach (var accessRight in AccessRights)
                                await SendNotifications(User,
                                                        accessRight.Item1,
                                                        accessRight.Item2,
                                                        addUserToOrganization_MessageType,
                                                        eventTrackingId,
                                                        CurrentUserId);
                        }


                        return result;

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserIfNotExistsResult.Failed(User,
                                                               eventTrackingId,
                                                               e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserIfNotExistsResult.Failed(User,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion

        #endregion

        #region AddOrUpdateUser   (User, (Membership, Organization), SkipDefaultNotifications = false, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateUser(User,                            SkipDefaultNotifications = false, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user to/within the API.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddOrUpdateUserResult> _AddOrUpdateUser(User                            User,
                                                                              Boolean                         SkipDefaultNotifications   = false,
                                                                              Action<User, EventTracking_Id>  OnAdded                    = null,
                                                                              Action<User, EventTracking_Id>  OnUpdated                  = null,
                                                                              EventTracking_Id                EventTrackingId            = null,
                                                                              User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return AddOrUpdateUserResult.ArgumentError(User,
                                                           eventTrackingId,
                                                           nameof(User),
                                                           "The given user must not be null!");

            if (User.API != null && User.API != this)
                return AddOrUpdateUserResult.ArgumentError(User,
                                                           eventTrackingId,
                                                           nameof(User.API),
                                                           "The given user is already attached to another API!");

            if (User.Id.Length < MinUserIdLength)
                return AddOrUpdateUserResult.ArgumentError(User,
                                                           eventTrackingId,
                                                           nameof(User),
                                                           "The given user identification '" + User.Id + "' is too short!");

            if (User.Name.IsNullOrEmpty() || User.Name.Trim().IsNullOrEmpty())
                return AddOrUpdateUserResult.ArgumentError(User,
                                                           eventTrackingId,
                                                           nameof(User),
                                                           "The given user name must not be null!");

            if (User.Name.Length < MinUserNameLength)
                return AddOrUpdateUserResult.ArgumentError(User,
                                                           eventTrackingId,
                                                           nameof(User),
                                                           "The given user name '" + User.Name + "' is too short!");

            User.API = this;


            await WriteToDatabaseFile(addOrUpdateUser_MessageType,
                                      User.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_Users.TryGetValue(User.Id, out User OldUser))
            {
                _Users.Remove(OldUser.Id);
                User.CopyAllLinkedDataFrom(OldUser);
            }

            _Users.Add(User.Id, User);

            if (OldUser is null)
            {

                #region Register 'New User Default'-Notifications

                if (!SkipDefaultNotifications)
                {

                    var newUserDefaultNotificationMessageGroups = _NotificationGroups.Values.
                                                                        SelectMany(group       => group.Notifications).
                                                                        Where     (description => description.Tags.Contains(NotificationTag.NewUserDefault)).
                                                                        SelectMany(description => description.Messages).
                                                                        ToSafeHashSet();

                    if (newUserDefaultNotificationMessageGroups.Any())
                        await _AddNotification(User,
                                               new EMailNotification(User.EMail,
                                                                     "",
                                                                     "",
                                                                     "",
                                                                     newUserDefaultNotificationMessageGroups,
                                                                     "Default notifications for new users"),
                                               eventTrackingId,
                                               CurrentUserId);

                }

                #endregion

                OnAdded?.Invoke(User,
                                eventTrackingId);

                var OnUserAddedLocal = OnUserAdded;
                if (OnUserAddedLocal != null)
                    await OnUserAddedLocal?.Invoke(Timestamp.Now,
                                                   User,
                                                   eventTrackingId,
                                                   CurrentUserId);

                var resetPasswordResult = await _ResetPassword(User,
                                                               SuppressNotifications: true,
                                                               EventTrackingId:       eventTrackingId);

                await SMTPClient.Send(NewUserSignUpEMailCreator(User,
                                                                User.EMail,
                                                                resetPasswordResult.PasswordReset.SecurityToken1,
                                                                User.MobilePhone.HasValue,
                                                                DefaultLanguage,
                                                                eventTrackingId));

                await SendNotifications(User,
                                        addUser_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateUserResult.Success(User,
                                                     AddedOrUpdated.Add,
                                                     eventTrackingId);

            }
            else
            {

                OnUpdated?.Invoke(User,
                                  eventTrackingId);

                var OnUserUpdatedLocal = OnUserUpdated;
                if (OnUserUpdatedLocal != null)
                    await OnUserUpdatedLocal?.Invoke(Timestamp.Now,
                                                     User,
                                                     OldUser,
                                                     eventTrackingId,
                                                     CurrentUserId);

                await SendNotifications(User,
                                        updateUser_MessageType,
                                        OldUser,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateUserResult.Success(User,
                                                     AddedOrUpdated.Update,
                                                     eventTrackingId);

            }

        }

        #endregion

        #region AddOrUpdateUser                      (User,                            SkipDefaultNotifications = false, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user to/within the API.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddOrUpdateUserResult> AddOrUpdateUser(User                            User,
                                                                 Boolean                         SkipDefaultNotifications   = false,
                                                                 Action<User, EventTracking_Id>  OnAdded                    = null,
                                                                 Action<User, EventTracking_Id>  OnUpdated                  = null,
                                                                 EventTracking_Id                EventTrackingId            = null,
                                                                 User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddOrUpdateUser(User,
                                                  SkipDefaultNotifications,
                                                  OnAdded,
                                                  OnUpdated,
                                                  eventTrackingId,
                                                  CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddOrUpdateUserResult.Failed(User,
                                                        eventTrackingId,
                                                        e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddOrUpdateUserResult.Failed(User,
                                                eventTrackingId,
                                                "Internal locking failed!");

        }

        #endregion

        #region AddOrUpdateUser                      (User, AccessRight, Organization, SkipDefaultNotifications = false, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user to/within the API.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="AccessRight">The organization membership of the new user.</param>
        /// <param name="Organization">The organization of the new user.</param>
        /// <param name="SkipDefaultNotifications">Do not apply the default notifications settings for new users.</param>
        /// <param name="OnAdded">A delegate run whenever the user has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddOrUpdateUserResult> AddOrUpdateUser(User                            User,
                                                                 User2OrganizationEdgeLabel      AccessRight,
                                                                 Organization                    Organization,
                                                                 Boolean                         SkipDefaultNotifications   = false,
                                                                 Action<User, EventTracking_Id>  OnAdded                    = null,
                                                                 Action<User, EventTracking_Id>  OnUpdated                  = null,
                                                                 EventTracking_Id                EventTrackingId            = null,
                                                                 User_Id?                        CurrentUserId              = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        var result = await _AddOrUpdateUser(User,
                                                            SkipDefaultNotifications,
                                                            async(_user, _eventTrackingId) => {

                                                                await _AddUserToOrganization(_user,
                                                                                             AccessRight,
                                                                                             Organization,
                                                                                             _eventTrackingId,
                                                                                             SuppressNotifications:  true,
                                                                                             CurrentUserId:          CurrentUserId);

                                                                OnAdded?.Invoke(_user,
                                                                                _eventTrackingId);

                                                            },
                                                            OnUpdated,
                                                            eventTrackingId,
                                                            CurrentUserId);

                        result.Organization = Organization;

                        if (result?.IsSuccess == true)
                            await SendNotifications(User,
                                                    AccessRight,
                                                    Organization,
                                                    addUserToOrganization_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                        return result;

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddOrUpdateUserResult.Failed(User,
                                                            eventTrackingId,
                                                            e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddOrUpdateUserResult.Failed(User,
                                                eventTrackingId,
                                                "Internal locking failed!");

        }

        #endregion

        #endregion

        #region UpdateUser        (User,                                                                               OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a user was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user was updated.</param>
        /// <param name="User">The updated user.</param>
        /// <param name="OldUser">The old user.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnUserUpdatedDelegate(DateTime          Timestamp,
                                                   User              User,
                                                   User              OldUser,
                                                   EventTracking_Id  EventTrackingId   = null,
                                                   User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user was updated.
        /// </summary>
        public event OnUserUpdatedDelegate OnUserUpdated;


        #region (protected internal) _UpdateUser(User,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given user to/within the API.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<UpdateUserResult> _UpdateUser(User                            User,
                                                                    Action<User, EventTracking_Id>  OnUpdated         = null,
                                                                    EventTracking_Id                EventTrackingId   = null,
                                                                    User_Id?                        CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return UpdateUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User),
                                                      "The given user must not be null!");

            if (!_TryGetUser(User.Id, out User OldUser))
                return UpdateUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User),
                                                      "The given user '" + User.Id + "' does not exists in this API!");

            if (User.API != null && User.API != this)
                return UpdateUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User.API),
                                                      "The given user is not attached to this API!");

            User.API = this;


            await WriteToDatabaseFile(updateUser_MessageType,
                                      User.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _Users.Remove(OldUser.Id);
            User.CopyAllLinkedDataFrom(OldUser);
            _Users.Add(User.Id, User);

            OnUpdated?.Invoke(User,
                              eventTrackingId);

            var OnUserUpdatedLocal = OnUserUpdated;
            if (OnUserUpdatedLocal != null)
                await OnUserUpdatedLocal?.Invoke(Timestamp.Now,
                                                 User,
                                                 OldUser,
                                                 eventTrackingId,
                                                 CurrentUserId);

            await SendNotifications(User,
                                    updateUser_MessageType,
                                    OldUser,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateUserResult.Success(User,
                                            eventTrackingId);

        }

        #endregion

        #region UpdateUser                      (User,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given user to/within the API.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<UpdateUserResult> UpdateUser(User                            User,
                                                       Action<User, EventTracking_Id>  OnUpdated         = null,
                                                       EventTracking_Id                EventTrackingId   = null,
                                                       User_Id?                        CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UpdateUser(User,
                                             OnUpdated,
                                             EventTrackingId,
                                             CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UpdateUserResult.Failed(User,
                                                   eventTrackingId,
                                                   e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateUserResult.Failed(User,
                                           eventTrackingId,
                                           "Internal locking failed!");

        }

        #endregion


        #region (protected internal) _UpdateUser(User, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="UpdateDelegate">A delegate to update the given user.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<UpdateUserResult> _UpdateUser(User                            User,
                                                                    Action<User.Builder>            UpdateDelegate,
                                                                    Action<User, EventTracking_Id>  OnUpdated         = null,
                                                                    EventTracking_Id                EventTrackingId   = null,
                                                                    User_Id?                        CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return UpdateUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User),
                                                      "The given user must not be null!");

            if (!_UserExists(User.Id))
                return UpdateUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User),
                                                      "The given user '" + User.Id + "' does not exists in this API!");

            if (User.API != this)
                return UpdateUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User.API),
                                                      "The given user is not attached to this API!");

            if (UpdateDelegate is null)
                return UpdateUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(UpdateDelegate),
                                                      "The given update delegate must not be null!");


            var builder = User.ToBuilder();
            UpdateDelegate(builder);
            var updatedUser = builder.ToImmutable;

            await WriteToDatabaseFile(updateUser_MessageType,
                                      updatedUser.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _Users.Remove(User.Id);
            updatedUser.CopyAllLinkedDataFrom(User);
            _Users.Add(updatedUser.Id, updatedUser);

            OnUpdated?.Invoke(updatedUser,
                              eventTrackingId);

            var OnUserUpdatedLocal = OnUserUpdated;
            if (OnUserUpdatedLocal != null)
                await OnUserUpdatedLocal?.Invoke(Timestamp.Now,
                                                 updatedUser,
                                                 User,
                                                 eventTrackingId,
                                                 CurrentUserId);

            await SendNotifications(updatedUser,
                                    updateUser_MessageType,
                                    User,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateUserResult.Success(User,
                                            eventTrackingId);

        }

        #endregion

        #region UpdateUser                      (User, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="UpdateDelegate">A delegate to update the given user.</param>
        /// <param name="OnUpdated">A delegate run whenever the user has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<UpdateUserResult> UpdateUser(User                            User,
                                                       Action<User.Builder>            UpdateDelegate,
                                                       Action<User, EventTracking_Id>  OnUpdated         = null,
                                                       EventTracking_Id                EventTrackingId   = null,
                                                       User_Id?                        CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UpdateUser(User,
                                             UpdateDelegate,
                                             OnUpdated,
                                             eventTrackingId,
                                             CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UpdateUserResult.Failed(User,
                                                   eventTrackingId,
                                                   e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateUserResult.Failed(User,
                                           eventTrackingId,
                                           "Internal locking failed!");

        }

        #endregion

        #endregion


        #region UserExists(UserId)

        /// <summary>
        /// Determines whether the given user identification exists within this API.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        protected internal Boolean _UserExists(User_Id UserId)

            => UserId.IsNotNullOrEmpty && _Users.ContainsKey(UserId);

        /// <summary>
        /// Determines whether the given user identification exists within this API.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        protected internal Boolean _UserExists(User_Id? UserId)

            => UserId.IsNotNullOrEmpty() && _Users.ContainsKey(UserId.Value);


        /// <summary>
        /// Determines whether the given user identification exists within this API.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        public Boolean UserExists(User_Id UserId)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserExists(UserId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given user identification exists within this API.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        public Boolean UserExists(User_Id? UserId)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserExists(UserId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region GetUser   (UserId)

        /// <summary>
        /// Get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        protected internal User _GetUser(User_Id UserId)
        {

            if (!UserId.IsNullOrEmpty && _Users.TryGetValue(UserId, out User user))
                return user;

            return null;

        }

        /// <summary>
        /// Get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        protected internal User _GetUser(User_Id? UserId)
        {

            if (UserId.IsNotNullOrEmpty() && _Users.TryGetValue(UserId.Value, out User user))
                return user;

            return null;

        }


        /// <summary>
        /// Get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        public User GetUser(User_Id  UserId)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetUser(UserId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        /// <summary>
        /// Get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        public User GetUser(User_Id? UserId)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetUser(UserId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        #endregion

        #region TryGetUser(UserId, out User)

        /// <summary>
        /// Try to get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        /// <param name="User">The user.</param>
        protected internal Boolean _TryGetUser(User_Id   UserId,
                                               out User  User)
        {

            if (!UserId.IsNullOrEmpty &&
                _Users.TryGetValue(UserId, out User user))
            {
                User = user;
                return true;
            }

            User = null;
            return false;

        }

        /// <summary>
        /// Try to get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        /// <param name="User">The user.</param>
        protected internal Boolean _TryGetUser(User_Id?  UserId,
                                               out User  User)
        {

            if (UserId.IsNotNullOrEmpty() &&
               _Users.TryGetValue(UserId.Value, out User user))
            {
                User = user;
                return true;
            }

            User = null;
            return false;

        }


        /// <summary>
        /// Try to get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        /// <param name="User">The user.</param>
        public Boolean TryGetUser(User_Id   UserId,
                                  out User  User)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetUser(UserId, out User);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            User = null;
            return false;

        }

        /// <summary>
        /// Try to get the user having the given unique identification.
        /// </summary>
        /// <param name="UserId">The unique identification of an user.</param>
        /// <param name="User">The user.</param>
        public Boolean TryGetUser(User_Id?  UserId,
                                  out User  User)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetUser(UserId, out User);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            User = null;
            return false;

        }

        #endregion


        #region SearchUsersByName   (Username)

        /// <summary>
        /// Find all users having the given user name.
        /// </summary>
        /// <param name="Username">The name of a user (might not be unique).</param>
        protected internal IEnumerable<User> _SearchUsersByName(String Username)

            => _Users.Values.
                      Where(user => user.Name.Equals(Username)).
                      ToArray();


        /// <summary>
        /// Find all users having the given user name.
        /// </summary>
        /// <param name="Username">The name of a user (might not be unique).</param>
        public IEnumerable<User> SearchUsersByName(String Username)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _SearchUsersByName(Username);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new User[0];

        }

        #endregion

        #region TrySearchUsersByName(Username, out Users)

        /// <summary>
        /// Find all users having the given user name.
        /// </summary>
        /// <param name="Username">The name of a user (might not be unique).</param>
        /// <param name="Users">An enumeration of matching users.</param>
        protected internal Boolean _TrySearchUsersByName(String Username, out IEnumerable<User> Users)
        {

            var foundUsers = new List<User>();

            foreach (var user in _Users.Values)
                if (user.Name.Equals(Username ?? ""))
                    foundUsers.Add(user);

            Users = foundUsers;

            return foundUsers.Any();

        }


        /// <summary>
        /// Find all users having the given user name.
        /// </summary>
        /// <param name="Username">The name of a user (might not be unique).</param>
        /// <param name="Users">An enumeration of matching users.</param>
        public Boolean TrySearchUsersByName(String Username, out IEnumerable<User> Users)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TrySearchUsersByName(Username, out Users);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Users = null;
            return false;

        }

        #endregion


        #region DeleteUser(User, OnDeleted = null, ...)

        /// <summary>
        /// A delegate called whenever a user was deleted.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user was deleted.</param>
        /// <param name="User">The user to be deleted.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnUserDeletedDelegate(DateTime          Timestamp,
                                                   User              User,
                                                   EventTracking_Id  EventTrackingId   = null,
                                                   User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user was deleted.
        /// </summary>
        public event OnUserDeletedDelegate OnUserDeleted;


        #region (protected internal virtual) _CanDeleteUser(User)

        /// <summary>
        /// Determines whether the user can safely be deleted from the API.
        /// </summary>
        /// <param name="User">The user to be deleted.</param>
        protected internal virtual I18NString _CanDeleteUser(User User)
        {

            if (User.User2Organization_OutEdges.Any())
                return new I18NString(Languages.en, "The user is still member of an organization!");

            return null;

        }

        #endregion

        #region (protected internal) _DeleteUser(User, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given user.
        /// </summary>
        /// <param name="User">The user to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the user has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<DeleteUserResult> _DeleteUser(User                            User,
                                                                    Action<User, EventTracking_Id>  OnDeleted         = null,
                                                                    EventTracking_Id                EventTrackingId   = null,
                                                                    User_Id?                        CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return DeleteUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User),
                                                      "The given user must not be null!");

            if (User.API != this)
                return DeleteUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User),
                                                      "The given user is not attached to this API!");

            if (!_Users.TryGetValue(User.Id, out User UserToBeRemoved))
                return DeleteUserResult.ArgumentError(User,
                                                      eventTrackingId,
                                                      nameof(User),
                                                      "The given user does not exists in this API!");


            var result = _CanDeleteUser(User);

            if (result != null)
                return DeleteUserResult.Failed(User,
                                               eventTrackingId,
                                               result);


            // Get all parent user groups now, because later
            // the --isMember/Admin/Guest--> edge will no longer be available!
            var parentOrganizations = User.ParentOrganizations().
                                           ToArray();

            await WriteToDatabaseFile(deleteUser_MessageType,
                                      User.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);


            // ToDo: Remove incoming edges


            _Users.Remove(User.Id);

            OnDeleted?.Invoke(User,
                              eventTrackingId);

            var OnUserDeletedLocal = OnUserDeleted;
            if (OnUserDeletedLocal != null)
                await OnUserDeletedLocal?.Invoke(Timestamp.Now,
                                                 User,
                                                 eventTrackingId,
                                                 CurrentUserId);

            await SendNotifications(User,
                                    parentOrganizations,
                                    deleteUser_MessageType,
                                    eventTrackingId,
                                    CurrentUserId);


            return DeleteUserResult.Success(User,
                                            eventTrackingId);

        }

        #endregion

        #region DeleteUser                      (User, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given user.
        /// </summary>
        /// <param name="User">The user to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the user has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<DeleteUserResult> DeleteUser(User                            User,
                                                       Action<User, EventTracking_Id>  OnDeleted         = null,
                                                       EventTracking_Id                EventTrackingId   = null,
                                                       User_Id?                        CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _DeleteUser(User,
                                             OnDeleted,
                                             eventTrackingId,
                                             CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return DeleteUserResult.Failed(User,
                                                   eventTrackingId,
                                                   e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return DeleteUserResult.Failed(User,
                                           eventTrackingId,
                                           "Internal locking failed!");


        }

        #endregion

        #endregion

        #endregion

        #region Reset user password

        #region VerifyPassword     (UserId, Password)

        /// <summary>
        /// Verify the given user identification and password.
        /// </summary>
        /// <param name="UserId">The unique identification of the user.</param>
        /// <param name="Password">The user's password.</param>
        protected internal Boolean _VerifyPassword(User_Id  UserId,
                                                   String   Password)

            => UserId.IsNotNullOrEmpty &&
               UserId.Length >= MinUserIdLength &&
               _LoginPasswords.TryGetValue(UserId, out LoginPassword LoginPassword) &&
               LoginPassword.VerifyPassword(Password);


        /// <summary>
        /// Verify the given user identification and password.
        /// </summary>
        /// <param name="UserId">The unique identification of the user.</param>
        /// <param name="Password">The user's password.</param>
        public Boolean VerifyPassword(User_Id  UserId,
                                      String   Password)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _VerifyPassword(UserId,
                                           Password);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return false;

        }

        #endregion

        #region ChangePassword     (User,  NewPassword, CurrentPassword = null, SuppressNotifications = false, ...)

        /// <summary>
        /// Change the password of the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="CurrentPassword">The optional current password of the user.</param>
        /// <param name="SuppressNotifications">Do not send 'Password changed e-mails'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<ChangePasswordResult> _ChangePassword(User              User,
                                                                            Password          NewPassword,
                                                                            Password?         CurrentPassword         = null,
                                                                            Boolean           SuppressNotifications   = false,
                                                                            EventTracking_Id  EventTrackingId         = null,
                                                                            User_Id?          CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return ChangePasswordResult.ArgumentError(User,
                                                          eventTrackingId,
                                                          nameof(User),
                                                          "The given user must not be null!");

            if (NewPassword.IsNullOrEmpty)
                return ChangePasswordResult.ArgumentError(User,
                                                          eventTrackingId,
                                                          nameof(NewPassword),
                                                          "The given new password must not be null or empty!");

            if (CurrentPassword.HasValue && CurrentPassword.Value.IsNullOrEmpty)
                return ChangePasswordResult.ArgumentError(User,
                                                          eventTrackingId,
                                                          nameof(CurrentPassword),
                                                          "The given current password must not be empty!");


            #region AddPassword

            if (!_LoginPasswords.TryGetValue(User.Id, out LoginPassword _LoginPassword))
            {

                await WriteToDatabaseFile(UsersAPIPath + DefaultPasswordFile,
                                          addPassword_MessageType,
                                          new JObject(
                                              new JProperty("login",         User.Id.ToString()),
                                              new JProperty("newPassword", new JObject(
                                                  new JProperty("salt",          NewPassword.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",  NewPassword.UnsecureString)
                                              ))
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                _LoginPasswords.Add(User.Id, new LoginPassword(User.Id, NewPassword));

                if (!SuppressNotifications)
                    await SMTPClient.Send(PasswordChangedEMailCreator(User,
                                                                      User.EMail,
                                                                      //"https://" + Request.Host.SimpleString,
                                                                      DefaultLanguage,
                                                                      eventTrackingId));

                return ChangePasswordResult.Success(User,
                                                    eventTrackingId);

            }

            #endregion

            #region ChangePassword

            else if (CurrentPassword.IsNotNullOrEmpty() && _LoginPassword.VerifyPassword(CurrentPassword.Value))
            {

                await WriteToDatabaseFile(UsersAPIPath + DefaultPasswordFile,
                                          changePassword_MessageType,
                                          new JObject(
                                              new JProperty("login",         User.Id.ToString()),
                                              new JProperty("currentPassword", new JObject(
                                                  new JProperty("salt",          _LoginPassword.Password.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",  _LoginPassword.Password.UnsecureString)
                                              )),
                                              new JProperty("newPassword",     new JObject(
                                                  new JProperty("salt",          NewPassword.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",  NewPassword.UnsecureString)
                                              ))
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                _LoginPasswords[User.Id] = new LoginPassword(User.Id, NewPassword);

                if (!SuppressNotifications)
                    await SMTPClient.Send(PasswordChangedEMailCreator(User,
                                                                      User.EMail,
                                                                      //"https://" + Request.Host.SimpleString,
                                                                      DefaultLanguage,
                                                                      eventTrackingId));

                return ChangePasswordResult.Success(User,
                                                    eventTrackingId);

            }

            #endregion

            else
                return ChangePasswordResult.Failed(User,
                                                   eventTrackingId,
                                                   "Could not change the password!");

        }

        /// <summary>
        /// Change the password of the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="CurrentPassword">The optional current password of the user.</param>
        /// <param name="SuppressNotifications">Do not send 'Password changed e-mails'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<ChangePasswordResult> ChangePassword(User              User,
                                                               Password          NewPassword,
                                                               Password?         CurrentPassword         = null,
                                                               Boolean           SuppressNotifications   = false,
                                                               EventTracking_Id  EventTrackingId         = null,
                                                               User_Id?          CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ChangePassword(User,
                                                 NewPassword,
                                                 CurrentPassword,
                                                 SuppressNotifications,
                                                 eventTrackingId,
                                                 CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return ChangePasswordResult.Failed(User,
                                                       eventTrackingId,
                                                       e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ChangePasswordResult.Failed(User,
                                               eventTrackingId,
                                               "Internal locking failed!");

        }

        #endregion

        #region ChangePassword     (Users, NewPassword, CurrentPassword = null, SuppressNotifications = false, ...)

        /// <summary>
        /// Change the password of the given enumeration of users.
        /// </summary>
        /// <param name="Users">An enumeration of users.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="CurrentPassword">The optional current password of the user.</param>
        /// <param name="SuppressNotifications">Do not send 'Password changed e-mails'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<ChangePasswordResult> _ChangePassword(IEnumerable<User>  Users,
                                                                            Password           NewPassword,
                                                                            Password?          CurrentPassword         = null,
                                                                            Boolean            SuppressNotifications   = false,
                                                                            EventTracking_Id   EventTrackingId         = null,
                                                                            User_Id?           CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Users is null || !Users.Any())
                return ChangePasswordResult.ArgumentError(Users,
                                                          eventTrackingId,
                                                          nameof(Users),
                                                          "The given user must not be null or empty!");

            if (NewPassword.IsNullOrEmpty)
                return ChangePasswordResult.ArgumentError(Users,
                                                          eventTrackingId,
                                                          nameof(NewPassword),
                                                          "The given new password must not be null or empty!");

            if (CurrentPassword.HasValue && CurrentPassword.Value.IsNullOrEmpty)
                return ChangePasswordResult.ArgumentError(Users,
                                                          eventTrackingId,
                                                          nameof(CurrentPassword),
                                                          "The given current password must not be empty!");

            if (!Users.All(user => _LoginPasswords.ContainsKey(user.Id)))
                return ChangePasswordResult.ArgumentError(Users,
                                                          eventTrackingId,
                                                          nameof(Users),
                                                          "No all users exist!");


            foreach (var user in Users)
            {

                await WriteToDatabaseFile(UsersAPIPath + DefaultPasswordFile,
                                          resetPassword_MessageType,
                                          JSONObject.Create(

                                              new JProperty("login",                 user.Id.ToString()),

                                              new JProperty("newPassword", new JObject(
                                                  new JProperty("salt",              NewPassword.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",      NewPassword.UnsecureString)
                                              ))

                                              //new JProperty("securityToken1",        SecurityToken1.ToString()),

                                              //SecurityToken2.HasValue
                                              //    ? new JProperty("securityToken2",  SecurityToken2.ToString())
                                              //    : null

                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                _LoginPasswords[user.Id] = new LoginPassword(user.Id, NewPassword);

                if (!SuppressNotifications)
                    await SMTPClient.Send(PasswordChangedEMailCreator(user,
                                                                      user.EMail,
                                                                      //"https://" + Request.Host.SimpleString,
                                                                      DefaultLanguage,
                                                                      eventTrackingId));

            }

            return ChangePasswordResult.Success(Users,
                                                eventTrackingId);

        }

        /// <summary>
        /// Change the password of the given enumeration of users.
        /// </summary>
        /// <param name="Users">An enumeration of users.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="CurrentPassword">The optional current password of the user.</param>
        /// <param name="SuppressNotifications">Do not send 'Password changed e-mails'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<ChangePasswordResult> ChangePassword(IEnumerable<User>  Users,
                                                               Password           NewPassword,
                                                               Password?          CurrentPassword         = null,
                                                               Boolean            SuppressNotifications   = false,
                                                               EventTracking_Id   EventTrackingId         = null,
                                                               User_Id?           CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ChangePassword(Users,
                                                 NewPassword,
                                                 CurrentPassword,
                                                 SuppressNotifications,
                                                 eventTrackingId,
                                                 CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return ChangePasswordResult.Failed(Users,
                                                       eventTrackingId,
                                                       e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ChangePasswordResult.Failed(Users,
                                               eventTrackingId,
                                               "Internal locking failed!");

        }

        #endregion

        #region ResetPassword      (User,  SuppressNotifications = false, ...)

        /// <summary>
        /// Reset a user password.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        protected internal async Task<ResetPasswordResult> _ResetPassword(User              User,
                                                                          Boolean           SuppressNotifications   = false,
                                                                          EventTracking_Id  EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            var result = await _AddPasswordReset(
                                   new PasswordReset(
                                       User,
                                       SecurityToken_Id.Random(40, _Random),
                                       User.Use2AuthFactor == Use2AuthFactor.MobilePhoneSMS && User.MobilePhone.HasValue
                                           ? SecurityToken_Id.Parse(_Random.RandomString(5) + "-" + _Random.RandomString(5))
                                           : new SecurityToken_Id?(),
                                       eventTrackingId
                                   ),
                                   SuppressNotifications,
                                   eventTrackingId
                               );

            return new ResetPasswordResult(User,
                                           result.EventTrackingId,
                                           result.IsSuccess,
                                           result.Argument,
                                           result.ErrorDescription,
                                           result.PasswordReset);

        }

        /// <summary>
        /// Reset a user password.
        /// </summary>
        /// <param name="User">A user.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        public async Task<ResetPasswordResult> ResetPassword(User              User,
                                                             Boolean           SuppressNotifications   = false,
                                                             EventTracking_Id  EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ResetPassword(User,
                                                SuppressNotifications,
                                                eventTrackingId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return ResetPasswordResult.Failed(User,
                                                      eventTrackingId,
                                                      e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ResetPasswordResult.Failed(User,
                                              eventTrackingId,
                                              "Internal locking failed!");

        }

        #endregion

        #region ResetPassword      (Users, SuppressNotifications = false, ...)

        /// <summary>
        /// Reset the password of a user having multiple logins.
        /// </summary>
        /// <param name="Users">An enumeration of users.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        protected internal async Task<ResetPasswordResult> _ResetPassword(IEnumerable<User>  Users,
                                                                          Boolean            SuppressNotifications   = false,
                                                                          EventTracking_Id   EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            var result = await _AddPasswordReset(
                                   new PasswordReset(
                                       Users,
                                       SecurityToken_Id.Random(40, _Random),
                                       Users.Any(user => user.Use2AuthFactor == Use2AuthFactor.MobilePhoneSMS && user.MobilePhone.HasValue)
                                           ? SecurityToken_Id.Parse(_Random.RandomString(5) + "-" + _Random.RandomString(5))
                                           : new SecurityToken_Id?(),
                                       eventTrackingId
                                   ),
                                   SuppressNotifications,
                                   eventTrackingId
                               );

            return new ResetPasswordResult(Users,
                                           result.EventTrackingId,
                                           result.IsSuccess,
                                           result.Argument,
                                           result.ErrorDescription,
                                           result.PasswordReset);

        }

        /// <summary>
        /// Reset the password of a user having multiple logins.
        /// </summary>
        /// <param name="Users">An enumeration of users.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        public async Task<ResetPasswordResult> ResetPassword(IEnumerable<User>  Users,
                                                             Boolean            SuppressNotifications   = false,
                                                             EventTracking_Id   EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ResetPassword(Users,
                                                SuppressNotifications,
                                                eventTrackingId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return ResetPasswordResult.Failed(Users,
                                                      eventTrackingId,
                                                      e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ResetPasswordResult.Failed(Users,
                                              eventTrackingId,
                                              "Internal locking failed!");

        }

        #endregion

        #region AddPasswordReset   (PasswordReset, ...)

        /// <summary>
        /// Add a password reset.
        /// </summary>
        /// <param name="PasswordReset">A password reset.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        protected internal async Task<AddPasswordResetResult> _AddPasswordReset(PasswordReset     PasswordReset,
                                                                                Boolean           SuppressNotifications   = false,
                                                                                EventTracking_Id  EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(UsersAPIPath + DefaultPasswordResetsFile,
                                      addToPasswordFile,
                                      PasswordReset.ToJSON(),
                                      eventTrackingId);

            this._PasswordResets.Add(PasswordReset.SecurityToken1,
                                     PasswordReset);


            foreach (var user in PasswordReset.Users)
            {
                if (!SuppressNotifications)
                {

                    await SMTPClient.Send(ResetPasswordEMailCreator(user,
                                                                    user.EMail,
                                                                    PasswordReset.SecurityToken1,
                                                                    user.Use2AuthFactor == Use2AuthFactor.MobilePhoneSMS && user.MobilePhone.HasValue,
                                                                    DefaultLanguage,
                                                                    eventTrackingId));

                    if (SMSClient != null &&
                        PasswordReset.SecurityToken2.HasValue &&
                        user.MobilePhone.HasValue)
                    {
                        SMSClient.Send("Dear '" + user.Name + "' your 2nd security token for resetting your password is '" + PasswordReset.SecurityToken2 + "'!",
                                       user.MobilePhone.Value.ToString());
                    }

                }
            }

            return AddPasswordResetResult.Success(PasswordReset,
                                                  eventTrackingId);

        }

        /// <summary>
        /// Add a password reset.
        /// </summary>
        /// <param name="PasswordReset">A password reset.</param>
        /// <param name="SuppressNotifications">Do not send 'Reset Password e-mails/SMSs'.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        public async Task<AddPasswordResetResult> AddPasswordReset(PasswordReset     PasswordReset,
                                                                   Boolean           SuppressNotifications   = false,
                                                                   EventTracking_Id  EventTrackingId         = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddPasswordReset(PasswordReset,
                                                   SuppressNotifications,
                                                   eventTrackingId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddPasswordResetResult.Failed(PasswordReset,
                                                         eventTrackingId,
                                                         e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return AddPasswordResetResult.Failed(PasswordReset,
                                                 eventTrackingId,
                                                 "Internal locking failed!");

        }

        #endregion

        #region ResetPassword      (SecurityTokenId1, NewPassword, SecurityTokenId2 = null, ...)

        /// <summary>
        /// Reset the user password(s) specified by the given security token(s).
        /// </summary>
        /// <param name="SecurityTokenId1">The (first) security token for the password reset.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="SecurityTokenId2">An optional second security token for the password reset.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<ResetPasswordResult> _ResetPassword(SecurityToken_Id   SecurityTokenId1,
                                                                          Password           NewPassword,
                                                                          SecurityToken_Id?  SecurityTokenId2   = null,
                                                                          EventTracking_Id   EventTrackingId    = null,
                                                                          User_Id?           CurrentUserId      = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (SecurityTokenId1.IsNullOrEmpty)
                return ResetPasswordResult.ArgumentError(Users:            new User[0],
                                                         EventTrackingId:  eventTrackingId,
                                                         Argument:         nameof(SecurityTokenId1),
                                                         Description:      "The given first security token must not be null or empty!");

            if (!_PasswordResets.TryGetValue(SecurityTokenId1, out PasswordReset passwordReset))
                return ResetPasswordResult.ArgumentError(Users:            new User[0],
                                                         EventTrackingId:  eventTrackingId,
                                                         Argument:         nameof(SecurityTokenId1),
                                                         Description:      "Invalid security token(s)!");

            if (NewPassword.IsNullOrEmpty)
                return ResetPasswordResult.ArgumentError(Users:            new User[0],
                                                         EventTrackingId:  eventTrackingId,
                                                         Argument:         nameof(NewPassword),
                                                         Description:      "The given new password must not be null or empty!");

            if (PasswordQualityCheck(NewPassword.UnsecureString) < 1.0)
                return ResetPasswordResult.ArgumentError(Users:            new User[0],
                                                         EventTrackingId:  eventTrackingId,
                                                         Argument:         nameof(NewPassword),
                                                         Description:      "The choosen password does not match the password quality criteria!");

            if (SecurityTokenId2.HasValue && SecurityTokenId2.Value.IsNullOrEmpty)
                return ResetPasswordResult.ArgumentError(Users:            new User[0],
                                                         EventTrackingId:  eventTrackingId,
                                                         Argument:         nameof(SecurityTokenId1),
                                                         Description:      "The given second security token must not be null or empty!");

            if ((SecurityTokenId2.HasValue != passwordReset.SecurityToken2.HasValue) ||
                (SecurityTokenId2.HasValue && passwordReset.SecurityToken2.HasValue && SecurityTokenId2.Value != passwordReset.SecurityToken2.Value))
                return ResetPasswordResult.ArgumentError(Users:            new User[0],
                                                         EventTrackingId:  eventTrackingId,
                                                         Argument:         nameof(SecurityTokenId1),
                                                         Description:      "Invalid security token(s)!");


            foreach (var user in passwordReset.Users)
            {

                await WriteToDatabaseFile(UsersAPIPath + DefaultPasswordFile,
                                          resetPassword_MessageType,
                                          JSONObject.Create(

                                              new JProperty("login",                 user.Id.ToString()),

                                              new JProperty("newPassword", new JObject(
                                                  new JProperty("salt",              NewPassword.Salt.UnsecureString()),
                                                  new JProperty("passwordHash",      NewPassword.UnsecureString)
                                              ))

                                              //new JProperty("securityToken1",        SecurityToken1.ToString()),

                                              //SecurityToken2.HasValue
                                              //    ? new JProperty("securityToken2",  SecurityToken2.ToString())
                                              //    : null

                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                _LoginPasswords[user.Id] = new LoginPassword(user.Id, NewPassword);

                await SMTPClient.Send(PasswordChangedEMailCreator(user,
                                                                  user.EMail,
                                                                  //"https://" + Request.Host.SimpleString,
                                                                  DefaultLanguage,
                                                                  eventTrackingId));

            }

            await _RemovePasswordReset(passwordReset,
                                       eventTrackingId);

            return ResetPasswordResult.Success(Users,
                                                eventTrackingId);

        }

        /// <summary>
        /// Reset the user password(s) specified by the given security token(s).
        /// </summary>
        /// <param name="SecurityTokenId1">The (first) security token for the password reset.</param>
        /// <param name="NewPassword">The new password of the user.</param>
        /// <param name="SecurityTokenId2">An optional second security token for the password reset.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<ResetPasswordResult> ResetPassword(SecurityToken_Id   SecurityTokenId1,
                                                             Password           NewPassword,
                                                             SecurityToken_Id?  SecurityTokenId2   = null,
                                                             EventTracking_Id   EventTrackingId    = null,
                                                             User_Id?           CurrentUserId      = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _ResetPassword(SecurityTokenId1,
                                                NewPassword,
                                                SecurityTokenId2,
                                                eventTrackingId,
                                                CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return ResetPasswordResult.Failed(Users:            new User[0],
                                                      EventTrackingId:  eventTrackingId,
                                                      Exception:        e);

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return ResetPasswordResult.Failed(Users:            new User[0],
                                              EventTrackingId:  eventTrackingId,
                                              Description:      "Internal locking failed!");

        }

        #endregion

        #region RemovePasswordReset(PasswordReset, ...)

        /// <summary>
        /// Remove a password reset.
        /// </summary>
        /// <param name="PasswordReset">A password reset.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<Boolean> _RemovePasswordReset(PasswordReset     PasswordReset,
                                                                    EventTracking_Id  EventTrackingId   = null,
                                                                    User_Id?          CurrentUserId     = null)
        {

            await WriteToDatabaseFile(UsersAPIPath + DefaultPasswordResetsFile,
                                      removeFromPasswordFile,
                                      PasswordReset.ToJSON(),
                                      EventTrackingId ?? EventTracking_Id.New,
                                      CurrentUserId);

            _PasswordResets.Remove(PasswordReset.SecurityToken1);

            return true;

        }


        /// <summary>
        /// Remove a password reset.
        /// </summary>
        /// <param name="PasswordReset">A password reset.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<Boolean> RemovePasswordReset(PasswordReset     PasswordReset,
                                                       EventTracking_Id  EventTrackingId   = null,
                                                       User_Id?          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _RemovePasswordReset(PasswordReset,
                                                      eventTrackingId,
                                                      CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return false;

                }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return false;

        }

        #endregion

        #endregion

        #region API Keys

        #region Data

        /// <summary>
        /// An enumeration of all API keys.
        /// </summary>
        protected internal readonly Dictionary<APIKey_Id, APIKey> _APIKeys;

        /// <summary>
        /// An enumeration of all API keys.
        /// </summary>
        public IEnumerable<APIKey> APIKeys
        {
            get
            {

                if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _APIKeys.Values.ToArray();

                    }
                    finally
                    {
                        try
                        {
                            APIKeysSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return new APIKey[0];

            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(APIKey, MessageType,  OldAPIKey = null, ...)

        /// <summary>
        /// Write the given API key to the database and send out notifications.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldAPIKey">The old/updated API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(APIKey                   APIKey,
                                                                   NotificationMessageType  MessageType,
                                                                   APIKey                   OldAPIKey     = null,
                                                                   EventTracking_Id         EventTrackingId   = null,
                                                                   User_Id?                 CurrentUserId     = null)
        {

            if (APIKey is null)
                throw new ArgumentNullException(nameof(APIKey),   "The given API key must not be null!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      APIKey.ToJSON(true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(APIKey,
                                    MessageType,
                                    OldAPIKey,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (APIKey, MessageTypes, OldAPIKey = null, ...)

        /// <summary>
        /// Send API key notifications.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        /// <param name="MessageType">The API key notification.</param>
        /// <param name="OldAPIKey">The old/updated API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(APIKey                   APIKey,
                                                        NotificationMessageType  MessageType,
                                                        APIKey                   OldAPIKey     = null,
                                                        EventTracking_Id         EventTrackingId   = null,
                                                        User_Id?                 CurrentUserId     = null)
        {

            if (APIKey is null)
                throw new ArgumentNullException(nameof(APIKey),   "The given API key must not be null!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(APIKey,
                                    new NotificationMessageType[] { MessageType },
                                    OldAPIKey,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send API key notifications.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        /// <param name="MessageTypes">The API key notifications.</param>
        /// <param name="OldAPIKey">The old/updated API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(APIKey                            APIKey,
                                                        IEnumerable<NotificationMessageType>  MessageTypes,
                                                        APIKey                            OldAPIKey     = null,
                                                        EventTracking_Id                      EventTrackingId   = null,
                                                        User_Id?                              CurrentUserId     = null)
        {

            if (APIKey is null)
                throw new ArgumentNullException(nameof(APIKey),    "The given API key must not be null!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    messageTypesHash.Add(addUser_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    messageTypesHash.Add(OldUser == null
            //                           ? addUser_MessageType
            //                           : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();



            if (!DisableNotifications)
            {


            }

        }

        #endregion


        #region AddAPIKey           (APIKey, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a API key was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the API key was added.</param>
        /// <param name="APIKey">The added API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnAPIKeyAddedDelegate(DateTime          Timestamp,
                                                   APIKey            APIKey,
                                                   EventTracking_Id  EventTrackingId   = null,
                                                   User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a API key was added.
        /// </summary>
        public event OnAPIKeyAddedDelegate OnAPIKeyAdded;


        #region (protected internal) _AddAPIKey(APIKey, OnAdded = null, ...)

        /// <summary>
        /// Add the given API key to the API.
        /// </summary>
        /// <param name="APIKey">A new API key to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddAPIKeyResult> _AddAPIKey(APIKey                            APIKey,
                                                                  Action<APIKey, EventTracking_Id>  OnAdded           = null,
                                                                  EventTracking_Id                  EventTrackingId   = null,
                                                                  User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey is null)
                return AddAPIKeyResult.ArgumentError(APIKey,
                                                     eventTrackingId,
                                                     nameof(APIKey),
                                                     "The given API key must not be null!");

            if (APIKey.API != null && APIKey.API != this)
                return AddAPIKeyResult.ArgumentError(APIKey,
                                                     eventTrackingId,
                                                     nameof(APIKey),
                                                     "The given API key is already attached to another API!");

            if (_APIKeys.ContainsKey(APIKey.Id))
                return AddAPIKeyResult.ArgumentError(APIKey,
                                                     eventTrackingId,
                                                     nameof(APIKey),
                                                     "APIKey identification '" + APIKey.Id + "' already exists!");

            if (APIKey.Id.Length < MinAPIKeyLength)
                return AddAPIKeyResult.ArgumentError(APIKey,
                                                     eventTrackingId,
                                                     nameof(APIKey),
                                                     "APIKey identification '" + APIKey.Id + "' is too short!");

            APIKey.API = this;


            await WriteToDatabaseFile(addAPIKey_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            _APIKeys.Add(APIKey.Id, APIKey);

            OnAdded?.Invoke(APIKey,
                            eventTrackingId);

            var OnAPIKeyAddedLocal = OnAPIKeyAdded;
            if (OnAPIKeyAddedLocal != null)
                await OnAPIKeyAddedLocal?.Invoke(Timestamp.Now,
                                                 APIKey,
                                                 eventTrackingId,
                                                 CurrentUserId);

            await SendNotifications(APIKey,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddAPIKeyResult.Success(APIKey,
                                           eventTrackingId);

        }

        #endregion

        #region AddAPIKey                      (APIKey, OnAdded = null, ...)

        /// <summary>
        /// Add the given API key.
        /// </summary>
        /// <param name="APIKey">A new API key.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddAPIKeyResult> AddAPIKey(APIKey                            APIKey,
                                                     Action<APIKey, EventTracking_Id>  OnAdded           = null,
                                                     EventTracking_Id                  EventTrackingId   = null,
                                                     User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddAPIKey(APIKey,
                                            OnAdded,
                                            eventTrackingId,
                                            CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddAPIKeyResult.Failed(APIKey,
                                                  eventTrackingId,
                                                  e);

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddAPIKeyResult.Failed(APIKey,
                                          eventTrackingId,
                                          "Internal locking failed!");

        }

        #endregion

        #endregion

        #region AddAPIKeyIfNotExists(APIKey, OnAdded = null,                   CurrentUserId = null)

        #region (protected internal) _AddAPIKeyIfNotExists(APIKey, OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given API key to the API.
        /// </summary>
        /// <param name="APIKey">A new API key to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddAPIKeyIfNotExistsResult> _AddAPIKeyIfNotExists(APIKey                            APIKey,
                                                                                        Action<APIKey, EventTracking_Id>  OnAdded           = null,
                                                                                        EventTracking_Id                  EventTrackingId   = null,
                                                                                        User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey is null)
                return AddAPIKeyIfNotExistsResult.ArgumentError(APIKey,
                                                                eventTrackingId,
                                                                nameof(APIKey),
                                                                "The given API key must not be null!");

            if (APIKey.Id != null && APIKey.API != this)
                return AddAPIKeyIfNotExistsResult.ArgumentError(APIKey,
                                                                eventTrackingId,
                                                                nameof(APIKey),
                                                                "The given API key is already attached to another API!");

            if (_APIKeys.ContainsKey(APIKey.Id))
                return AddAPIKeyIfNotExistsResult.Success(_APIKeys[APIKey.Id],
                                                          AddedOrIgnored.Ignored,
                                                          eventTrackingId);

            if (APIKey.Id.Length < MinAPIKeyLength)
                return AddAPIKeyIfNotExistsResult.ArgumentError(APIKey,
                                                                eventTrackingId,
                                                                nameof(APIKey),
                                                                "APIKey identification '" + APIKey.Id + "' is too short!");

            APIKey.API = this;


            await WriteToDatabaseFile(addAPIKeyIfNotExists_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            _APIKeys.Add(APIKey.Id, APIKey);

            OnAdded?.Invoke(APIKey,
                            eventTrackingId);

            var OnAPIKeyAddedLocal = OnAPIKeyAdded;
            if (OnAPIKeyAddedLocal != null)
                await OnAPIKeyAddedLocal?.Invoke(Timestamp.Now,
                                                 APIKey,
                                                 eventTrackingId,
                                                 CurrentUserId);

            await SendNotifications(APIKey,
                                    addAPIKeyIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddAPIKeyIfNotExistsResult.Success(APIKey,
                                                      AddedOrIgnored.Added,
                                                      eventTrackingId);

        }

        #endregion

        #region AddAPIKeyIfNotExists                      (APIKey, OnAdded = null, ...)

        /// <summary>
        /// Add the given API key.
        /// </summary>
        /// <param name="APIKey">A new API key.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddAPIKeyIfNotExistsResult> AddAPIKeyIfNotExists(APIKey                            APIKey,
                                                                           Action<APIKey, EventTracking_Id>  OnAdded           = null,
                                                                           EventTracking_Id                  EventTrackingId   = null,
                                                                           User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddAPIKeyIfNotExists(APIKey,
                                                       OnAdded,
                                                       eventTrackingId,
                                                       CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddAPIKeyIfNotExistsResult.Failed(APIKey,
                                                             eventTrackingId,
                                                             e);

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddAPIKeyIfNotExistsResult.Failed(APIKey,
                                                     eventTrackingId,
                                                     "Internal locking failed!");

        }

        #endregion

        #endregion

        #region AddOrUpdateAPIKey   (APIKey, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateAPIKey(APIKey, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given API key to/within the API.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        protected internal async Task<AddOrUpdateAPIKeyResult> _AddOrUpdateAPIKey(APIKey                            APIKey,
                                                                                  Action<APIKey, EventTracking_Id>  OnAdded           = null,
                                                                                  Action<APIKey, EventTracking_Id>  OnUpdated         = null,
                                                                                  EventTracking_Id                  EventTrackingId   = null,
                                                                                  User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey is null)
                return AddOrUpdateAPIKeyResult.ArgumentError(APIKey,
                                                             eventTrackingId,
                                                             nameof(APIKey),
                                                             "The given API key must not be null!");

            if (APIKey.API != null && APIKey.API != this)
                return AddOrUpdateAPIKeyResult.ArgumentError(APIKey,
                                                             eventTrackingId,
                                                             nameof(APIKey.API),
                                                             "The given API key is already attached to another API!");

            if (APIKey.Id.Length < MinAPIKeyLength)
                return AddOrUpdateAPIKeyResult.ArgumentError(APIKey,
                                                             eventTrackingId,
                                                             nameof(APIKey),
                                                             "The given API key identification '" + APIKey.Id + "' is too short!");

            APIKey.API = this;


            await WriteToDatabaseFile(addOrUpdateAPIKey_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_APIKeys.TryGetValue(APIKey.Id, out APIKey OldAPIKey))
            {
                _APIKeys.Remove(OldAPIKey.Id);
                //APIKey.CopyAllLinkedDataFrom(OldAPIKey);
            }

            _APIKeys.Add(APIKey.Id, APIKey);

            if (OldAPIKey != null)
            {

                OnUpdated?.Invoke(APIKey,
                                  eventTrackingId);

                var OnAPIKeyUpdatedLocal = OnAPIKeyUpdated;
                if (OnAPIKeyUpdatedLocal != null)
                    await OnAPIKeyUpdatedLocal?.Invoke(Timestamp.Now,
                                                       APIKey,
                                                       OldAPIKey,
                                                       eventTrackingId,
                                                       CurrentUserId);

                await SendNotifications(APIKey,
                                        updateAPIKey_MessageType,
                                        OldAPIKey,
                                        eventTrackingId,
                                        CurrentUserId);

            }
            else
            {

                OnAdded?.Invoke(APIKey,
                                eventTrackingId);

                var OnAPIKeyAddedLocal = OnAPIKeyAdded;
                if (OnAPIKeyAddedLocal != null)
                    await OnAPIKeyAddedLocal?.Invoke(Timestamp.Now,
                                                     APIKey,
                                                     eventTrackingId,
                                                     CurrentUserId);

                await SendNotifications(APIKey,
                                        addAPIKey_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

            }

            return AddOrUpdateAPIKeyResult.Success(APIKey,
                                                   AddedOrUpdated.Update,
                                                   eventTrackingId);

        }

        #endregion

        #region AddOrUpdateAPIKey                      (APIKey, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given API key to/within the API.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="OnAdded">A delegate run whenever the API key has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        public async Task<AddOrUpdateAPIKeyResult> AddOrUpdateAPIKey(APIKey                            APIKey,
                                                                     Action<APIKey, EventTracking_Id>  OnAdded           = null,
                                                                     Action<APIKey, EventTracking_Id>  OnUpdated         = null,
                                                                     EventTracking_Id                  EventTrackingId   = null,
                                                                     User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddOrUpdateAPIKey(APIKey,
                                                    OnAdded,
                                                    OnUpdated,
                                                    eventTrackingId,
                                                    CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddOrUpdateAPIKeyResult.Failed(APIKey,
                                                          eventTrackingId,
                                                          e);

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddOrUpdateAPIKeyResult.Failed(APIKey,
                                                  eventTrackingId,
                                                  "Internal locking failed!");

        }

        #endregion

        #endregion

        #region UpdateAPIKey        (APIKey,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a API key was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the API key was updated.</param>
        /// <param name="APIKey">The updated API key.</param>
        /// <param name="OldAPIKey">The old API key.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking API key identification</param>
        public delegate Task OnAPIKeyUpdatedDelegate(DateTime          Timestamp,
                                                     APIKey            APIKey,
                                                     APIKey            OldAPIKey,
                                                     EventTracking_Id  EventTrackingId   = null,
                                                     User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a API key was updated.
        /// </summary>
        public event OnAPIKeyUpdatedDelegate OnAPIKeyUpdated;


        #region (protected internal) _UpdateAPIKey(APIKey,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given API key to/within the API.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        protected internal async Task<UpdateAPIKeyResult> _UpdateAPIKey(APIKey                            APIKey,
                                                                        Action<APIKey, EventTracking_Id>  OnUpdated         = null,
                                                                        EventTracking_Id                  EventTrackingId   = null,
                                                                        User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey is null)
                return UpdateAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey),
                                                        "The given API key must not be null!");

            if (!_TryGetAPIKey(APIKey.Id, out APIKey OldAPIKey))
                return UpdateAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey),
                                                        "The given API key '" + APIKey.Id + "' does not exists in this API!");

            if (APIKey.API != null && APIKey.API != this)
                return UpdateAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey.API),
                                                        "The given API key is not attached to this API!");

            APIKey.API = this;


            await WriteToDatabaseFile(updateAPIKey_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            _APIKeys.Remove(OldAPIKey.Id);
            //APIKey.CopyAllLinkedDataFrom(OldAPIKey);
            _APIKeys.Add(APIKey.Id, APIKey);

            OnUpdated?.Invoke(APIKey,
                              eventTrackingId);

            var OnAPIKeyUpdatedLocal = OnAPIKeyUpdated;
            if (OnAPIKeyUpdatedLocal != null)
                await OnAPIKeyUpdatedLocal?.Invoke(Timestamp.Now,
                                                 APIKey,
                                                 OldAPIKey,
                                                 eventTrackingId,
                                                 CurrentUserId);

            await SendNotifications(APIKey,
                                    updateAPIKey_MessageType,
                                    OldAPIKey,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateAPIKeyResult.Success(APIKey,
                                              eventTrackingId);

        }

        #endregion

        #region UpdateAPIKey                      (APIKey,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given API key to/within the API.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        public async Task<UpdateAPIKeyResult> UpdateAPIKey(APIKey                            APIKey,
                                                           Action<APIKey, EventTracking_Id>  OnUpdated         = null,
                                                           EventTracking_Id                  EventTrackingId   = null,
                                                           User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UpdateAPIKey(APIKey,
                                               OnUpdated,
                                               EventTrackingId,
                                               CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UpdateAPIKeyResult.Failed(APIKey,
                                                     eventTrackingId,
                                                     e);

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateAPIKeyResult.Failed(APIKey,
                                             eventTrackingId,
                                             "Internal locking failed!");

        }

        #endregion


        #region (protected internal) _UpdateAPIKey(APIKey, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given API key.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="UpdateDelegate">A delegate to update the given API key.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        protected internal async Task<UpdateAPIKeyResult> _UpdateAPIKey(APIKey                            APIKey,
                                                                        Action<APIKey.Builder>            UpdateDelegate,
                                                                        Action<APIKey, EventTracking_Id>  OnUpdated         = null,
                                                                        EventTracking_Id                  EventTrackingId   = null,
                                                                        User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey is null)
                return UpdateAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey),
                                                        "The given API key must not be null!");

            if (!_APIKeyExists(APIKey.Id))
                return UpdateAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey),
                                                        "The given API key '" + APIKey.Id + "' does not exists in this API!");

            if (APIKey.API != this)
                return UpdateAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey.API),
                                                        "The given API key is not attached to this API!");

            if (UpdateDelegate is null)
                return UpdateAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(UpdateDelegate),
                                                        "The given update delegate must not be null!");


            var builder = APIKey.ToBuilder();
            UpdateDelegate(builder);
            var updatedAPIKey = builder.ToImmutable;

            await WriteToDatabaseFile(updateAPIKey_MessageType,
                                      updatedAPIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            _APIKeys.Remove(APIKey.Id);
            //updatedAPIKey.CopyAllLinkedDataFrom(APIKey);
            _APIKeys.Add(updatedAPIKey.Id, updatedAPIKey);

            OnUpdated?.Invoke(updatedAPIKey,
                              eventTrackingId);

            var OnAPIKeyUpdatedLocal = OnAPIKeyUpdated;
            if (OnAPIKeyUpdatedLocal != null)
                await OnAPIKeyUpdatedLocal?.Invoke(Timestamp.Now,
                                                   updatedAPIKey,
                                                   APIKey,
                                                   eventTrackingId,
                                                   CurrentUserId);

            await SendNotifications(updatedAPIKey,
                                    updateAPIKey_MessageType,
                                    APIKey,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateAPIKeyResult.Success(APIKey,
                                              eventTrackingId);

        }

        #endregion

        #region UpdateAPIKey                      (APIKey, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given API key.
        /// </summary>
        /// <param name="APIKey">A API key.</param>
        /// <param name="UpdateDelegate">A delegate to update the given API key.</param>
        /// <param name="OnUpdated">A delegate run whenever the API key has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        public async Task<UpdateAPIKeyResult> UpdateAPIKey(APIKey                            APIKey,
                                                           Action<APIKey.Builder>            UpdateDelegate,
                                                           Action<APIKey, EventTracking_Id>  OnUpdated         = null,
                                                           EventTracking_Id                  EventTrackingId   = null,
                                                           User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UpdateAPIKey(APIKey,
                                               UpdateDelegate,
                                               OnUpdated,
                                               eventTrackingId,
                                               CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UpdateAPIKeyResult.Failed(APIKey,
                                                     eventTrackingId,
                                                     e);

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateAPIKeyResult.Failed(APIKey,
                                             eventTrackingId,
                                             "Internal locking failed!");

        }

        #endregion

        #endregion


        #region APIKeyExists       (APIKeyId)

        /// <summary>
        /// Determines whether the given API key identification exists within this API.
        /// </summary>
        /// <param name="APIKey">The unique identification of an API key.</param>
        protected internal Boolean _APIKeyExists(APIKey_Id APIKey)

            => APIKey.IsNotNullOrEmpty && _APIKeys.ContainsKey(APIKey);

        /// <summary>
        /// Determines whether the given API key identification exists within this API.
        /// </summary>
        /// <param name="APIKey">The unique identification of an API key.</param>
        protected internal Boolean _APIKeyExists(APIKey_Id? APIKey)

            => APIKey.IsNotNullOrEmpty() && _APIKeys.ContainsKey(APIKey.Value);


        /// <summary>
        /// Determines whether the given API key identification exists within this API.
        /// </summary>
        /// <param name="APIKey">The unique identification of an API key.</param>
        public Boolean APIKeyExists(APIKey_Id APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyExists(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given API key identification exists within this API.
        /// </summary>
        /// <param name="APIKey">The unique identification of an API key.</param>
        public Boolean APIKeyExists(APIKey_Id? APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyExists(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region APIKeyIsValid      (APIKeyId)

        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _APIKeyIsValid(APIKey APIKey)

            =>   APIKey != null &&
               (!APIKey.NotBefore.HasValue || Timestamp.Now >= APIKey.NotBefore) &&
               (!APIKey.NotAfter. HasValue || Timestamp.Now <  APIKey.NotAfter)  &&
                !APIKey.IsDisabled;


        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _APIKeyIsValid(APIKey_Id APIKey)

            => _TryGetAPIKey(APIKey, out APIKey apiKey) &&
               _APIKeyIsValid(apiKey);

        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _APIKeyIsValid(APIKey_Id? APIKey)

            => APIKey.HasValue &&
               _APIKeyIsValid(APIKey.Value);


        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        public Boolean APIKeyIsValid(APIKey APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyIsValid(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        public Boolean APIKeyIsValid(APIKey_Id APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyIsValid(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given API key is valid within this API.
        /// </summary>
        /// <param name="APIKey">The API key.</param>
        public Boolean APIKeyIsValid(APIKey_Id? APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _APIKeyIsValid(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region GetAPIKey          (APIKeyId)

        /// <summary>
        /// Get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKey">The unique identification of an API key.</param>
        protected internal APIKey _GetAPIKey(APIKey_Id APIKey)
        {

            if (!APIKey.IsNullOrEmpty && _APIKeys.TryGetValue(APIKey, out APIKey apiKey))
                return apiKey;

            return null;

        }


        /// <summary>
        /// Get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKey">The unique identification of the API key.</param>
        public APIKey GetAPIKey(APIKey_Id APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetAPIKey(APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        #endregion

        #region TryGetAPIKey       (APIKeyId, out APIKey)

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _TryGetAPIKey(APIKey_Id APIKeyId, out APIKey APIKey)
        {

            if (!APIKeyId.IsNullOrEmpty &&
                _APIKeys.TryGetValue(APIKeyId, out APIKey apiKey))
            {
                APIKey = apiKey;
                return true;
            }

            APIKey = null;
            return false;

        }

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _TryGetAPIKey(APIKey_Id? APIKeyId, out APIKey APIKey)
        {

            if (APIKeyId.IsNotNullOrEmpty() &&
               _APIKeys. TryGetValue(APIKeyId.Value, out APIKey apiKey))
            {
                APIKey = apiKey;
                return true;
            }

            APIKey = null;
            return false;

        }


        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        /// <param name="APIKey">The API key.</param>
        public Boolean TryGetAPIKey(APIKey_Id   APIKeyId,
                                    out APIKey  APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetAPIKey(APIKeyId, out APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            APIKey = null;
            return false;

        }

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of an API key.</param>
        /// <param name="APIKey">The API key.</param>
        public Boolean TryGetAPIKey(APIKey_Id?  APIKeyId,
                                    out APIKey  APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetAPIKey(APIKeyId, out APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            APIKey = null;
            return false;

        }

        #endregion

        #region TryGetAPIKeyIfValid(APIKeyId, out APIKey)

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of the API key.</param>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _TryGetValidAPIKey(APIKey_Id   APIKeyId,
                                                      out APIKey  APIKey)

        {

            if (_APIKeys.TryGetValue(APIKeyId, out APIKey apiKey) &&
                _APIKeyIsValid(apiKey))
            {
                APIKey = apiKey;
                return true;
            }

            APIKey = null;
            return false;

        }

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of the API key.</param>
        /// <param name="APIKey">The API key.</param>
        protected internal Boolean _TryGetValidAPIKey(APIKey_Id?  APIKeyId,
                                                      out APIKey  APIKey)

        {

            if (APIKeyId.IsNotNullOrEmpty() &&
                _APIKeys.TryGetValue(APIKeyId.Value, out APIKey apiKey) &&
                _APIKeyIsValid(apiKey))
            {
                APIKey = apiKey;
                return true;
            }

            APIKey = null;
            return false;

        }


        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of the API key.</param>
        /// <param name="APIKey">The API key.</param>
        public Boolean TryGetValidAPIKey(APIKey_Id   APIKeyId,
                                         out APIKey  APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetValidAPIKey(APIKeyId, out APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            APIKey = null;
            return false;

        }

        /// <summary>
        /// Try to get the API key having the given unique identification.
        /// </summary>
        /// <param name="APIKeyId">The unique identification of the API key.</param>
        /// <param name="APIKey">The API key.</param>
        public Boolean TryGetValidAPIKey(APIKey_Id?  APIKeyId,
                                         out APIKey  APIKey)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetValidAPIKey(APIKeyId, out APIKey);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            APIKey = null;
            return false;

        }

        #endregion


        #region GetAPIKeysForUser     (User)

        /// <summary>
        /// Return all API keys for the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        protected internal IEnumerable<APIKey> _GetAPIKeysForUser(User User)

            => _APIKeys.Values.
                        Where(apiKey => apiKey.User == User).
                        ToArray();


        /// <summary>
        /// Return all API keys for the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        public IEnumerable<APIKey> GetAPIKeysForUser(User User)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetAPIKeysForUser(User);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new APIKey[0];

        }

        #endregion

        #region GetValidAPIKeysForUser(User)

        /// <summary>
        /// Return all API keys for the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        protected internal IEnumerable<APIKey> _GetValidAPIKeysForUser(User User)

            => _APIKeys.Values.
                        Where(apiKey => apiKey.User == User &&
                                        APIKeyIsValid(apiKey)).
                        ToArray();


        /// <summary>
        /// Return all API keys for the given user.
        /// </summary>
        /// <param name="User">A user.</param>
        public IEnumerable<APIKey> GetValidAPIKeysForUser(User User)
        {

            if (APIKeysSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetValidAPIKeysForUser(User);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new APIKey[0];

        }

        #endregion


        #region RemoveAPIKey(APIKey, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a API key was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the API key was removed.</param>
        /// <param name="APIKey">The API key to be removed.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking API key identification</param>
        public delegate Task OnAPIKeyRemovedDelegate(DateTime          Timestamp,
                                                     APIKey            APIKey,
                                                     EventTracking_Id  EventTrackingId   = null,
                                                     User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a API key was removed.
        /// </summary>
        public event OnAPIKeyRemovedDelegate OnAPIKeyRemoved;


        #region (protected internal) _RemoveAPIKey(APIKey, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given API key from the API.
        /// </summary>
        /// <param name="APIKey">The API key to be removed.</param>
        /// <param name="OnRemoved">A delegate run whenever the API key has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        protected internal async Task<RemoveAPIKeyResult> _RemoveAPIKey(APIKey                            APIKey,
                                                                        Action<APIKey, EventTracking_Id>  OnRemoved         = null,
                                                                        EventTracking_Id                  EventTrackingId   = null,
                                                                        User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (APIKey is null)
                return RemoveAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey),
                                                        "The given API key must not be null!");

            if (APIKey.API != this)
                return RemoveAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey),
                                                        "The given API key is not attached to this API!");

            if (!_APIKeys.TryGetValue(APIKey.Id, out APIKey APIKeyToBeRemoved))
                return RemoveAPIKeyResult.ArgumentError(APIKey,
                                                        eventTrackingId,
                                                        nameof(APIKey),
                                                        "The given API key does not exists in this API!");


            await WriteToDatabaseFile(removeAPIKey_MessageType,
                                      APIKey.ToJSON(false),
                                      eventTrackingId,
                                      CurrentUserId);

            _APIKeys.Remove(APIKey.Id);

            OnRemoved?.Invoke(APIKey,
                              eventTrackingId);

            var OnAPIKeyRemovedLocal = OnAPIKeyRemoved;
            if (OnAPIKeyRemovedLocal != null)
                await OnAPIKeyRemovedLocal?.Invoke(Timestamp.Now,
                                                   APIKey,
                                                   eventTrackingId,
                                                   CurrentUserId);

            await SendNotifications(APIKey,
                                    removeAPIKey_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return RemoveAPIKeyResult.Success(APIKey,
                                              eventTrackingId);

        }

        #endregion

        #region RemoveAPIKey                      (APIKey, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given API key from the API.
        /// </summary>
        /// <param name="APIKey">The API key to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the API key has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional API key identification initiating this command/request.</param>
        public async Task<RemoveAPIKeyResult> RemoveAPIKey(APIKey                            APIKey,
                                                           Action<APIKey, EventTracking_Id>  OnRemoved         = null,
                                                           EventTracking_Id                  EventTrackingId   = null,
                                                           User_Id?                          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await APIKeysSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _RemoveAPIKey(APIKey,
                                               OnRemoved,
                                               eventTrackingId,
                                               CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return RemoveAPIKeyResult.Failed(APIKey,
                                                     eventTrackingId,
                                                     e);

                }
                finally
                {
                    try
                    {
                        APIKeysSemaphore.Release();
                    }
                    catch
                    { }
                }
            }


            return RemoveAPIKeyResult.Failed(APIKey,
                                             eventTrackingId,
                                             "Internal locking failed!");

        }

        #endregion

        #endregion

        #endregion

        #region UserGroups

        #region Data

        /// <summary>
        /// An enumeration of all user groups.
        /// </summary>
        protected internal readonly Dictionary<UserGroup_Id, UserGroup> _UserGroups;

        /// <summary>
        /// An enumeration of all user groups.
        /// </summary>
        public IEnumerable<UserGroup> UserGroups
        {
            get
            {

                if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _UserGroups.Values.ToArray();

                    }
                    finally
                    {
                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return new UserGroup[0];

            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(UserGroup,                   MessageType,    OldUserGroup = null, ...)

        /// <summary>
        /// Write the given user group to the database and send out notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldUserGroup">The old/updated user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(UserGroup                UserGroup,
                                                                   NotificationMessageType  MessageType,
                                                                   UserGroup                OldUserGroup      = null,
                                                                   EventTracking_Id         EventTrackingId   = null,
                                                                   User_Id?                 CurrentUserId     = null)
        {

            if (UserGroup is null)
                throw new ArgumentNullException(nameof(UserGroup),    "The given user group must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      UserGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(UserGroup,
                                    MessageType,
                                    OldUserGroup,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (UserGroup,                   MessageType(s), OldUserGroup = null, ...)

        /// <summary>
        /// Send user group notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldUserGroup">The old/updated user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal Task SendNotifications(UserGroup                UserGroup,
                                                  NotificationMessageType  MessageType,
                                                  UserGroup                OldUserGroup      = null,
                                                  EventTracking_Id         EventTrackingId   = null,
                                                  User_Id?                 CurrentUserId     = null)

            => SendNotifications(UserGroup,
                                 new NotificationMessageType[] { MessageType },
                                 OldUserGroup,
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user group notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldUserGroup">The old/updated user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(UserGroup                             UserGroup,
                                                        IEnumerable<NotificationMessageType>  MessageTypes,
                                                        UserGroup                             OldUserGroup      = null,
                                                        EventTracking_Id                      EventTrackingId   = null,
                                                        User_Id?                              CurrentUserId     = null)
        {

            if (UserGroup is null)
                throw new ArgumentNullException(nameof(UserGroup),     "The given user group must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldUserGroup == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected internal) SendNotifications           (UserGroup, ParentUserGroups, MessageType(s), ...)

        /// <summary>
        /// Send user group notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="ParentUserGroups">The enumeration of parent user groups.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal virtual Task SendNotifications(UserGroup                UserGroup,
                                                          IEnumerable<UserGroup>   ParentUserGroups,
                                                          NotificationMessageType  MessageType,
                                                          EventTracking_Id         EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)

            => SendNotifications(UserGroup,
                                 ParentUserGroups,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user group notifications.
        /// </summary>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="ParentUserGroups">The enumeration of parent user groups.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async virtual Task SendNotifications(UserGroup                             UserGroup,
                                                                IEnumerable<UserGroup>                ParentUserGroups,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id                      EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (UserGroup is null)
                throw new ArgumentNullException(nameof(UserGroup),         "The given user group must not be null or empty!");

            if (ParentUserGroups is null || !ParentUserGroups.Any())
                throw new ArgumentNullException(nameof(ParentUserGroups),  "The given enumeration of parent user groups must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),      "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    messageTypesHash.Add(addUser_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    messageTypesHash.Add(OldUserGroup == null
            //                           ? addUser_MessageType
            //                           : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        var AllTelegramNotifications  = ParentUserGroups.
                                                            SelectMany(parent => parent.User2UserGroupEdges).
                                                            SelectMany(edge   => edge.Source.GetNotificationsOf<TelegramNotification>(deleteUserGroup_MessageType)).
                                                            ToSafeHashSet();

                        if (AllTelegramNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteUserGroup_MessageType))
                                await TelegramClient.SendTelegrams(String.Concat("User group '", UserGroup.Name.FirstText(), "' has been deleted. "),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    var AllSMSNotifications = ParentUserGroups.
                                                  SelectMany(parent => parent.User2UserGroupEdges).
                                                  SelectMany(edge   => edge.Source.GetNotificationsOf<SMSNotification>(deleteUserGroup_MessageType)).
                                                  ToSafeHashSet();

                    if (AllSMSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteUserGroup_MessageType))
                            SendSMS(String.Concat("User group '", UserGroup.Name.FirstText(), "' has been deleted."),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications = ParentUserGroups.
                                                    SelectMany(parent => parent.User2UserGroupEdges).
                                                    SelectMany(edge   => edge.Source.GetNotificationsOf<HTTPSNotification>(deleteUserGroup_MessageType)).
                                                    ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteUserGroup_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("userGroupDeleted",
                                                                 UserGroup.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications = ParentUserGroups.
                                                        SelectMany(parent => parent.User2UserGroupEdges).
                                                        SelectMany(edge   => edge.Source.GetNotificationsOf<EMailNotification>(deleteUserGroup_MessageType)).
                                                        ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteUserGroup_MessageType))
                                await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIPassphrase,
                                         Subject        = String.Concat("User group '", UserGroup.Name.FirstText(), "' has been deleted."),

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User group <a href=\"https://", ExternalDNSName, BasePath, "/organizations/", UserGroup.Id, "\">", UserGroup.Name.FirstText(), "</a> has been deleted.<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User group '", UserGroup.Name.FirstText(), "' has been deleted.\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) GetUserGroupSerializator(Request, User)

        protected internal UserGroupToJSONDelegate GetUserGroupSerializator(HTTPRequest  Request,
                                                                            User         User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (userGroup,
                            embedded,
                            expandUsers,
                            expandParentGroup,
                            expandSubgroups,
                            expandAttachedFiles,
                            includeAttachedFileSignatures,
                            includeCryptoHash)

                            => userGroup.ToJSON(embedded,
                                                expandUsers,
                                                expandParentGroup,
                                                expandSubgroups,
                                                expandAttachedFiles,
                                                includeAttachedFileSignatures,
                                                includeCryptoHash);

            }

        }

        #endregion


        #region AddUserGroup           (UserGroup, OnAdded = null, ...)

        /// <summary>
        /// A delegate called whenever a user group was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user group was added.</param>
        /// <param name="UserGroup">The added user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnUserGroupAddedDelegate(DateTime          Timestamp,
                                                      UserGroup         UserGroup,
                                                      EventTracking_Id  EventTrackingId   = null,
                                                      User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user group was added.
        /// </summary>
        public event OnUserGroupAddedDelegate OnUserGroupAdded;


        #region (protected internal) _AddUserGroup(UserGroup, OnAdded = null, ...)

        /// <summary>
        /// Add the given user group to the API.
        /// </summary>
        /// <param name="UserGroup">A new user group to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddUserGroupResult> _AddUserGroup(UserGroup                            UserGroup,
                                                                        Action<UserGroup, EventTracking_Id>  OnAdded           = null,
                                                                        EventTracking_Id                     EventTrackingId   = null,
                                                                        User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup is null)
                return AddUserGroupResult.ArgumentError(UserGroup,
                                                        eventTrackingId,
                                                        nameof(UserGroup),
                                                        "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return AddUserGroupResult.ArgumentError(UserGroup,
                                                        eventTrackingId,
                                                        nameof(UserGroup),
                                                        "The given user group is already attached to another API!");

            if (_UserGroups.ContainsKey(UserGroup.Id))
                return AddUserGroupResult.ArgumentError(UserGroup,
                                                        eventTrackingId,
                                                        nameof(UserGroup),
                                                        "The given user group identification '" + UserGroup.Id + "' already exists!");

            if (UserGroup.Id.Length < MinUserGroupIdLength)
                return AddUserGroupResult.ArgumentError(UserGroup,
                                                        eventTrackingId,
                                                        nameof(UserGroup),
                                                        "UserGroup identification '" + UserGroup.Id + "' is too short!");

            //if (UserGroup.Name.IsNullOrEmpty() || UserGroup.Name.Trim().IsNullOrEmpty())
            //    return AddUserGroupResult.ArgumentError(UserGroup,
            //                                            eventTrackingId,
            //                                            nameof(UserGroup),
            //                                            "The given user name must not be null!");

            //if (UserGroup.Name.Length < MinUserGroupNameLength)
            //    return AddUserGroupResult.ArgumentError(UserGroup,
            //                                            eventTrackingId,
            //                                            nameof(UserGroup),
            //                                            "UserGroup name '" + UserGroup.Name + "' is too short!");

            UserGroup.API = this;


            await WriteToDatabaseFile(addUserGroup_MessageType,
                                      UserGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _UserGroups.Add(UserGroup.Id, UserGroup);


            OnAdded?.Invoke(UserGroup,
                            eventTrackingId);

            var OnUserGroupAddedLocal = OnUserGroupAdded;
            if (OnUserGroupAddedLocal != null)
                await OnUserGroupAddedLocal?.Invoke(Timestamp.Now,
                                                    UserGroup,
                                                    eventTrackingId,
                                                    CurrentUserId);

            await SendNotifications(UserGroup,
                                    addUserGroup_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);


            return AddUserGroupResult.Success(UserGroup,
                                              eventTrackingId);

        }

        #endregion

        #region AddUserGroup                      (UserGroup, OnAdded = null, ...)

        /// <summary>
        /// Add the given user group.
        /// </summary>
        /// <param name="UserGroup">A new user group.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserGroupResult> AddUserGroup(UserGroup                            UserGroup,
                                                           Action<UserGroup, EventTracking_Id>  OnAdded           = null,
                                                           EventTracking_Id                     EventTrackingId   = null,
                                                           User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddUserGroup(UserGroup,
                                               OnAdded,
                                               eventTrackingId,
                                               CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddUserGroupResult.Failed(UserGroup,
                                                     eventTrackingId,
                                                     e);

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddUserGroupResult.Failed(UserGroup,
                                             eventTrackingId,
                                             "Internal locking failed!");

        }

        #endregion

        #endregion

        #region AddUserGroupIfNotExists(UserGroup, OnAdded = null, ...)

        #region (protected internal) _AddUserGroupIfNotExists(UserGroup,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given user group to the API.
        /// </summary>
        /// <param name="UserGroup">A new user group to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<AddUserGroupIfNotExistsResult> _AddUserGroupIfNotExists(UserGroup                            UserGroup,
                                                                                              Action<UserGroup, EventTracking_Id>  OnAdded           = null,
                                                                                              EventTracking_Id                     EventTrackingId   = null,
                                                                                              User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup is null)
                return AddUserGroupIfNotExistsResult.ArgumentError(UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return AddUserGroupIfNotExistsResult.ArgumentError(UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group is already attached to another API!");

            if (_UserGroups.ContainsKey(UserGroup.Id))
                return AddUserGroupIfNotExistsResult.ArgumentError(UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group identification '" + UserGroup.Id + "' already exists!");

            if (UserGroup.Id.Length < MinUserGroupIdLength)
                return AddUserGroupIfNotExistsResult.ArgumentError(UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "UserGroup identification '" + UserGroup.Id + "' is too short!");

            //if (UserGroup.Name.IsNullOrEmpty() || UserGroup.Name.Trim().IsNullOrEmpty())
            //    return AddUserGroupIfNotExistsResult.ArgumentError(UserGroup,
            //                                                       eventTrackingId,
            //                                                       nameof(UserGroup),
            //                                                       "The given user name must not be null!");

            //if (UserGroup.Name.Length < MinUserGroupNameLength)
            //    return AddUserGroupIfNotExistsResult.ArgumentError(UserGroup,
            //                                                       eventTrackingId,
            //                                                       nameof(UserGroup),
            //                                                       "UserGroup name '" + UserGroup.Name + "' is too short!");

            UserGroup.API = this;


            await WriteToDatabaseFile(addUserGroupIfNotExists_MessageType,
                                      UserGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _UserGroups.Add(UserGroup.Id, UserGroup);

            OnAdded?.Invoke(UserGroup,
                            eventTrackingId);

            var OnUserGroupAddedLocal = OnUserGroupAdded;
            if (OnUserGroupAddedLocal != null)
                await OnUserGroupAddedLocal?.Invoke(Timestamp.Now,
                                                    UserGroup,
                                                    eventTrackingId,
                                                    CurrentUserId);

            await SendNotifications(UserGroup,
                                    addUserGroupIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);


            return AddUserGroupIfNotExistsResult.Success(UserGroup,
                                                         AddedOrIgnored.Added,
                                                         eventTrackingId);

        }

        #endregion

        #region AddUserGroupIfNotExists             (UserGroup,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given user group.
        /// </summary>
        /// <param name="UserGroup">A new user group.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<AddUserGroupIfNotExistsResult> AddUserGroupIfNotExists(UserGroup                            UserGroup,
                                                                                 Action<UserGroup, EventTracking_Id>  OnAdded           = null,
                                                                                 EventTracking_Id                     EventTrackingId   = null,
                                                                                 User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddUserGroupIfNotExists(UserGroup,
                                                          OnAdded,
                                                          eventTrackingId,
                                                          CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddUserGroupIfNotExistsResult.Failed(UserGroup,
                                                                eventTrackingId,
                                                                e);

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddUserGroupIfNotExistsResult.Failed(UserGroup,
                                                        eventTrackingId,
                                                        "Internal locking failed!");

        }

        #endregion

        #endregion

        #region AddOrUpdateUserGroup   (UserGroup, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateUserGroup   (UserGroup,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user group to/within the API.
        /// </summary>
        /// <param name="UserGroup">A user group.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        protected internal async Task<AddOrUpdateUserGroupResult> _AddOrUpdateUserGroup(UserGroup                            UserGroup,
                                                                                        Action<UserGroup, EventTracking_Id>  OnAdded           = null,
                                                                                        Action<UserGroup, EventTracking_Id>  OnUpdated         = null,
                                                                                        EventTracking_Id                     EventTrackingId   = null,
                                                                                        User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup is null)
                return AddOrUpdateUserGroupResult.ArgumentError(UserGroup,
                                                                eventTrackingId,
                                                                nameof(UserGroup),
                                                                "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return AddOrUpdateUserGroupResult.ArgumentError(UserGroup,
                                                                eventTrackingId,
                                                                nameof(UserGroup.API),
                                                                "The given user group is already attached to another API!");

            if (UserGroup.Id.Length < MinUserGroupIdLength)
                return AddOrUpdateUserGroupResult.ArgumentError(UserGroup,
                                                                eventTrackingId,
                                                                nameof(UserGroup),
                                                                "The given user group identification '" + UserGroup.Id + "' is too short!");

            //if (UserGroup.Name.IsNullOrEmpty() || UserGroup.Name.Trim().IsNullOrEmpty())
            //    return AddOrUpdateUserGroupResult.ArgumentError(UserGroup,
            //                                                    eventTrackingId,
            //                                                    nameof(UserGroup),
            //                                                    "The given user group name must not be null!");

            //if (UserGroup.Name.Length < MinUserGroupNameLength)
            //    return AddOrUpdateUserGroupResult.ArgumentError(UserGroup,
            //                                                    eventTrackingId,
            //                                                    nameof(UserGroup),
            //                                                    "The given user group name '" + UserGroup.Name + "' is too short!");

            UserGroup.API = this;


            await WriteToDatabaseFile(addOrUpdateUserGroup_MessageType,
                                      UserGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_UserGroups.TryGetValue(UserGroup.Id, out UserGroup OldUserGroup))
            {
                _UserGroups.Remove(OldUserGroup.Id);
                UserGroup.CopyAllLinkedDataFrom(OldUserGroup);
            }

            _UserGroups.Add(UserGroup.Id, UserGroup);

            if (OldUserGroup is null)
            {

                OnAdded?.Invoke(UserGroup,
                                eventTrackingId);

                var OnUserGroupAddedLocal = OnUserGroupAdded;
                if (OnUserGroupAddedLocal != null)
                    await OnUserGroupAddedLocal?.Invoke(Timestamp.Now,
                                                        UserGroup,
                                                        eventTrackingId,
                                                        CurrentUserId);

                await SendNotifications(UserGroup,
                                        addUserGroup_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateUserGroupResult.Success(UserGroup,
                                                          AddedOrUpdated.Add,
                                                          eventTrackingId);

            }
            else
            {

                OnUpdated?.Invoke(UserGroup,
                                  eventTrackingId);

                var OnUserGroupUpdatedLocal = OnUserGroupUpdated;
                if (OnUserGroupUpdatedLocal != null)
                    await OnUserGroupUpdatedLocal?.Invoke(Timestamp.Now,
                                                          UserGroup,
                                                          OldUserGroup,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(UserGroup,
                                        updateUserGroup_MessageType,
                                        OldUserGroup,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateUserGroupResult.Success(UserGroup,
                                                          AddedOrUpdated.Update,
                                                          eventTrackingId);

            }

        }

        #endregion

        #region AddOrUpdateUserGroup   (UserGroup,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given user group to/within the API.
        /// </summary>
        /// <param name="UserGroup">A user group.</param>
        /// <param name="OnAdded">A delegate run whenever the user group has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        public async Task<AddOrUpdateUserGroupResult> AddOrUpdateUserGroup(UserGroup                            UserGroup,
                                                                           Action<UserGroup, EventTracking_Id>  OnAdded           = null,
                                                                           Action<UserGroup, EventTracking_Id>  OnUpdated         = null,
                                                                           EventTracking_Id                     EventTrackingId   = null,
                                                                           User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddOrUpdateUserGroup(UserGroup,
                                                       OnAdded,
                                                       OnUpdated,
                                                       eventTrackingId,
                                                       CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddOrUpdateUserGroupResult.Failed(UserGroup,
                                                             eventTrackingId,
                                                             e);

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddOrUpdateUserGroupResult.Failed(UserGroup,
                                                     eventTrackingId,
                                                     "Internal locking failed!");

        }

        #endregion

        #endregion

        #region UpdateUserGroup        (UserGroup,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a user group was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user group was updated.</param>
        /// <param name="UserGroup">The updated user group.</param>
        /// <param name="OldUserGroup">The old user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user group identification</param>
        public delegate Task OnUserGroupUpdatedDelegate(DateTime          Timestamp,
                                                        UserGroup         UserGroup,
                                                        UserGroup         OldUserGroup,
                                                        EventTracking_Id  EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user group was updated.
        /// </summary>
        public event OnUserGroupUpdatedDelegate OnUserGroupUpdated;


        #region (protected internal) _UpdateUserGroup(UserGroup,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given user group to/within the API.
        /// </summary>
        /// <param name="UserGroup">A user group.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        protected internal async Task<UpdateUserGroupResult> _UpdateUserGroup(UserGroup                            UserGroup,
                                                                              Action<UserGroup, EventTracking_Id>  OnUpdated         = null,
                                                                              EventTracking_Id                     EventTrackingId   = null,
                                                                              User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup is null)
                return UpdateUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup),
                                                           "The given user must not be null!");

            if (!_TryGetUserGroup(UserGroup.Id, out UserGroup OldUserGroup))
                return UpdateUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup),
                                                           "The given user '" + UserGroup.Id + "' does not exists in this API!");

            if (UserGroup.API != null && UserGroup.API != this)
                return UpdateUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup.API),
                                                           "The given user is not attached to this API!");

            UserGroup.API = this;


            await WriteToDatabaseFile(updateUserGroup_MessageType,
                                      UserGroup.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _UserGroups.Remove(OldUserGroup.Id);
            UserGroup.CopyAllLinkedDataFrom(OldUserGroup);
            _UserGroups.Add(UserGroup.Id, UserGroup);

            OnUpdated?.Invoke(UserGroup,
                              eventTrackingId);

            var OnUserGroupUpdatedLocal = OnUserGroupUpdated;
            if (OnUserGroupUpdatedLocal != null)
                await OnUserGroupUpdatedLocal?.Invoke(Timestamp.Now,
                                                      UserGroup,
                                                      OldUserGroup,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(UserGroup,
                                    updateUserGroup_MessageType,
                                    OldUserGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateUserGroupResult.Success(UserGroup,
                                                 eventTrackingId);

        }

        #endregion

        #region UpdateUserGroup                      (UserGroup,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given user group to/within the API.
        /// </summary>
        /// <param name="UserGroup">A user group.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        public async Task<UpdateUserGroupResult> UpdateUserGroup(UserGroup                            UserGroup,
                                                                 Action<UserGroup, EventTracking_Id>  OnUpdated         = null,
                                                                 EventTracking_Id                     EventTrackingId   = null,
                                                                 User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UpdateUserGroup(UserGroup,
                                                  OnUpdated,
                                                  EventTrackingId,
                                                  CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UpdateUserGroupResult.Failed(UserGroup,
                                                        eventTrackingId,
                                                        e);

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateUserGroupResult.Failed(UserGroup,
                                                eventTrackingId,
                                                "Internal locking failed!");

        }

        #endregion


        #region (protected internal) _UpdateUserGroup(UserGroup, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user group.
        /// </summary>
        /// <param name="UserGroup">An user group.</param>
        /// <param name="UpdateDelegate">A delegate to update the given user group.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        protected internal async Task<UpdateUserGroupResult> _UpdateUserGroup(UserGroup                            UserGroup,
                                                                              Action<UserGroup.Builder>            UpdateDelegate,
                                                                              Action<UserGroup, EventTracking_Id>  OnUpdated         = null,
                                                                              EventTracking_Id                     EventTrackingId   = null,
                                                                              User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup is null)
                return UpdateUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup),
                                                           "The given user must not be null!");

            if (!_UserGroupExists(UserGroup.Id))
                return UpdateUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup),
                                                           "The given user '" + UserGroup.Id + "' does not exists in this API!");

            if (UserGroup.API != this)
                return UpdateUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup.API),
                                                           "The given user is not attached to this API!");

            if (UpdateDelegate is null)
                return UpdateUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UpdateDelegate),
                                                           "The given update delegate must not be null!");


            var builder = UserGroup.ToBuilder();
            UpdateDelegate(builder);
            var updatedUserGroup = builder.ToImmutable;

            await WriteToDatabaseFile(updateUserGroup_MessageType,
                                      updatedUserGroup.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _UserGroups.Remove(UserGroup.Id);
            updatedUserGroup.CopyAllLinkedDataFrom(UserGroup);
            _UserGroups.Add(updatedUserGroup.Id, updatedUserGroup);

            OnUpdated?.Invoke(updatedUserGroup,
                              eventTrackingId);

            var OnUserGroupUpdatedLocal = OnUserGroupUpdated;
            if (OnUserGroupUpdatedLocal != null)
                await OnUserGroupUpdatedLocal?.Invoke(Timestamp.Now,
                                                 updatedUserGroup,
                                                 UserGroup,
                                                 eventTrackingId,
                                                 CurrentUserId);

            await SendNotifications(updatedUserGroup,
                                    updateUserGroup_MessageType,
                                    UserGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateUserGroupResult.Success(UserGroup,
                                            eventTrackingId);

        }

        #endregion

        #region UpdateUserGroup                      (UserGroup, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given user group.
        /// </summary>
        /// <param name="UserGroup">An user group.</param>
        /// <param name="UpdateDelegate">A delegate to update the given user group.</param>
        /// <param name="OnUpdated">A delegate run whenever the user group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        public async Task<UpdateUserGroupResult> UpdateUserGroup(UserGroup                            UserGroup,
                                                                 Action<UserGroup.Builder>            UpdateDelegate,
                                                                 Action<UserGroup, EventTracking_Id>  OnUpdated         = null,
                                                                 EventTracking_Id                     EventTrackingId   = null,
                                                                 User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UpdateUserGroup(UserGroup,
                                                  UpdateDelegate,
                                                  OnUpdated,
                                                  eventTrackingId,
                                                  CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UpdateUserGroupResult.Failed(UserGroup,
                                                        eventTrackingId,
                                                        e);

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateUserGroupResult.Failed(UserGroup,
                                                eventTrackingId,
                                                "Internal locking failed!");

        }

        #endregion

        #endregion


        #region UserGroupExists(UserGroupId)

        /// <summary>
        /// Determines whether the given user group identification exists within this API.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        protected internal Boolean _UserGroupExists(UserGroup_Id UserGroupId)

            => UserGroupId.IsNotNullOrEmpty && _UserGroups.ContainsKey(UserGroupId);

        /// <summary>
        /// Determines whether the given user group identification exists within this API.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        protected internal Boolean _UserGroupExists(UserGroup_Id? UserGroupId)

            => UserGroupId.IsNotNullOrEmpty() && _UserGroups.ContainsKey(UserGroupId.Value);


        /// <summary>
        /// Determines whether the given user group identification exists within this API.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        public Boolean UserGroupExists(UserGroup_Id UserGroupId)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserGroupExists(UserGroupId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given user group identification exists within this API.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        public Boolean UserGroupExists(UserGroup_Id? UserGroupId)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _UserGroupExists(UserGroupId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region GetUserGroup   (UserGroupId)

        /// <summary>
        /// Get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        protected internal UserGroup _GetUserGroup(UserGroup_Id UserGroupId)
        {

            if (!UserGroupId.IsNullOrEmpty && _UserGroups.TryGetValue(UserGroupId, out UserGroup userGroup))
                return userGroup;

            return null;

        }

        /// <summary>
        /// Get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        protected internal UserGroup _GetUserGroup(UserGroup_Id? UserGroupId)
        {

            if (UserGroupId.IsNotNullOrEmpty() && _UserGroups.TryGetValue(UserGroupId.Value, out UserGroup userGroup))
                return userGroup;

            return null;

        }


        /// <summary>
        /// Get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        public UserGroup GetUserGroup(UserGroup_Id  UserGroupId)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetUserGroup(UserGroupId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        /// <summary>
        /// Get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        public UserGroup GetUserGroup(UserGroup_Id? UserGroupId)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetUserGroup(UserGroupId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        #endregion

        #region TryGetUserGroup(UserGroupId, out UserGroup)

        /// <summary>
        /// Try to get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        /// <param name="UserGroup">The user group.</param>
        protected internal Boolean _TryGetUserGroup(UserGroup_Id   UserGroupId,
                                                    out UserGroup  UserGroup)
        {

            if (!UserGroupId.IsNullOrEmpty &&
                _UserGroups.TryGetValue(UserGroupId, out UserGroup userGroup))
            {
                UserGroup = userGroup;
                return true;
            }

            UserGroup = null;
            return false;

        }

        /// <summary>
        /// Try to get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        /// <param name="UserGroup">The user group.</param>
        protected internal Boolean _TryGetUserGroup(UserGroup_Id?  UserGroupId,
                                                    out UserGroup  UserGroup)
        {

            if (UserGroupId.IsNotNullOrEmpty() &&
               _UserGroups.TryGetValue(UserGroupId.Value, out UserGroup userGroup))
            {
                UserGroup = userGroup;
                return true;
            }

            UserGroup = null;
            return false;

        }


        /// <summary>
        /// Try to get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        /// <param name="UserGroup">The user group.</param>
        public Boolean TryGetUserGroup(UserGroup_Id   UserGroupId,
                                       out UserGroup  UserGroup)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetUserGroup(UserGroupId, out UserGroup);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            UserGroup = null;
            return false;

        }

        /// <summary>
        /// Try to get the user group having the given unique identification.
        /// </summary>
        /// <param name="UserGroupId">The unique identification of an user group.</param>
        /// <param name="UserGroup">The user group.</param>
        public Boolean TryGetUserGroup(UserGroup_Id?  UserGroupId,
                                       out UserGroup  UserGroup)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetUserGroup(UserGroupId, out UserGroup);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            UserGroup = null;
            return false;

        }

        #endregion


        #region SearchUserGroupsByName   (UserGroupName)

        /// <summary>
        /// Find all user groups having the given user group name.
        /// </summary>
        /// <param name="UserGroupName">The name of a user group (might not be unique).</param>
        protected internal IEnumerable<UserGroup> _SearchUserGroupsByName(String UserGroupName)

            => _UserGroups.Values.
                           Where(userGroup => userGroup.Name.Equals(UserGroupName)).
                           ToArray();


        /// <summary>
        /// Find all user groups having the given user group name.
        /// </summary>
        /// <param name="UserGroupName">The name of a user group (might not be unique).</param>
        public IEnumerable<UserGroup> SearchUserGroupsByName(String UserGroupName)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _SearchUserGroupsByName(UserGroupName);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new UserGroup[0];

        }

        #endregion

        #region TrySearchUserGroupsByName(UserGroupName, out UserGroups)

        /// <summary>
        /// Find all user groups having the given user group name.
        /// </summary>
        /// <param name="UserGroupName">The name of a user group (might not be unique).</param>
        /// <param name="UserGroups">An enumeration of matching user groups.</param>
        protected internal Boolean _TrySearchUserGroupsByName(String UserGroupName, out IEnumerable<UserGroup> UserGroups)
        {

            var foundUserGroups = new List<UserGroup>();

            foreach (var userGroup in _UserGroups.Values)
                if (userGroup.Name.Equals(UserGroupName ?? ""))
                    foundUserGroups.Add(userGroup);

            UserGroups = foundUserGroups;

            return foundUserGroups.Any();

        }


        /// <summary>
        /// Find all user groups having the given user group name.
        /// </summary>
        /// <param name="UserGroupName">The name of a user group (might not be unique).</param>
        /// <param name="UserGroups">An enumeration of matching user groups.</param>
        public Boolean TrySearchUserGroupsByName(String UserGroupName, out IEnumerable<UserGroup> UserGroups)
        {

            if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TrySearchUserGroupsByName(UserGroupName, out UserGroups);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            UserGroups = null;
            return false;

        }

        #endregion


        #region DeleteUserGroup(UserGroup, OnDeleted = null, ...)

        /// <summary>
        /// A delegate called whenever a user group was deleted.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the user group was deleted.</param>
        /// <param name="UserGroup">The deleted user group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user group identification</param>
        public delegate Task OnUserGroupDeletedDelegate(DateTime          Timestamp,
                                                        UserGroup         UserGroup,
                                                        EventTracking_Id  EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a user group was deleted.
        /// </summary>
        public event OnUserGroupDeletedDelegate OnUserGroupDeleted;


        #region (protected internal virtual) _CanDeleteUserGroup(UserGroup)

        /// <summary>
        /// Determines whether the user group can safely be removed from the API.
        /// </summary>
        /// <param name="UserGroup">The user group to be deleted.</param>
        protected internal virtual I18NString _CanDeleteUserGroup(UserGroup UserGroup)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion

        #region (protected internal) _DeleteUserGroup(UserGroup, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given user group.
        /// </summary>
        /// <param name="UserGroup">The user group to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the user group has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        protected internal async Task<DeleteUserGroupResult> _DeleteUserGroup(UserGroup                            UserGroup,
                                                                              Action<UserGroup, EventTracking_Id>  OnDeleted         = null,
                                                                              EventTracking_Id                     EventTrackingId   = null,
                                                                              User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (UserGroup is null)
                return DeleteUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup),
                                                           "The given user group must not be null!");

            if (UserGroup.API != this)
                return DeleteUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup),
                                                           "The given user group is not attached to this API!");

            if (!_UserGroups.TryGetValue(UserGroup.Id, out UserGroup UserGroupToBeDeleted))
                return DeleteUserGroupResult.ArgumentError(UserGroup,
                                                           eventTrackingId,
                                                           nameof(UserGroup),
                                                           "The given user group does not exists in this API!");


            var result = _CanDeleteUserGroup(UserGroup);

            if (result != null)
                return DeleteUserGroupResult.Failed(UserGroup,
                                                    eventTrackingId,
                                                    result);


            // Get all parent user groups now, because later
            // the --isSubGroupOf--> edge will no longer be available!
            var parentUserGroups = UserGroup.GetAllParents().
                                             ToArray();

            //// Remove all: this --edge--> other user group
            //foreach (var edge in UserGroup.UserGroup2UserGroupOutEdges.ToArray())
            //    await _UnlinkUserGroups(edge.Source,
            //                            edge.EdgeLabel,
            //                            edge.Target,
            //                            EventTrackingId,
            //                            SuppressNotifications:  false,
            //                            CurrentUserId:          CurrentUserId);

            //// Remove all: this <--edge-- other user group
            //foreach (var edge in UserGroup.UserGroup2UserGroupInEdges.ToArray())
            //    await _UnlinkUserGroups(edge.Target,
            //                            edge.EdgeLabel,
            //                            edge.Source,
            //                            EventTrackingId,
            //                            SuppressNotifications:  false,
            //                            CurrentUserId:          CurrentUserId);


            await WriteToDatabaseFile(deleteUserGroup_MessageType,
                                      UserGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _UserGroups.Remove(UserGroup.Id);

            OnDeleted?.Invoke(UserGroup,
                              eventTrackingId);

            var OnUserGroupDeletedLocal = OnUserGroupDeleted;
            if (OnUserGroupDeletedLocal != null)
                await OnUserGroupDeletedLocal?.Invoke(Timestamp.Now,
                                                      UserGroup,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(UserGroup,
                                    parentUserGroups,
                                    deleteUserGroup_MessageType,
                                    eventTrackingId,
                                    CurrentUserId);


            return DeleteUserGroupResult.Success(UserGroup,
                                                 eventTrackingId);


        }

        #endregion

        #region DeleteUserGroup                      (UserGroup, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given user group.
        /// </summary>
        /// <param name="UserGroup">The user group to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the user group has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user group identification initiating this command/request.</param>
        public async Task<DeleteUserGroupResult> DeleteUserGroup(UserGroup                            UserGroup,
                                                                 Action<UserGroup, EventTracking_Id>  OnDeleted         = null,
                                                                 EventTracking_Id                     EventTrackingId   = null,
                                                                 User_Id?                             CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _DeleteUserGroup(UserGroup,
                                                  OnDeleted,
                                                  eventTrackingId,
                                                  CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return DeleteUserGroupResult.Failed(UserGroup,
                                                        eventTrackingId,
                                                        e);

                }
                finally
                {
                    try
                    {
                        UserGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return DeleteUserGroupResult.Failed(UserGroup,
                                                eventTrackingId,
                                                "Internal locking failed!");

        }

        #endregion

        #endregion

        #endregion

        #region Messages

        // ToDo: Create Mailinglists

        #region Data

        /// <summary>
        /// An enumeration of all messages.
        /// </summary>
        protected internal readonly Dictionary<Message_Id, Message> _Messages;

        /// <summary>
        /// An enumeration of all messages.
        /// </summary>
        public IEnumerable<Message> Messages
        {
            get
            {
                try
                {
                    return MessagesSemaphore.Wait(SemaphoreSlimTimeout)
                               ? _Messages.Values.ToArray()
                               : new Message[0];
                }
                finally
                {
                    try
                    {
                        MessagesSemaphore.Release();
                    }
                    catch
                    { }
                }
            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(Message, MessageType,  OldMessage = null, ...)

        /// <summary>
        /// Write the given message to the database and send out notifications.
        /// </summary>
        /// <param name="Message">The message.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldMessage">The old/updated message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(Message              Message,
                                                          NotificationMessageType  MessageType,
                                                          Message              OldMessage    = null,
                                                          EventTracking_Id         EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message),  "The given message must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      Message.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(Message,
                                    MessageType,
                                    OldMessage,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (Message, MessageTypes, OldMessage = null, ...)

        /// <summary>
        /// Send message notifications.
        /// </summary>
        /// <param name="Message">The message.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldMessage">The old/updated message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(Message              Message,
                                               NotificationMessageType  MessageType,
                                               Message              OldMessage    = null,
                                               EventTracking_Id         EventTrackingId   = null,
                                               User_Id?                 CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message),  "The given message must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(Message,
                                    new NotificationMessageType[] { MessageType },
                                    OldMessage,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send message notifications.
        /// </summary>
        /// <param name="Message">The message.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldMessage">The old/updated message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(Message                           Message,
                                               IEnumerable<NotificationMessageType>  MessageTypes,
                                               Message                           OldMessage    = null,
                                               EventTracking_Id                      EventTrackingId   = null,
                                               User_Id?                              CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message),   "The given message must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldMessage == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected internal) GetMessageSerializator(Request, User)

        //protected internal MessageToJSONDelegate GetMessageSerializator(HTTPRequest  Request,
        //                                                               User         User)
        //{

        //    switch (User?.Id.ToString())
        //    {

        //        default:
        //            return (message,
        //                    embedded,
        //                    ExpandTags,
        //                    ExpandAuthorId,
        //                    includeCryptoHash)

        //                    => message.ToJSON(embedded,
        //                                          ExpandTags,
        //                                          ExpandAuthorId,
        //                                          includeCryptoHash);

        //    }

        //}

        #endregion


        #region AddMessage           (Message, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a message was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the message was added.</param>
        /// <param name="Message">The added message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnMessageAddedDelegate(DateTime          Timestamp,
                                                        Message       Message,
                                                        EventTracking_Id  EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a message was added.
        /// </summary>
        public event OnMessageAddedDelegate OnMessageAdded;


        #region (protected internal) _AddMessage(Message,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given message to the API.
        /// </summary>
        /// <param name="Message">A new message to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the message has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<Message> _AddMessage(Message                            Message,
                                                          Action<Message, EventTracking_Id>  OnAdded           = null,
                                                          EventTracking_Id                       EventTrackingId   = null,
                                                          User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message),
                                                "The given message must not be null!");

            if (Message.API != null && Message.API != this)
                throw new ArgumentException    ("The given message is already attached to another API!",
                                                nameof(Message));

            if (_Messages.ContainsKey(Message.Id))
                throw new ArgumentException    ("User group identification '" + Message.Id + "' already exists!",
                                                nameof(Message));

            if (Message.Id.Length < MinMessageIdLength)
                throw new ArgumentException    ("User group identification '" + Message.Id + "' is too short!",
                                                nameof(Message));

            Message.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addMessage_MessageType,
                                      Message.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _Messages.Add(Message.Id, Message);


            var OnMessageAddedLocal = OnMessageAdded;
            if (OnMessageAddedLocal != null)
                await OnMessageAddedLocal?.Invoke(Timestamp.Now,
                                                      Message,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(Message,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(Message,
                            eventTrackingId);

            return Message;

        }

        #endregion

        #region AddMessage             (Message,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given message.
        /// </summary>
        /// <param name="Message">A new message.</param>
        /// <param name="OnAdded">A delegate run whenever the message has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<Message> AddMessage(Message                            Message,
                                                      Action<Message, EventTracking_Id>  OnAdded           = null,
                                                      EventTracking_Id                       EventTrackingId   = null,
                                                      User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message), "The given message must not be null!");

            try
            {

                return (await MessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddMessage(Message,
                                                    OnAdded,
                                                    EventTrackingId,
                                                    CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddMessageIfNotExists(Message, OnAdded = null,                   CurrentUserId = null)

        #region (protected internal) _AddMessageIfNotExists(Message,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given message to the API.
        /// </summary>
        /// <param name="Message">A new message to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the message has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<Message> _AddMessageIfNotExists(Message                            Message,
                                                                     Action<Message, EventTracking_Id>  OnAdded           = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message),
                                                "The given message must not be null!");

            if (Message.API != null && Message.API != this)
                throw new ArgumentException    ("The given message is already attached to another API!",
                                                nameof(Message));

            if (_Messages.ContainsKey(Message.Id))
                return _Messages[Message.Id];

            if (Message.Id.Length < MinMessageIdLength)
                throw new ArgumentException    ("User group identification '" + Message.Id + "' is too short!",
                                                nameof(Message));

            Message.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addMessageIfNotExists_MessageType,
                                      Message.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _Messages.Add(Message.Id, Message);

            var OnMessageAddedLocal = OnMessageAdded;
            if (OnMessageAddedLocal != null)
                await OnMessageAddedLocal?.Invoke(Timestamp.Now,
                                                      Message,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(Message,
                                    addMessageIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(Message,
                            eventTrackingId);

            return Message;

        }

        #endregion

        #region AddMessageIfNotExists             (Message,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given message.
        /// </summary>
        /// <param name="Message">A new message.</param>
        /// <param name="OnAdded">A delegate run whenever the message has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<Message> AddMessageIfNotExists(Message                            Message,
                                                                 Action<Message, EventTracking_Id>  OnAdded           = null,
                                                                 EventTracking_Id                       EventTrackingId   = null,
                                                                 User_Id?                               CurrentUserId     = null)
        {

            try
            {

                return (await MessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddMessageIfNotExists(Message,
                                                             OnAdded,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrUpdateMessage   (Message, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateMessage   (Message,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given message to/within the API.
        /// </summary>
        /// <param name="Message">A message.</param>
        /// <param name="OnAdded">A delegate run whenever the message has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the message has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional message identification initiating this command/request.</param>
        protected internal async Task<Message> _AddOrUpdateMessage(Message                            Message,
                                                                  Action<Message, EventTracking_Id>  OnAdded           = null,
                                                                  Action<Message, EventTracking_Id>  OnUpdated         = null,
                                                                  EventTracking_Id                       EventTrackingId   = null,
                                                                  User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message),
                                                "The given message must not be null!");

            if (Message.API != null && Message.API != this)
                throw new ArgumentException    ("The given message is already attached to another API!",
                                                nameof(Message));

            if (_Messages.ContainsKey(Message.Id))
                return _Messages[Message.Id];

            if (Message.Id.Length < MinMessageIdLength)
                throw new ArgumentException    ("Message identification '" + Message.Id + "' is too short!",
                                                nameof(Message));

            Message.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrUpdateMessage_MessageType,
                                      Message.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_Messages.TryGetValue(Message.Id, out Message OldMessage))
            {
                _Messages.Remove(OldMessage.Id);
                Message.CopyAllLinkedDataFrom(OldMessage);
            }

            _Messages.Add(Message.Id, Message);

            if (OldMessage != null)
            {

                var OnMessageUpdatedLocal = OnMessageUpdated;
                if (OnMessageUpdatedLocal != null)
                    await OnMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                            Message,
                                                            OldMessage,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(Message,
                                        updateMessage_MessageType,
                                        OldMessage,
                                        eventTrackingId,
                                        CurrentUserId);

                OnUpdated?.Invoke(Message,
                                  eventTrackingId);

            }
            else
            {

                var OnMessageAddedLocal = OnMessageAdded;
                if (OnMessageAddedLocal != null)
                    await OnMessageAddedLocal?.Invoke(Timestamp.Now,
                                                          Message,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(Message,
                                        addMessage_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnAdded?.Invoke(Message,
                                eventTrackingId);

            }

            return Message;

        }

        #endregion

        #region AddOrUpdateMessage   (Message,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given message to/within the API.
        /// </summary>
        /// <param name="Message">A message.</param>
        /// <param name="OnAdded">A delegate run whenever the message has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the message has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional message identification initiating this command/request.</param>
        public async Task<Message> AddOrUpdateMessage(Message                            Message,
                                                              Action<Message, EventTracking_Id>  OnAdded           = null,
                                                              Action<Message, EventTracking_Id>  OnUpdated         = null,
                                                              EventTracking_Id                       EventTrackingId   = null,
                                                              User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message), "The given message must not be null!");

            try
            {

                return (await MessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddOrUpdateMessage(Message,
                                                            OnAdded,
                                                            OnUpdated,
                                                            EventTrackingId,
                                                            CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region UpdateMessage        (Message,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a message was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the message was updated.</param>
        /// <param name="Message">The updated message.</param>
        /// <param name="OldMessage">The old message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking message identification</param>
        public delegate Task OnMessageUpdatedDelegate(DateTime          Timestamp,
                                                          Message       Message,
                                                          Message       OldMessage,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a message was updated.
        /// </summary>
        public event OnMessageUpdatedDelegate OnMessageUpdated;


        #region (protected internal) _UpdateMessage(Message, OnUpdated = null, ...)

        /// <summary>
        /// Update the given message to/within the API.
        /// </summary>
        /// <param name="Message">A message.</param>
        /// <param name="OnUpdated">A delegate run whenever the message has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional message identification initiating this command/request.</param>
        protected internal async Task<Message> _UpdateMessage(Message                            Message,
                                                             Action<Message, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message),
                                                "The given message must not be null!");

            if (Message.API != null && Message.API != this)
                throw new ArgumentException    ("The given message is already attached to another API!",
                                                nameof(Message));

            if (!_Messages.TryGetValue(Message.Id, out Message OldMessage))
                throw new ArgumentException    ("The given message '" + Message.Id + "' does not exists in this API!",
                                                nameof(Message));

            Message.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateMessage_MessageType,
                                      Message.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _Messages.Remove(OldMessage.Id);
            Message.CopyAllLinkedDataFrom(OldMessage);


            var OnMessageUpdatedLocal = OnMessageUpdated;
            if (OnMessageUpdatedLocal != null)
                await OnMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                        Message,
                                                        OldMessage,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(Message,
                                    updateMessage_MessageType,
                                    OldMessage,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(Message,
                              eventTrackingId);

            return Message;

        }

        #endregion

        #region UpdateMessage             (Message, OnUpdated = null, ...)

        /// <summary>
        /// Update the given message to/within the API.
        /// </summary>
        /// <param name="Message">A message.</param>
        /// <param name="OnUpdated">A delegate run whenever the message has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional message identification initiating this command/request.</param>
        public async Task<Message> UpdateMessage(Message                            Message,
                                                         Action<Message, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message), "The given message must not be null!");

            try
            {

                return (await MessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateMessage(Message,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion


        #region (protected internal) _UpdateMessage(MessageId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given message.
        /// </summary>
        /// <param name="MessageId">An message identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given message.</param>
        /// <param name="OnUpdated">A delegate run whenever the message has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional message identification initiating this command/request.</param>
        protected internal async Task<Message> _UpdateMessage(Message_Id                         MessageId,
                                                             Action<Message.Builder>            UpdateDelegate,
                                                             Action<Message, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (MessageId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageId),
                                                "The given message identification must not be null or empty!");

            if (UpdateDelegate == null)
                throw new ArgumentNullException(nameof(UpdateDelegate),
                                                "The given update delegate must not be null!");

            if (!_Messages.TryGetValue(MessageId, out Message OldMessage))
                throw new ArgumentException    ("The given message '" + MessageId + "' does not exists in this API!",
                                                nameof(MessageId));

            var Builder = OldMessage.ToBuilder();
            UpdateDelegate(Builder);
            var NewMessage = Builder.ToImmutable;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateMessage_MessageType,
                                      NewMessage.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _Messages.Remove(OldMessage.Id);
            NewMessage.CopyAllLinkedDataFrom(OldMessage);


            var OnMessageUpdatedLocal = OnMessageUpdated;
            if (OnMessageUpdatedLocal != null)
                await OnMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NewMessage,
                                                        OldMessage,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NewMessage,
                                    updateMessage_MessageType,
                                    OldMessage,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewMessage,
                              eventTrackingId);

            return NewMessage;

        }

        #endregion

        #region UpdateMessage             (MessageId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given message.
        /// </summary>
        /// <param name="MessageId">An message identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given message.</param>
        /// <param name="OnUpdated">A delegate run whenever the message has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional message identification initiating this command/request.</param>
        public async Task<Message> UpdateMessage(Message_Id                         MessageId,
                                                         Action<Message.Builder>            UpdateDelegate,
                                                         Action<Message, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (MessageId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageId), "The given message identification must not be null or empty!");

            try
            {

                return (await MessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateMessage(MessageId,
                                                       UpdateDelegate,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion


        #region MessageExists(MessageId)

        /// <summary>
        /// Determines whether the given message identification exists within this API.
        /// </summary>
        /// <param name="MessageId">The unique identification of an message.</param>
        protected internal Boolean _MessageExists(Message_Id MessageId)

            => !MessageId.IsNullOrEmpty && _Messages.ContainsKey(MessageId);


        /// <summary>
        /// Determines whether the given message identification exists within this API.
        /// </summary>
        /// <param name="MessageId">The unique identification of an message.</param>
        public Boolean MessageExists(Message_Id MessageId)
        {

            try
            {

                if (MessagesSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _MessageExists(MessageId))
                {
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

            return false;

        }

        #endregion

        #region GetMessage   (MessageId)

        /// <summary>
        /// Get the message having the given unique identification.
        /// </summary>
        /// <param name="MessageId">The unique identification of an message.</param>
        protected internal Message _GetMessage(Message_Id MessageId)
        {

            if (!MessageId.IsNullOrEmpty && _Messages.TryGetValue(MessageId, out Message message))
                return message;

            return null;

        }


        /// <summary>
        /// Get the message having the given unique identification.
        /// </summary>
        /// <param name="MessageId">The unique identification of the message.</param>
        public Message GetMessage(Message_Id MessageId)
        {

            try
            {

                if (MessagesSemaphore.Wait(SemaphoreSlimTimeout))
                    return _GetMessage(MessageId);

            }
            catch
            { }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

            return null;

        }

        #endregion

        #region TryGetMessage(MessageId, out Message)

        /// <summary>
        /// Try to get the message having the given unique identification.
        /// </summary>
        /// <param name="MessageId">The unique identification of an message.</param>
        /// <param name="Message">The message.</param>
        protected internal Boolean _TryGetMessage(Message_Id MessageId, out Message Message)
        {

            if (!MessageId.IsNullOrEmpty && _Messages.TryGetValue(MessageId, out Message message))
            {
                Message = message;
                return true;
            }

            Message = null;
            return false;

        }


        /// <summary>
        /// Try to get the message having the given unique identification.
        /// </summary>
        /// <param name="MessageId">The unique identification of an message.</param>
        /// <param name="Message">The message.</param>
        public Boolean TryGetMessage(Message_Id   MessageId,
                                         out Message  Message)
        {

            try
            {

                if (MessagesSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _TryGetMessage(MessageId, out Message message))
                {
                    Message = message;
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

            Message = null;
            return false;

        }

        #endregion


        #region RemoveMessage(Message, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a message was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the message was removed.</param>
        /// <param name="Message">The removed message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking message identification</param>
        public delegate Task OnMessageRemovedDelegate(DateTime          Timestamp,
                                                          Message       Message,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a message was removed.
        /// </summary>
        public event OnMessageRemovedDelegate OnMessageRemoved;


        #region (class) DeleteMessageResult

        public class DeleteMessageResult
        {

            public Boolean     IsSuccess           { get; }

            public I18NString  ErrorDescription    { get; }


            private DeleteMessageResult(Boolean     IsSuccess,
                                          I18NString  ErrorDescription  = null)
            {
                this.IsSuccess         = IsSuccess;
                this.ErrorDescription  = ErrorDescription;
            }


            public static DeleteMessageResult Success

                => new DeleteMessageResult(true);

            public static DeleteMessageResult Failed(I18NString Reason)

                => new DeleteMessageResult(false,
                                             Reason);

            public static DeleteMessageResult Failed(Exception Exception)

                => new DeleteMessageResult(false,
                                             I18NString.Create(Languages.en,
                                                               Exception.Message));

            public override String ToString()

                => IsSuccess
                       ? "Success"
                       : "Failed" + (ErrorDescription.IsNullOrEmpty()
                                         ? ": " + ErrorDescription.FirstText()
                                         : "!");

        }

        #endregion

        #region (protected internal virtual) CanDeleteMessage(Message)

        /// <summary>
        /// Determines whether the message can safely be removed from the API.
        /// </summary>
        /// <param name="Message">The message to be removed.</param>
        protected internal virtual I18NString CanDeleteMessage(Message Message)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion


        #region (protected internal) _RemoveMessage(Message, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given message from the API.
        /// </summary>
        /// <param name="Message">The message to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the message has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional message identification initiating this command/request.</param>
        protected internal async Task<DeleteMessageResult> _RemoveMessage(Message                            Message,
                                                                         Action<Message, EventTracking_Id>  OnRemoved         = null,
                                                                         EventTracking_Id                       EventTrackingId   = null,
                                                                         User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message),
                                                "The given message must not be null!");

            if (Message.API != this || !_Messages.TryGetValue(Message.Id, out Message MessageToBeRemoved))
                throw new ArgumentException    ("The given message '" + Message.Id + "' does not exists in this API!",
                                                nameof(Message));


            var result = CanDeleteMessage(Message);

            if (result == null)
            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                await WriteToDatabaseFile(removeMessage_MessageType,
                                          Message.ToJSON(false, true),
                                          eventTrackingId,
                                          CurrentUserId);

                _Messages.Remove(Message.Id);


                var OnMessageRemovedLocal = OnMessageRemoved;
                if (OnMessageRemovedLocal != null)
                    await OnMessageRemovedLocal?.Invoke(Timestamp.Now,
                                                            Message,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(Message,
                                        removeMessage_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnRemoved?.Invoke(Message,
                                  eventTrackingId);

                return DeleteMessageResult.Success;

            }
            else
                return DeleteMessageResult.Failed(result);

        }

        #endregion

        #region RemoveMessage             (Message, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given message from the API.
        /// </summary>
        /// <param name="Message">The message to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the message has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional message identification initiating this command/request.</param>
        public async Task<DeleteMessageResult> RemoveMessage(Message                            Message,
                                                                     Action<Message, EventTracking_Id>  OnRemoved         = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (Message is null)
                throw new ArgumentNullException(nameof(Message), "The given message must not be null!");

            try
            {

                return (await MessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _RemoveMessage(Message,
                                                       OnRemoved,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            catch (Exception e)
            {
                return DeleteMessageResult.Failed(e);
            }
            finally
            {
                try
                {
                    MessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #endregion

        #region Notifications

        private JObject GetNotifications(User User)
        {

            if (User == null)
                throw new ArgumentNullException(nameof(User), "The given user must not be null!");

            var notificationsJSON = User.GetNotificationInfos();

            notificationsJSON.AddFirst(new JProperty("notificationGroups", new JArray(
                                           _NotificationGroups.Values.Select(notificationGroup => notificationGroup.ToJSON())
                                      )));

            return notificationsJSON;

        }

        private JObject GetNotification(User User, UInt32 NotificationId)
        {

            if (User == null)
                throw new ArgumentNullException(nameof(User), "The given user must not be null!");

            var notificationJSON = User.GetNotificationInfo(NotificationId);

            notificationJSON.AddFirst(new JProperty("notificationGroups", new JArray(
                                          _NotificationGroups.Values.Select(notificationGroup => notificationGroup.ToJSON())
                                     )));

            return notificationJSON;

        }

        private JObject GetNotifications(Organization Organization)
        {

            if (Organization == null)
                throw new ArgumentNullException(nameof(Organization), "The given organization must not be null!");

            var notificationsJSON = Organization.GetNotificationInfos();

            notificationsJSON.AddFirst(new JProperty("notificationGroups", new JArray(
                                           _NotificationGroups.Values.Select(notificationGroup => notificationGroup.ToJSON())
                                      )));

            return notificationsJSON;

        }




        // ToDo: Add locks
        // ToDo: Add logging!

        #region AddNotification(User,           NotificationType,                           CurrentUserId = null)

        protected async Task _AddNotification<T>(User              User,
                                                 T                 NotificationType,
                                                 EventTracking_Id  EventTrackingId   = null,
                                                 User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            User.AddNotification(NotificationType,
                                 async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                           update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                           EventTrackingId,
                                                                           CurrentUserId));

        }


        public async Task AddNotification<T>(User              User,
                                             T                 NotificationType,
                                             EventTracking_Id  EventTrackingId   = null,
                                             User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                await _AddNotification(User,
                                       NotificationType,
                                       EventTrackingId,
                                       CurrentUserId);

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(UserId,         NotificationType,                           CurrentUserId = null)

        public async Task AddNotification<T>(User_Id           UserId,
                                             T                 NotificationType,
                                             EventTracking_Id  EventTrackingId   = null,
                                             User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (_Users.TryGetValue(UserId, out User User))
                {

                    User.AddNotification(NotificationType,
                                         async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                   update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                   EventTrackingId,
                                                                                   CurrentUserId));

                }

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(User,           NotificationType, NotificationMessageType,  CurrentUserId = null)

        public async Task AddNotification<T>(User                     User,
                                             T                        NotificationType,
                                             NotificationMessageType  NotificationMessageType,
                                             EventTracking_Id         EventTrackingId   = null,
                                             User_Id?                 CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                User.AddNotification(NotificationType,
                                     NotificationMessageType,
                                     async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                               update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                               EventTrackingId,
                                                                               CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(UserId,         NotificationType, NotificationMessageType,  CurrentUserId = null)

        public async Task AddNotification<T>(User_Id                  UserId,
                                             T                        NotificationType,
                                             NotificationMessageType  NotificationMessageType,
                                             EventTracking_Id         EventTrackingId   = null,
                                             User_Id?                 CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (_Users.TryGetValue(UserId, out User User))
                {

                    User.AddNotification(NotificationType,
                                         NotificationMessageType,
                                         async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                   update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                   EventTrackingId,
                                                                                   CurrentUserId));

                }

                else
                    throw new ArgumentException("The given user '" + UserId + "' is unknown!");

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(User,           NotificationType, NotificationMessageTypes, ...)

        public async Task AddNotification<T>(User                                  User,
                                             T                                     NotificationType,
                                             IEnumerable<NotificationMessageType>  NotificationMessageTypes,
                                             EventTracking_Id                      EventTrackingId   = null,
                                             User_Id?                              CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                User.AddNotification(NotificationType,
                                     NotificationMessageTypes,
                                     async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                               update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                               EventTrackingId,
                                                                               CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(UserId,         NotificationType, NotificationMessageTypes, ...)

        public async Task AddNotification<T>(User_Id                               UserId,
                                             T                                     NotificationType,
                                             IEnumerable<NotificationMessageType>  NotificationMessageTypes,
                                             EventTracking_Id                      EventTrackingId   = null,
                                             User_Id?                              CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (_Users.TryGetValue(UserId, out User User))
                {

                    User.AddNotification(NotificationType,
                                         NotificationMessageTypes,
                                         async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                   update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                   EventTrackingId,
                                                                                   CurrentUserId));

                }

                else
                    throw new ArgumentException("The given user '" + UserId + "' is unknown!");

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion


        #region AddNotification(Organization,   NotificationType,                           CurrentUserId = null)

        public async Task AddNotification<T>(Organization      Organization,
                                             T                 NotificationType,
                                             EventTracking_Id  EventTrackingId   = null,
                                             User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                Organization.AddNotification(NotificationType,
                                             async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                       update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                       EventTrackingId,
                                                                                       CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(OrganizationId, NotificationType,                           CurrentUserId = null)

        public async Task AddNotification<T>(Organization_Id   OrganizationId,
                                             T                 NotificationType,
                                             EventTracking_Id  EventTrackingId   = null,
                                             User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (_Organizations.TryGetValue(OrganizationId, out Organization Organization))
                {

                    Organization.AddNotification(NotificationType,
                                                 async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                           update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                           EventTrackingId,
                                                                                           CurrentUserId));

                }

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(Organization,   NotificationType, NotificationMessageType,  CurrentUserId = null)

        public async Task AddNotification<T>(Organization             Organization,
                                             T                        NotificationType,
                                             NotificationMessageType  NotificationMessageType,
                                             EventTracking_Id         EventTrackingId   = null,
                                             User_Id?                 CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                Organization.AddNotification(NotificationType,
                                             NotificationMessageType,
                                             async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                       update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                       EventTrackingId,
                                                                                       CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(OrganizationId, NotificationType, NotificationMessageType,  CurrentUserId = null)

        public async Task AddNotification<T>(Organization_Id          OrganizationId,
                                             T                        NotificationType,
                                             NotificationMessageType  NotificationMessageType,
                                             EventTracking_Id         EventTrackingId   = null,
                                             User_Id?                 CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (_Organizations.TryGetValue(OrganizationId, out Organization Organization))
                {

                    Organization.AddNotification(NotificationType,
                                                 NotificationMessageType,
                                                 async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                           update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                           EventTrackingId,
                                                                                           CurrentUserId));

                }

                else
                    throw new ArgumentException("The given organization '" + OrganizationId + "' is unknown!");

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(Organization,   NotificationType, NotificationMessageTypes, ...)

        public async Task AddNotification<T>(Organization                          Organization,
                                             T                                     NotificationType,
                                             IEnumerable<NotificationMessageType>  NotificationMessageTypes,
                                             EventTracking_Id                      EventTrackingId   = null,
                                             User_Id?                              CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                Organization.AddNotification(NotificationType,
                                             NotificationMessageTypes,
                                             async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                       update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                       EventTrackingId,
                                                                                       CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region AddNotification(OrganizationId, NotificationType, NotificationMessageTypes, ...)

        public async Task AddNotification<T>(Organization_Id                       OrganizationId,
                                             T                                     NotificationType,
                                             IEnumerable<NotificationMessageType>  NotificationMessageTypes,
                                             EventTracking_Id                      EventTrackingId   = null,
                                             User_Id?                              CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (_Organizations.TryGetValue(OrganizationId, out Organization Organization))
                {

                    Organization.AddNotification(NotificationType,
                                                 NotificationMessageTypes,
                                                 async update => await WriteToDatabaseFile(addNotification_MessageType,
                                                                                           update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                           EventTrackingId,
                                                                                           CurrentUserId));

                }

                else
                    throw new ArgumentException("The given organization '" + OrganizationId + "' is unknown!");

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion



        #region GetNotifications  (User,           NotificationMessageType = null)

        public IEnumerable<ANotification> GetNotifications(User                      User,
                                                           NotificationMessageType?  NotificationMessageType = null)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return User.GetNotifications(NotificationMessageType);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new ANotification[0];

        }

        #endregion

        #region GetNotifications  (UserId,         NotificationMessageType = null)

        public IEnumerable<ANotification> GetNotifications(User_Id                   UserId,
                                                           NotificationMessageType?  NotificationMessageType = null)
        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    if (_Users.TryGetValue(UserId, out User user))
                        return user.GetNotifications(NotificationMessageType);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new ANotification[0];

        }

        #endregion


        #region GetNotificationsOf(User,           params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(User                              User,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return User.GetNotificationsOf<T>(NotificationMessageTypes);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new T[0];

        }

        #endregion

        #region GetNotificationsOf(UserId,         params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(User_Id                           UserId,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    if (_Users.TryGetValue(UserId, out User user))
                        return user.GetNotificationsOf<T>(NotificationMessageTypes);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        UsersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new T[0];

        }

        #endregion

        #region GetNotificationsOf(Organization,   params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(Organization                      Organization,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return Organization.
                                   GetMeAndAllMyParents(parent => parent != NoOwner).
                                   SelectMany          (parent => parent.User2OrganizationEdges).
                                   SelectMany          (edge   => edge.Source.GetNotificationsOf<T>(NotificationMessageTypes));

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return new T[0];

        }

        #endregion

        #region GetNotificationsOf(OrganizationId, params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(Organization_Id                   OrganizationId,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        if (_Organizations.TryGetValue(OrganizationId, out Organization organization))
                            return organization.
                                       GetMeAndAllMyParents(parent => parent != NoOwner).
                                       SelectMany          (parent => parent.User2OrganizationEdges).
                                       SelectMany          (edge   => edge.Source.GetNotificationsOf<T>(NotificationMessageTypes));

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return new T[0];

        }

        #endregion

        #region GetNotificationsOf(UserGroup,      params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(UserGroup                         UserGroup,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return UserGroup.
                                   GetMeAndAllMyParents().
                                   SelectMany(parent => parent.User2UserGroupEdges).
                                   SelectMany(edge   => edge.Source.GetNotificationsOf<T>(NotificationMessageTypes));

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return new T[0];

        }

        #endregion

        #region GetNotificationsOf(UserGroupId,    params NotificationMessageTypes)

        public IEnumerable<T> GetNotificationsOf<T>(UserGroup_Id                      UserGroupId,
                                                    params NotificationMessageType[]  NotificationMessageTypes)

            where T : ANotification

        {

            if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
            {
                if (UserGroupsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        if (_UserGroups.TryGetValue(UserGroupId, out UserGroup userGroup))
                            return userGroup.
                                       GetMeAndAllMyParents().
                                       SelectMany(parent => parent.User2UserGroupEdges).
                                       SelectMany(edge   => edge.Source.GetNotificationsOf<T>(NotificationMessageTypes));

                    }
                    catch
                    { }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return new T[0];

        }

        #endregion



        #region GetNotifications  (User,   NotificationMessageTypeFilter)

        public IEnumerable<ANotification> GetNotifications(User                                    User,
                                                           Func<NotificationMessageType, Boolean>  NotificationMessageTypeFilter)

            => User.GetNotifications(NotificationMessageTypeFilter);

        #endregion

        #region GetNotifications  (UserId, NotificationMessageTypeFilter)

        public IEnumerable<ANotification> GetNotifications(User_Id                                 UserId,
                                                           Func<NotificationMessageType, Boolean>  NotificationMessageTypeFilter)

            => TryGetUser(UserId, out User User)
                   ? User.GetNotifications(NotificationMessageTypeFilter)
                   : new ANotification[0];

        #endregion

        #region GetNotificationsOf(User,   NotificationMessageTypeFilter)

        public IEnumerable<T> GetNotificationsOf<T>(User                                    User,
                                                    Func<NotificationMessageType, Boolean>  NotificationMessageTypeFilter)

            where T : ANotification

            => User.GetNotificationsOf<T>(NotificationMessageTypeFilter);

        #endregion

        #region GetNotificationsOf(UserId, NotificationMessageTypeFilter)

        public IEnumerable<T> GetNotificationsOf<T>(User_Id                                 UserId,
                                                    Func<NotificationMessageType, Boolean>  NotificationMessageTypeFilter)

            where T : ANotification

            => TryGetUser(UserId, out User User)
                   ? User.GetNotificationsOf<T>(NotificationMessageTypeFilter)
                   : new T[0];

        #endregion



        #region RemoveNotification(User,           NotificationType, ...)

        public async Task RemoveNotification<T>(User              User,
                                                T                 NotificationType,
                                                EventTracking_Id  EventTrackingId   = null,
                                                User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                User.RemoveNotification(NotificationType,
                                        async update => await WriteToDatabaseFile(removeNotification_MessageType,
                                                                                  update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                  EventTrackingId,
                                                                                  CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region RemoveNotification(UserId,         NotificationType, ...)

        public async Task RemoveNotification<T>(User_Id           UserId,
                                                T                 NotificationType,
                                                EventTracking_Id  EventTrackingId   = null,
                                                User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (_Users.TryGetValue(UserId, out User User))
                {

                    User.RemoveNotification(NotificationType,
                                            async update => await WriteToDatabaseFile(removeNotification_MessageType,
                                                                                      update.ToJSON(false).AddFirstAndReturn(new JProperty("userId", User.Id.ToString())),
                                                                                      EventTrackingId,
                                                                                      CurrentUserId));

                }

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion


        #region RemoveNotification(Organization,   NotificationType, ...)

        public async Task RemoveNotification<T>(Organization      Organization,
                                                T                 NotificationType,
                                                EventTracking_Id  EventTrackingId   = null,
                                                User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                Organization.RemoveNotification(NotificationType,
                                                async update => await WriteToDatabaseFile(removeNotification_MessageType,
                                                                                          update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                          EventTrackingId,
                                                                                          CurrentUserId));

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region RemoveNotification(OrganizationId, NotificationType, ...)

        public async Task RemoveNotification<T>(Organization_Id   UserId,
                                                T                 NotificationType,
                                                EventTracking_Id  EventTrackingId   = null,
                                                User_Id?          CurrentUserId     = null)

            where T : ANotification

        {

            try
            {

                await UsersSemaphore.WaitAsync();

                if (_Organizations.TryGetValue(UserId, out Organization Organization))
                {

                    Organization.RemoveNotification(NotificationType,
                                                    async update => await WriteToDatabaseFile(removeNotification_MessageType,
                                                                                              update.ToJSON(false).AddFirstAndReturn(new JProperty("organizationId", Organization.Id.ToString())),
                                                                                              EventTrackingId,
                                                                                              CurrentUserId));

                }

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #endregion

        #region Notification Groups

        #region Data

        /// <summary>
        /// An enumeration of all notification groups.
        /// </summary>
        protected readonly Dictionary<NotificationGroup_Id, NotificationGroup> _NotificationGroups = new Dictionary<NotificationGroup_Id, NotificationGroup>();

        /// <summary>
        /// An enumeration of all notification groups.
        /// </summary>
        public IEnumerable<NotificationGroup> NotificationGroups
        {
            get
            {

                if (UsersSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _NotificationGroups.Values.ToArray();

                    }
                    finally
                    {
                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return new NotificationGroup[0];

            }
        }

        #endregion


        protected Boolean _AddNotificationGroup(NotificationGroup NotificationGroup)
        {
            _NotificationGroups.Add(NotificationGroup.Id, NotificationGroup);
            return true;
        }

        public async Task<Boolean> AddNotificationGroup(NotificationGroup NotificationGroup)
        {

            try
            {

                await UsersSemaphore.WaitAsync();

                return _AddNotificationGroup(NotificationGroup);

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion

        #region Notification Messages

        #region Data

        /// <summary>
        /// An enumeration of all notification messages.
        /// </summary>
        protected readonly Dictionary<NotificationMessage_Id, NotificationMessage> _NotificationMessages;

        /// <summary>
        /// An enumeration of all notification messages.
        /// </summary>
        public IEnumerable<NotificationMessage> NotificationMessages
        {
            get
            {
                try
                {
                    return NotificationMessagesSemaphore.Wait(SemaphoreSlimTimeout)
                               ? _NotificationMessages.Values.ToArray()
                               : new NotificationMessage[0];
                }
                finally
                {
                    try
                    {
                        NotificationMessagesSemaphore.Release();
                    }
                    catch
                    { }
                }
            }
        }

        #endregion


        #region (protected) WriteToDatabaseFileAndNotify(NotificationMessage, MessageType,  OldNotificationMessage = null, ...)

        /// <summary>
        /// Write the given notification message to the database and send out notifications.
        /// </summary>
        /// <param name="NotificationMessage">The notification message.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldNotificationMessage">The old/updated notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task WriteToDatabaseFileAndNotify(NotificationMessage              NotificationMessage,
                                                          NotificationMessageType  MessageType,
                                                          NotificationMessage              OldNotificationMessage    = null,
                                                          EventTracking_Id         EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),  "The given notification message must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      NotificationMessage.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(NotificationMessage,
                                    MessageType,
                                    OldNotificationMessage,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected) SendNotifications           (NotificationMessage, MessageTypes, OldNotificationMessage = null, ...)

        /// <summary>
        /// Send notification message notifications.
        /// </summary>
        /// <param name="NotificationMessage">The notification message.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldNotificationMessage">The old/updated notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task SendNotifications(NotificationMessage              NotificationMessage,
                                               NotificationMessageType  MessageType,
                                               NotificationMessage              OldNotificationMessage    = null,
                                               EventTracking_Id         EventTrackingId   = null,
                                               User_Id?                 CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),  "The given notification message must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(NotificationMessage,
                                    new NotificationMessageType[] { MessageType },
                                    OldNotificationMessage,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send notification message notifications.
        /// </summary>
        /// <param name="NotificationMessage">The notification message.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldNotificationMessage">The old/updated notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task SendNotifications(NotificationMessage                           NotificationMessage,
                                               IEnumerable<NotificationMessageType>  MessageTypes,
                                               NotificationMessage                           OldNotificationMessage    = null,
                                               EventTracking_Id                      EventTrackingId   = null,
                                               User_Id?                              CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),   "The given notification message must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldNotificationMessage == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected) GetNotificationMessageSerializator(Request, User)

        //protected NotificationMessageToJSONDelegate GetNotificationMessageSerializator(HTTPRequest  Request,
        //                                                               User         User)
        //{

        //    switch (User?.Id.ToString())
        //    {

        //        default:
        //            return (notificationMessage,
        //                    embedded,
        //                    ExpandTags,
        //                    ExpandAuthorId,
        //                    includeCryptoHash)

        //                    => notificationMessage.ToJSON(embedded,
        //                                          ExpandTags,
        //                                          ExpandAuthorId,
        //                                          includeCryptoHash);

        //    }

        //}

        #endregion


        #region AddNotificationMessage           (NotificationMessage, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a notification message was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the notification message was added.</param>
        /// <param name="NotificationMessage">The added notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnNotificationMessageAddedDelegate(DateTime          Timestamp,
                                                        NotificationMessage       NotificationMessage,
                                                        EventTracking_Id  EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a notification message was added.
        /// </summary>
        public event OnNotificationMessageAddedDelegate OnNotificationMessageAdded;


        #region (protected) _AddNotificationMessage(NotificationMessage,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given notification message to the API.
        /// </summary>
        /// <param name="NotificationMessage">A new notification message to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task<NotificationMessage> _AddNotificationMessage(NotificationMessage                            NotificationMessage,
                                                          Action<NotificationMessage, EventTracking_Id>  OnAdded           = null,
                                                          EventTracking_Id                       EventTrackingId   = null,
                                                          User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != null && NotificationMessage.API != this)
                throw new ArgumentException    ("The given notification message is already attached to another API!",
                                                nameof(NotificationMessage));

            if (_NotificationMessages.ContainsKey(NotificationMessage.Id))
                throw new ArgumentException    ("User group identification '" + NotificationMessage.Id + "' already exists!",
                                                nameof(NotificationMessage));

            if (NotificationMessage.Id.Length < MinNotificationMessageIdLength)
                throw new ArgumentException    ("User group identification '" + NotificationMessage.Id + "' is too short!",
                                                nameof(NotificationMessage));

            NotificationMessage.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addNotificationMessage_MessageType,
                                      NotificationMessage.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _NotificationMessages.Add(NotificationMessage.Id, NotificationMessage);


            var OnNotificationMessageAddedLocal = OnNotificationMessageAdded;
            if (OnNotificationMessageAddedLocal != null)
                await OnNotificationMessageAddedLocal?.Invoke(Timestamp.Now,
                                                      NotificationMessage,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(NotificationMessage,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(NotificationMessage,
                            eventTrackingId);

            return NotificationMessage;

        }

        #endregion

        #region AddNotificationMessage             (NotificationMessage,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given notification message.
        /// </summary>
        /// <param name="NotificationMessage">A new notification message.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<NotificationMessage> AddNotificationMessage(NotificationMessage                            NotificationMessage,
                                                      Action<NotificationMessage, EventTracking_Id>  OnAdded           = null,
                                                      EventTracking_Id                       EventTrackingId   = null,
                                                      User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage), "The given notification message must not be null!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddNotificationMessage(NotificationMessage,
                                                    OnAdded,
                                                    EventTrackingId,
                                                    CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddNotificationMessageIfNotExists(NotificationMessage, OnAdded = null,                   CurrentUserId = null)

        #region (protected) _AddNotificationMessageIfNotExists(NotificationMessage,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given notification message to the API.
        /// </summary>
        /// <param name="NotificationMessage">A new notification message to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected async Task<NotificationMessage> _AddNotificationMessageIfNotExists(NotificationMessage                            NotificationMessage,
                                                                     Action<NotificationMessage, EventTracking_Id>  OnAdded           = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != null && NotificationMessage.API != this)
                throw new ArgumentException    ("The given notification message is already attached to another API!",
                                                nameof(NotificationMessage));

            if (_NotificationMessages.ContainsKey(NotificationMessage.Id))
                return _NotificationMessages[NotificationMessage.Id];

            if (NotificationMessage.Id.Length < MinNotificationMessageIdLength)
                throw new ArgumentException    ("User group identification '" + NotificationMessage.Id + "' is too short!",
                                                nameof(NotificationMessage));

            NotificationMessage.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addNotificationMessageIfNotExists_MessageType,
                                      NotificationMessage.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _NotificationMessages.Add(NotificationMessage.Id, NotificationMessage);

            var OnNotificationMessageAddedLocal = OnNotificationMessageAdded;
            if (OnNotificationMessageAddedLocal != null)
                await OnNotificationMessageAddedLocal?.Invoke(Timestamp.Now,
                                                      NotificationMessage,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(NotificationMessage,
                                    addNotificationMessageIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(NotificationMessage,
                            eventTrackingId);

            return NotificationMessage;

        }

        #endregion

        #region AddNotificationMessageIfNotExists             (NotificationMessage,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given notification message.
        /// </summary>
        /// <param name="NotificationMessage">A new notification message.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<NotificationMessage> AddNotificationMessageIfNotExists(NotificationMessage                            NotificationMessage,
                                                                 Action<NotificationMessage, EventTracking_Id>  OnAdded           = null,
                                                                 EventTracking_Id                       EventTrackingId   = null,
                                                                 User_Id?                               CurrentUserId     = null)
        {

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddNotificationMessageIfNotExists(NotificationMessage,
                                                             OnAdded,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrUpdateNotificationMessage   (NotificationMessage, OnAdded = null, OnUpdated = null, ...)

        #region (protected) _AddOrUpdateNotificationMessage   (NotificationMessage,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given notification message to/within the API.
        /// </summary>
        /// <param name="NotificationMessage">A notification message.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        protected async Task<NotificationMessage> _AddOrUpdateNotificationMessage(NotificationMessage                            NotificationMessage,
                                                                  Action<NotificationMessage, EventTracking_Id>  OnAdded           = null,
                                                                  Action<NotificationMessage, EventTracking_Id>  OnUpdated         = null,
                                                                  EventTracking_Id                       EventTrackingId   = null,
                                                                  User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != null && NotificationMessage.API != this)
                throw new ArgumentException    ("The given notification message is already attached to another API!",
                                                nameof(NotificationMessage));

            if (_NotificationMessages.ContainsKey(NotificationMessage.Id))
                return _NotificationMessages[NotificationMessage.Id];

            if (NotificationMessage.Id.Length < MinNotificationMessageIdLength)
                throw new ArgumentException    ("NotificationMessage identification '" + NotificationMessage.Id + "' is too short!",
                                                nameof(NotificationMessage));

            NotificationMessage.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrUpdateNotificationMessage_MessageType,
                                      NotificationMessage.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_NotificationMessages.TryGetValue(NotificationMessage.Id, out NotificationMessage OldNotificationMessage))
            {
                _NotificationMessages.Remove(OldNotificationMessage.Id);
                NotificationMessage.CopyAllLinkedDataFrom(OldNotificationMessage);
            }

            _NotificationMessages.Add(NotificationMessage.Id, NotificationMessage);

            if (OldNotificationMessage != null)
            {

                var OnNotificationMessageUpdatedLocal = OnNotificationMessageUpdated;
                if (OnNotificationMessageUpdatedLocal != null)
                    await OnNotificationMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                            NotificationMessage,
                                                            OldNotificationMessage,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(NotificationMessage,
                                        updateNotificationMessage_MessageType,
                                        OldNotificationMessage,
                                        eventTrackingId,
                                        CurrentUserId);

                OnUpdated?.Invoke(NotificationMessage,
                                  eventTrackingId);

            }
            else
            {

                var OnNotificationMessageAddedLocal = OnNotificationMessageAdded;
                if (OnNotificationMessageAddedLocal != null)
                    await OnNotificationMessageAddedLocal?.Invoke(Timestamp.Now,
                                                          NotificationMessage,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(NotificationMessage,
                                        addNotificationMessage_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnAdded?.Invoke(NotificationMessage,
                                eventTrackingId);

            }

            return NotificationMessage;

        }

        #endregion

        #region AddOrUpdateNotificationMessage   (NotificationMessage,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given notification message to/within the API.
        /// </summary>
        /// <param name="NotificationMessage">A notification message.</param>
        /// <param name="OnAdded">A delegate run whenever the notification message had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        public async Task<NotificationMessage> AddOrUpdateNotificationMessage(NotificationMessage                            NotificationMessage,
                                                              Action<NotificationMessage, EventTracking_Id>  OnAdded           = null,
                                                              Action<NotificationMessage, EventTracking_Id>  OnUpdated         = null,
                                                              EventTracking_Id                       EventTrackingId   = null,
                                                              User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage), "The given notification message must not be null!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddOrUpdateNotificationMessage(NotificationMessage,
                                                            OnAdded,
                                                            OnUpdated,
                                                            EventTrackingId,
                                                            CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region UpdateNotificationMessage        (NotificationMessage,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a notification message was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the notification message was updated.</param>
        /// <param name="NotificationMessage">The updated notification message.</param>
        /// <param name="OldNotificationMessage">The old notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking notification message identification</param>
        public delegate Task OnNotificationMessageUpdatedDelegate(DateTime          Timestamp,
                                                          NotificationMessage       NotificationMessage,
                                                          NotificationMessage       OldNotificationMessage,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a notification message was updated.
        /// </summary>
        public event OnNotificationMessageUpdatedDelegate OnNotificationMessageUpdated;


        #region (protected) _UpdateNotificationMessage(NotificationMessage, OnUpdated = null, ...)

        /// <summary>
        /// Update the given notification message to/within the API.
        /// </summary>
        /// <param name="NotificationMessage">A notification message.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        protected async Task<NotificationMessage> _UpdateNotificationMessage(NotificationMessage                            NotificationMessage,
                                                             Action<NotificationMessage, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != null && NotificationMessage.API != this)
                throw new ArgumentException    ("The given notification message is already attached to another API!",
                                                nameof(NotificationMessage));

            if (!_NotificationMessages.TryGetValue(NotificationMessage.Id, out NotificationMessage OldNotificationMessage))
                throw new ArgumentException    ("The given notification message '" + NotificationMessage.Id + "' does not exists in this API!",
                                                nameof(NotificationMessage));

            NotificationMessage.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateNotificationMessage_MessageType,
                                      NotificationMessage.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _NotificationMessages.Remove(OldNotificationMessage.Id);
            NotificationMessage.CopyAllLinkedDataFrom(OldNotificationMessage);


            var OnNotificationMessageUpdatedLocal = OnNotificationMessageUpdated;
            if (OnNotificationMessageUpdatedLocal != null)
                await OnNotificationMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NotificationMessage,
                                                        OldNotificationMessage,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NotificationMessage,
                                    updateNotificationMessage_MessageType,
                                    OldNotificationMessage,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NotificationMessage,
                              eventTrackingId);

            return NotificationMessage;

        }

        #endregion

        #region UpdateNotificationMessage             (NotificationMessage, OnUpdated = null, ...)

        /// <summary>
        /// Update the given notification message to/within the API.
        /// </summary>
        /// <param name="NotificationMessage">A notification message.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        public async Task<NotificationMessage> UpdateNotificationMessage(NotificationMessage                            NotificationMessage,
                                                         Action<NotificationMessage, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage), "The given notification message must not be null!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateNotificationMessage(NotificationMessage,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion


        #region (protected) _UpdateNotificationMessage(NotificationMessageId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given notification message.
        /// </summary>
        /// <param name="NotificationMessageId">An notification message identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given notification message.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        protected async Task<NotificationMessage> _UpdateNotificationMessage(NotificationMessage_Id                         NotificationMessageId,
                                                             Action<NotificationMessage.Builder>            UpdateDelegate,
                                                             Action<NotificationMessage, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessageId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(NotificationMessageId),
                                                "The given notification message identification must not be null or empty!");

            if (UpdateDelegate == null)
                throw new ArgumentNullException(nameof(UpdateDelegate),
                                                "The given update delegate must not be null!");

            if (!_NotificationMessages.TryGetValue(NotificationMessageId, out NotificationMessage OldNotificationMessage))
                throw new ArgumentException    ("The given notification message '" + NotificationMessageId + "' does not exists in this API!",
                                                nameof(NotificationMessageId));

            var Builder = OldNotificationMessage.ToBuilder();
            UpdateDelegate(Builder);
            var NewNotificationMessage = Builder.ToImmutable;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateNotificationMessage_MessageType,
                                      NewNotificationMessage.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _NotificationMessages.Remove(OldNotificationMessage.Id);
            NewNotificationMessage.CopyAllLinkedDataFrom(OldNotificationMessage);


            var OnNotificationMessageUpdatedLocal = OnNotificationMessageUpdated;
            if (OnNotificationMessageUpdatedLocal != null)
                await OnNotificationMessageUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NewNotificationMessage,
                                                        OldNotificationMessage,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NewNotificationMessage,
                                    updateNotificationMessage_MessageType,
                                    OldNotificationMessage,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewNotificationMessage,
                              eventTrackingId);

            return NewNotificationMessage;

        }

        #endregion

        #region UpdateNotificationMessage             (NotificationMessageId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given notification message.
        /// </summary>
        /// <param name="NotificationMessageId">An notification message identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given notification message.</param>
        /// <param name="OnUpdated">A delegate run whenever the notification message had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        public async Task<NotificationMessage> UpdateNotificationMessage(NotificationMessage_Id                         NotificationMessageId,
                                                         Action<NotificationMessage.Builder>            UpdateDelegate,
                                                         Action<NotificationMessage, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessageId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(NotificationMessageId), "The given notification message identification must not be null or empty!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateNotificationMessage(NotificationMessageId,
                                                       UpdateDelegate,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion


        #region NotificationMessageExists(NotificationMessageId)

        /// <summary>
        /// Determines whether the given notification message identification exists within this API.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        protected Boolean _NotificationMessageExists(NotificationMessage_Id NotificationMessageId)

            => !NotificationMessageId.IsNullOrEmpty && _NotificationMessages.ContainsKey(NotificationMessageId);


        /// <summary>
        /// Determines whether the given notification message identification exists within this API.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        public Boolean NotificationMessageExists(NotificationMessage_Id NotificationMessageId)
        {

            try
            {

                if (NotificationMessagesSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _NotificationMessageExists(NotificationMessageId))
                {
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

            return false;

        }

        #endregion

        #region GetNotificationMessage   (NotificationMessageId)

        /// <summary>
        /// Get the notification message having the given unique identification.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        protected NotificationMessage _GetNotificationMessage(NotificationMessage_Id NotificationMessageId)
        {

            if (!NotificationMessageId.IsNullOrEmpty && _NotificationMessages.TryGetValue(NotificationMessageId, out NotificationMessage notificationMessage))
                return notificationMessage;

            return null;

        }


        /// <summary>
        /// Get the notification message having the given unique identification.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of the notification message.</param>
        public NotificationMessage GetNotificationMessage(NotificationMessage_Id NotificationMessageId)
        {

            try
            {

                if (NotificationMessagesSemaphore.Wait(SemaphoreSlimTimeout))
                    return _GetNotificationMessage(NotificationMessageId);

            }
            catch
            { }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

            return null;

        }

        #endregion

        #region TryGetNotificationMessage(NotificationMessageId, out NotificationMessage)

        /// <summary>
        /// Try to get the notification message having the given unique identification.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        /// <param name="NotificationMessage">The notification message.</param>
        protected Boolean _TryGetNotificationMessage(NotificationMessage_Id NotificationMessageId, out NotificationMessage NotificationMessage)
        {

            if (!NotificationMessageId.IsNullOrEmpty && _NotificationMessages.TryGetValue(NotificationMessageId, out NotificationMessage notificationMessage))
            {
                NotificationMessage = notificationMessage;
                return true;
            }

            NotificationMessage = null;
            return false;

        }


        /// <summary>
        /// Try to get the notification message having the given unique identification.
        /// </summary>
        /// <param name="NotificationMessageId">The unique identification of an notification message.</param>
        /// <param name="NotificationMessage">The notification message.</param>
        public Boolean TryGetNotificationMessage(NotificationMessage_Id   NotificationMessageId,
                                         out NotificationMessage  NotificationMessage)
        {

            try
            {

                if (NotificationMessagesSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _TryGetNotificationMessage(NotificationMessageId, out NotificationMessage notificationMessage))
                {
                    NotificationMessage = notificationMessage;
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

            NotificationMessage = null;
            return false;

        }

        #endregion


        #region GetNotificationMessages(User)

        public IEnumerable<NotificationMessage> GetNotificationMessages(User User)
        {

            try
            {

                UsersSemaphore.Wait();

                var UserOrganizations = User.Organizations(Access_Levels.ReadOnly, Recursive: true).SafeSelect(org => org.Id).ToArray();

                return _NotificationMessages.Values.Where(message => message.Owners.Intersect(UserOrganizations).Any()).ToArray();

            }
            finally
            {
                UsersSemaphore.Release();
            }

        }

        #endregion


        #region RemoveNotificationMessage(NotificationMessage, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a notification message was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the notification message was removed.</param>
        /// <param name="NotificationMessage">The removed notification message.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking notification message identification</param>
        public delegate Task OnNotificationMessageRemovedDelegate(DateTime          Timestamp,
                                                          NotificationMessage       NotificationMessage,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a notification message was removed.
        /// </summary>
        public event OnNotificationMessageRemovedDelegate OnNotificationMessageRemoved;


        #region (class) DeleteNotificationMessageResult

        public class DeleteNotificationMessageResult
        {

            public Boolean     IsSuccess           { get; }

            public I18NString  ErrorDescription    { get; }


            private DeleteNotificationMessageResult(Boolean     IsSuccess,
                                          I18NString  ErrorDescription  = null)
            {
                this.IsSuccess         = IsSuccess;
                this.ErrorDescription  = ErrorDescription;
            }


            public static DeleteNotificationMessageResult Success

                => new DeleteNotificationMessageResult(true);

            public static DeleteNotificationMessageResult Failed(I18NString Reason)

                => new DeleteNotificationMessageResult(false,
                                             Reason);

            public static DeleteNotificationMessageResult Failed(Exception Exception)

                => new DeleteNotificationMessageResult(false,
                                             I18NString.Create(Languages.en,
                                                               Exception.Message));

            public override String ToString()

                => IsSuccess
                       ? "Success"
                       : "Failed" + (ErrorDescription.IsNullOrEmpty()
                                         ? ": " + ErrorDescription.FirstText()
                                         : "!");

        }

        #endregion

        #region (protected virtual) CanDeleteNotificationMessage(NotificationMessage)

        /// <summary>
        /// Determines whether the notification message can safely be removed from the API.
        /// </summary>
        /// <param name="NotificationMessage">The notification message to be removed.</param>
        protected virtual I18NString CanDeleteNotificationMessage(NotificationMessage NotificationMessage)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion


        #region (protected) _RemoveNotificationMessage(NotificationMessage, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given notification message from the API.
        /// </summary>
        /// <param name="NotificationMessage">The notification message to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the notification message had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        protected async Task<DeleteNotificationMessageResult> _RemoveNotificationMessage(NotificationMessage                            NotificationMessage,
                                                                         Action<NotificationMessage, EventTracking_Id>  OnRemoved         = null,
                                                                         EventTracking_Id                       EventTrackingId   = null,
                                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage),
                                                "The given notification message must not be null!");

            if (NotificationMessage.API != this || !_NotificationMessages.TryGetValue(NotificationMessage.Id, out NotificationMessage NotificationMessageToBeRemoved))
                throw new ArgumentException    ("The given notification message '" + NotificationMessage.Id + "' does not exists in this API!",
                                                nameof(NotificationMessage));


            var result = CanDeleteNotificationMessage(NotificationMessage);

            if (result == null)
            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                await WriteToDatabaseFile(removeNotificationMessage_MessageType,
                                          NotificationMessage.ToJSON(false, true),
                                          eventTrackingId,
                                          CurrentUserId);

                _NotificationMessages.Remove(NotificationMessage.Id);


                var OnNotificationMessageRemovedLocal = OnNotificationMessageRemoved;
                if (OnNotificationMessageRemovedLocal != null)
                    await OnNotificationMessageRemovedLocal?.Invoke(Timestamp.Now,
                                                            NotificationMessage,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(NotificationMessage,
                                        removeNotificationMessage_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnRemoved?.Invoke(NotificationMessage,
                                  eventTrackingId);

                return DeleteNotificationMessageResult.Success;

            }
            else
                return DeleteNotificationMessageResult.Failed(result);

        }

        #endregion

        #region RemoveNotificationMessage             (NotificationMessage, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given notification message from the API.
        /// </summary>
        /// <param name="NotificationMessage">The notification message to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the notification message had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional notification message identification initiating this command/request.</param>
        public async Task<DeleteNotificationMessageResult> RemoveNotificationMessage(NotificationMessage                            NotificationMessage,
                                                                     Action<NotificationMessage, EventTracking_Id>  OnRemoved         = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (NotificationMessage is null)
                throw new ArgumentNullException(nameof(NotificationMessage), "The given notification message must not be null!");

            try
            {

                return (await NotificationMessagesSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _RemoveNotificationMessage(NotificationMessage,
                                                       OnRemoved,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            catch (Exception e)
            {
                return DeleteNotificationMessageResult.Failed(e);
            }
            finally
            {
                try
                {
                    NotificationMessagesSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #endregion

        #region Dashboards

        #region Data

        /// <summary>
        /// An enumeration of all dashboards.
        /// </summary>
        protected readonly Dictionary<Dashboard_Id, Dashboard> _Dashboards;

        /// <summary>
        /// An enumeration of all dashboards.
        /// </summary>
        public IEnumerable<Dashboard> Dashboards
        {
            get
            {
                try
                {
                    return DashboardsSemaphore.Wait(SemaphoreSlimTimeout)
                               ? _Dashboards.Values.ToArray()
                               : new Dashboard[0];
                }
                finally
                {
                    try
                    {
                        DashboardsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }
        }

        #endregion


        #region AddDashboard           (Dashboard,                   CurrentUserId = null)

        /// <summary>
        /// Add the given dashboard to the API.
        /// </summary>
        /// <param name="Dashboard">A new dashboard to be added to this API.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<Dashboard> AddDashboard(Dashboard  Dashboard,
                                                  User_Id?   CurrentUserId  = null)
        {

            try
            {

                await DashboardsSemaphore.WaitAsync();

                if (Dashboard.API != null && Dashboard.API != this)
                    throw new ArgumentException(nameof(Dashboard), "The given dashboard is already attached to another API!");

                if (_Dashboards.ContainsKey(Dashboard.Id))
                    throw new Exception("Dashboard '" + Dashboard.Id + "' already exists in this API!");

                Dashboard.API = this;


                await WriteToDatabaseFile(addDashboard_MessageType,
                                          Dashboard.ToJSON(),
                                          EventTracking_Id.New,
                                          CurrentUserId);

                var newDashboard = _Dashboards.AddAndReturnValue(Dashboard.Id, Dashboard);

                return newDashboard;

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion

        #region AddDashboardIfNotExists(Dashboard,                   CurrentUserId = null)

        /// <summary>
        /// When it has not been created before, add the given dashboard to the API.
        /// </summary>
        /// <param name="Dashboard">A new dashboard to be added to this API.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<Dashboard> AddDashboardIfNotExists(Dashboard  Dashboard,
                                                             User_Id?   CurrentUserId  = null)
        {

            try
            {

                await DashboardsSemaphore.WaitAsync();

                if (Dashboard.API != null && Dashboard.API != this)
                    throw new ArgumentException(nameof(Dashboard), "The given dashboard is already attached to another API!");

                if (_Dashboards.ContainsKey(Dashboard.Id))
                    return _Dashboards[Dashboard.Id];

                Dashboard.API = this;

                await WriteToDatabaseFile(addDashboardIfNotExists_MessageType,
                                          Dashboard.ToJSON(),
                                          EventTracking_Id.New,
                                          CurrentUserId);

                var newDashboard = _Dashboards.AddAndReturnValue(Dashboard.Id, Dashboard);

                return newDashboard;

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion

        #region AddOrUpdateDashboard   (Dashboard,                   CurrentUserId = null)

        /// <summary>
        /// Add or update the given dashboard to/within the API.
        /// </summary>
        /// <param name="Dashboard">A dashboard.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<Dashboard> AddOrUpdateDashboard(Dashboard  Dashboard,
                                                          User_Id?   CurrentUserId  = null)
        {

            try
            {

                await DashboardsSemaphore.WaitAsync();

                if (Dashboard.API != null && Dashboard.API != this)
                    throw new ArgumentException(nameof(Dashboard), "The given dashboard is already attached to another API!");

                if (_Dashboards.TryGetValue(Dashboard.Id, out Dashboard OldDashboard))
                {
                    _Dashboards.Remove(OldDashboard.Id);
                }

                Dashboard.API = this;

                await WriteToDatabaseFile(addOrUpdateDashboard_MessageType,
                                          Dashboard.ToJSON(),
                                          EventTracking_Id.New,
                                          CurrentUserId);

                var newDashboard = _Dashboards.AddAndReturnValue(Dashboard.Id, Dashboard);

                // ToDo: Copy edges!

                return newDashboard;

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion

        #region UpdateDashboard        (Dashboard,                   CurrentUserId = null)

        /// <summary>
        /// Update the given dashboard within the API.
        /// </summary>
        /// <param name="Dashboard">A dashboard.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<Dashboard> UpdateDashboard(Dashboard  Dashboard,
                                                     User_Id?   CurrentUserId  = null)
        {

            try
            {

                await DashboardsSemaphore.WaitAsync();

                if (Dashboard.API != null && Dashboard.API != this)
                    throw new ArgumentException(nameof(Dashboard), "The given dashboard is already attached to another API!");

                if (!_Dashboards.TryGetValue(Dashboard.Id, out Dashboard OldDashboard))
                    throw new Exception("Dashboard '" + Dashboard.Id + "' does not exists in this API!");

                else
                {

                    _Dashboards.Remove(OldDashboard.Id);

                }

                Dashboard.API = this;

                await WriteToDatabaseFile(updateDashboard_MessageType,
                                          Dashboard.ToJSON(),
                                          EventTracking_Id.New,
                                          CurrentUserId);

                Dashboard.CopyAllLinkedDataFrom(OldDashboard);

                return _Dashboards.AddAndReturnValue(Dashboard.Id, Dashboard);

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion

        #region UpdateDashboard        (DashboardId, UpdateDelegate, ...)

        /// <summary>
        /// Update the given dashboard.
        /// </summary>
        /// <param name="DashboardId">An dashboard identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given dashboard.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<Dashboard> UpdateDashboard(Dashboard_Id               DashboardId,
                                                     Action<Dashboard.Builder>  UpdateDelegate,
                                                     User_Id?                   CurrentUserId  = null)
        {

            try
            {

                if (UpdateDelegate == null)
                    throw new Exception("The given update delegate must not be null!");

                await DashboardsSemaphore.WaitAsync();

                if (!_Dashboards.TryGetValue(DashboardId, out Dashboard OldDashboard))
                    throw new Exception("Dashboard '" + DashboardId + "' does not exists in this API!");

                var Builder = OldDashboard.ToBuilder();
                UpdateDelegate(Builder);
                var NewDashboard = Builder.ToImmutable;

                await WriteToDatabaseFile(updateDashboard_MessageType,
                                          NewDashboard.ToJSON(),
                                          EventTracking_Id.New,
                                          CurrentUserId);

                NewDashboard.API = this;

                _Dashboards.Remove(OldDashboard.Id);
                NewDashboard.CopyAllLinkedDataFrom(OldDashboard);

                return _Dashboards.AddAndReturnValue(NewDashboard.Id, NewDashboard);

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion


        #region (protected internal) SetDashboardRequest (Request)

        /// <summary>
        /// An event sent whenever set dashboard (data) request was received.
        /// </summary>
        public event RequestLogHandler OnSetDashboardRequest;

        protected internal HTTPRequest SetDashboardRequest(HTTPRequest Request)
        {

            OnSetDashboardRequest?.Invoke(Request.Timestamp,
                                          HTTPServer,
                                          Request);

            return Request;

        }

        #endregion

        #region (protected internal) SetDashboardResponse(Response)

        /// <summary>
        /// An event sent whenever a response on a set dashboard (data) request was sent.
        /// </summary>
        public event AccessLogHandler OnSetDashboardResponse;

        protected internal HTTPResponse SetDashboardResponse(HTTPResponse Response)
        {

            OnSetDashboardResponse?.Invoke(Response.Timestamp,
                                           HTTPServer,
                                           Response.HTTPRequest,
                                           Response);

            return Response;

        }

        #endregion


        #region DashboardExists        (DashboardId)

        /// <summary>
        /// Whether this API contains a dashboard having the given unique identification.
        /// </summary>
        /// <param name="DashboardId">The unique identification of the dashboard.</param>
        public Boolean DashboardExists(Dashboard_Id DashboardId)
        {

            try
            {

                DashboardsSemaphore.Wait();

                return _Dashboards.ContainsKey(DashboardId);

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion

        #region GetDashboard           (DashboardId)

        /// <summary>
        /// Get the dashboard having the given unique identification.
        /// </summary>
        /// <param name="DashboardId">The unique identification of the dashboard.</param>
        public async Task<Dashboard> GetDashboard(Dashboard_Id  DashboardId)
        {

            try
            {

                await DashboardsSemaphore.WaitAsync();

                if (_Dashboards.TryGetValue(DashboardId, out Dashboard Dashboard))
                    return Dashboard;

                return null;

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion

        #region TryGetDashboard        (DashboardId, out Dashboard)

        /// <summary>
        /// Try to get the dashboard having the given unique identification.
        /// </summary>
        /// <param name="DashboardId">The unique identification of the dashboard.</param>
        /// <param name="Dashboard">The dashboard.</param>
        public Boolean TryGetDashboard(Dashboard_Id   DashboardId,
                                       out Dashboard  Dashboard)
        {

            try
            {

                DashboardsSemaphore.Wait();

                return _Dashboards.TryGetValue(DashboardId, out Dashboard);

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion


        #region RemoveDashboard        (DashboardId,                 CurrentUserId = null)

        /// <summary>
        /// Remove the given dashboard from this API.
        /// </summary>
        /// <param name="DashboardId">The unique identification of the dashboard.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<Dashboard> RemoveDashboard(Dashboard_Id  DashboardId,
                                                     User_Id?      CurrentUserId  = null)
        {

            try
            {

                await DashboardsSemaphore.WaitAsync();

                if (_Dashboards.TryGetValue(DashboardId, out Dashboard Dashboard))
                {

                    await WriteToDatabaseFile(removeDashboard_MessageType,
                                              Dashboard.ToJSON(),
                                              EventTracking_Id.New,
                                              CurrentUserId);

                    _Dashboards.Remove(DashboardId);

                    //Dashboard.API = null;

                    return Dashboard;

                }

                return null;

            }
            finally
            {
                DashboardsSemaphore.Release();
            }

        }

        #endregion

        #endregion


        #region Organizations

        #region Data

        /// <summary>
        /// An enumeration of all organizations.
        /// </summary>
        protected internal readonly Dictionary<Organization_Id, Organization> _Organizations;

        /// <summary>
        /// An enumeration of all organizations.
        /// </summary>
        public IEnumerable<Organization> Organizations
        {
            get
            {

                if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return _Organizations.Values.ToArray();

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }

                return new Organization[0];

            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(Organization,                      MessageType,    OldOrganization = null, ...)

        /// <summary>
        /// Write the given organization to the database and send out notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageType">The organization notification.</param>
        /// <param name="OldOrganization">The old/updated organization.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(Organization             Organization,
                                                                   NotificationMessageType  MessageType,
                                                                   Organization             OldOrganization   = null,
                                                                   EventTracking_Id         EventTrackingId   = null,
                                                                   User_Id?                 CurrentUserId     = null)
        {

            if (Organization is null)
                throw new ArgumentNullException(nameof(Organization),  "The given organization must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),   "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      Organization.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(Organization,
                                    MessageType,
                                    OldOrganization,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (Organization,                      MessageType(s), OldOrganization = null, ...)

        protected virtual String OrganizationHTMLInfo(Organization Organization)

            => String.Concat(Organization.Name.IsNeitherNullNorEmpty()
                                 ? String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\">", Organization.Name.FirstText(), "</a> ",
                                                "(<a href=\"https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\">", Organization.Id, "</a>)")
                                 : String.Concat("<a href=\"https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\">", Organization.Id, "</a>"));

        protected virtual String OrganizationTextInfo(Organization Organization)

            => String.Concat(Organization.Name.IsNeitherNullNorEmpty()
                                 ? String.Concat("'", Organization.Name.FirstText(), "' (", Organization.Id, ")")
                                 : String.Concat("'", Organization.Id.ToString(), "'"));


        /// <summary>
        /// Send organization notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageType">The organization notification.</param>
        /// <param name="OldOrganization">The old/updated organization.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization identification</param>
        protected internal virtual Task SendNotifications(Organization             Organization,
                                                          NotificationMessageType  MessageType,
                                                          Organization             OldOrganization   = null,
                                                          EventTracking_Id         EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)

            => SendNotifications(Organization,
                                 new NotificationMessageType[] { MessageType },
                                 OldOrganization,
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send organization notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageTypes">The organization notifications.</param>
        /// <param name="OldOrganization">The old/updated organization.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization identification</param>
        protected internal async virtual Task SendNotifications(Organization                          Organization,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                Organization                          OldOrganization   = null,
                                                                EventTracking_Id                      EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (Organization is null)
                throw new ArgumentNullException(nameof(Organization),  "The given organization must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addOrganizationIfNotExists_MessageType))
                messageTypesHash.Add(addOrganization_MessageType);

            if (messageTypesHash.Contains(addOrUpdateOrganization_MessageType))
                messageTypesHash.Add(OldOrganization == null
                                       ? addOrganization_MessageType
                                       : updateOrganization_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            ComparizionResult? comparizionResult = null;

            if (messageTypes.Contains(updateOrganization_MessageType))
                comparizionResult = Organization.CompareWith(OldOrganization);


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        var AllTelegramNotifications  = Organization.GetNotificationsOf<TelegramNotification>(messageTypes).
                                                             ToSafeHashSet();

                        if (AllTelegramNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(addOrganization_MessageType))
                                await TelegramClient.SendTelegrams(OrganizationHTMLInfo(Organization) + " was successfully created.",
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                            if (messageTypes.Contains(updateOrganization_MessageType))
                                await TelegramClient.SendTelegrams(OrganizationHTMLInfo(Organization) + " information had been successfully updated.\n" + comparizionResult?.ToTelegram(),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    var AllSMSNotifications  = Organization.GetNotificationsOf<SMSNotification>(messageTypes).
                                                            ToSafeHashSet();

                    if (AllSMSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(addOrganization_MessageType))
                            SendSMS(String.Concat("Organization '", Organization.Name.FirstText(), "' was successfully created. ",
                                                  "https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);

                        if (messageTypes.Contains(updateOrganization_MessageType))
                            SendSMS(String.Concat("Organization '", Organization.Name.FirstText(), "' information had been successfully updated. ",
                                                  "https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id),
                                                  // + {Updated information}
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications  = Organization.GetNotificationsOf<HTTPSNotification>(messageTypes).
                                                              ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(addOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("organizationCreated",
                                                                 Organization.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                        if (messageTypes.Contains(updateOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("organizationUpdated",
                                                                 Organization.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications  = Organization.GetNotificationsOf<EMailNotification>(messageTypes).
                                                                  ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(addOrganization_MessageType))
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIPassphrase,
                                             Subject        = OrganizationTextInfo(Organization) + " was successfully created",

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            OrganizationHTMLInfo(Organization) + " was successfully created.",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            OrganizationTextInfo(Organization) + " was successfully created.\r\n",
                                                                            "https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });

                            if (messageTypes.Contains(updateOrganization_MessageType))
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIPassphrase,
                                             Subject        = OrganizationTextInfo(Organization) + " information had been successfully updated",

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            OrganizationHTMLInfo(Organization) + " information had been successfully updated.<br /><br />",
                                                                            comparizionResult?.ToHTML() ?? "",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            OrganizationTextInfo(Organization) + " information had been successfully updated.\r\r\r\r",
                                                                            comparizionResult?.ToText() ?? "",
                                                                            "\r\r\r\r",
                                                                            "https://", ExternalDNSName, BasePath, "/organizations/", Organization.Id, "\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) SendNotifications           (Organization, ParentOrganizations, MessageType(s), ...)

        /// <summary>
        /// Send organization notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="ParentOrganizations">The enumeration of parent organizations.</param>
        /// <param name="MessageType">The organization notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization identification</param>
        protected internal virtual Task SendNotifications(Organization               Organization,
                                                          IEnumerable<Organization>  ParentOrganizations,
                                                          NotificationMessageType    MessageType,
                                                          EventTracking_Id           EventTrackingId   = null,
                                                          User_Id?                   CurrentUserId     = null)

            => SendNotifications(Organization,
                                 ParentOrganizations,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send organization notifications.
        /// </summary>
        /// <param name="Organization">The organization.</param>
        /// <param name="ParentOrganizations">The enumeration of parent organizations.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async virtual Task SendNotifications(Organization                          Organization,
                                                                IEnumerable<Organization>             ParentOrganizations,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id                      EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (Organization is null)
                throw new ArgumentNullException(nameof(Organization),         "The given organization must not be null or empty!");

            if (ParentOrganizations is null)
                ParentOrganizations = new Organization[0];

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),         "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
            //    messageTypesHash.Add(addUser_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
            //    messageTypesHash.Add(OldOrganization == null
            //                           ? addUser_MessageType
            //                           : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        var AllTelegramNotifications  = ParentOrganizations.
                                                            SelectMany(parent => parent.User2OrganizationEdges).
                                                            SelectMany(edge   => edge.Source.GetNotificationsOf<TelegramNotification>(deleteOrganization_MessageType)).
                                                            ToSafeHashSet();

                        if (AllTelegramNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteOrganization_MessageType))
                                await TelegramClient.SendTelegrams(OrganizationHTMLInfo(Organization) + " has been deleted.",
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    var AllSMSNotifications = ParentOrganizations.
                                                  SelectMany(parent => parent.User2OrganizationEdges).
                                                  SelectMany(edge   => edge.Source.GetNotificationsOf<SMSNotification>(deleteOrganization_MessageType)).
                                                  ToSafeHashSet();

                    if (AllSMSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteOrganization_MessageType))
                            SendSMS(String.Concat("Organization '", Organization.Name.FirstText(), "' has been deleted."),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications = ParentOrganizations.
                                                    SelectMany(parent => parent.User2OrganizationEdges).
                                                    SelectMany(edge   => edge.Source.GetNotificationsOf<HTTPSNotification>(deleteOrganization_MessageType)).
                                                    ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(deleteOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("organizationDeleted",
                                                                 Organization.ToJSON()
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications = ParentOrganizations.
                                                        SelectMany(parent => parent.User2OrganizationEdges).
                                                        SelectMany(edge   => edge.Source.GetNotificationsOf<EMailNotification>(deleteOrganization_MessageType)).
                                                        ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(deleteOrganization_MessageType))
                                await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIPassphrase,
                                         Subject        = OrganizationTextInfo(Organization) + " has been deleted",

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        OrganizationHTMLInfo(Organization) + " has been deleted.<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        OrganizationTextInfo(Organization) + " has been deleted.\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion

        #region (protected internal) GetOrganizationSerializator (Request, Organization)

        protected internal OrganizationToJSONDelegate GetOrganizationSerializator(HTTPRequest  Request,
                                                                                  User         User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (organization,
                            embedded,
                            expandMembers,
                            expandParents,
                            expandSubOrganizations,
                            expandTags,
                            includeCryptoHash)

                            => organization.ToJSON(embedded,
                                                   expandMembers,
                                                   expandParents,
                                                   expandSubOrganizations,
                                                   expandTags,
                                                   includeCryptoHash);

            }

        }

        #endregion


        #region AddOrganization           (Organization, (ParentOrganization), OnAdded = null, ...)

        /// <summary>
        /// A delegate called whenever a organization was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization was added.</param>
        /// <param name="Organization">The added organization.</param>
        /// <param name="EventTrackingId">An unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public delegate Task OnOrganizationAddedDelegate(DateTime          Timestamp,
                                                         Organization      Organization,
                                                         EventTracking_Id  EventTrackingId   = null,
                                                         User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization was added.
        /// </summary>
        public event OnOrganizationAddedDelegate OnOrganizationAdded;


        #region (protected internal) _AddOrganization(Organization,                            OnAdded = null, ...)

        /// <summary>
        /// Add the given organization to the API.
        /// </summary>
        /// <param name="Organization">A new organization to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<AddOrganizationResult> _AddOrganization(Organization                            Organization,
                                                                              Action<Organization, EventTracking_Id>  OnAdded           = null,
                                                                              EventTracking_Id                        EventTrackingId   = null,
                                                                              User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization is null)
                return AddOrganizationResult.ArgumentError(Organization,
                                                           eventTrackingId,
                                                           nameof(Organization),
                                                           "The given organization must not be null!");

            if (Organization.API != null && Organization.API != this)
                return AddOrganizationResult.ArgumentError(Organization,
                                                           eventTrackingId,
                                                           nameof(Organization),
                                                           "The given organization is already attached to another API!");

            if (_Organizations.ContainsKey(Organization.Id))
                return AddOrganizationResult.ArgumentError(Organization,
                                                           eventTrackingId,
                                                           nameof(Organization),
                                                           "Organization identification '" + Organization.Id + "' already exists!");

            if (Organization.Id.Length < MinOrganizationIdLength)
                return AddOrganizationResult.ArgumentError(Organization,
                                                           eventTrackingId,
                                                           nameof(Organization),
                                                           "Organization identification '" + Organization.Id + "' is too short!");

            if (Organization.Name.IsNullOrEmpty() || Organization.Name.IsNullOrEmpty())
                return AddOrganizationResult.ArgumentError(Organization,
                                                           eventTrackingId,
                                                           nameof(Organization),
                                                           "The given organization name must not be null!");

            //if (Organization.Name.Length < MinOrganizationNameLength)
            //    return AddOrganizationResult.ArgumentError(Organization,
            //                                       nameof(Organization),
            //                                       "Organization name '" + Organization.Name + "' is too short!");

            Organization.API = this;


            await WriteToDatabaseFile(addOrganization_MessageType,
                                      Organization.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _Organizations.Add(Organization.Id, Organization);

            OnAdded?.Invoke(Organization,
                            eventTrackingId);

            var OnOrganizationAddedLocal = OnOrganizationAdded;
            if (OnOrganizationAddedLocal != null)
                await OnOrganizationAddedLocal?.Invoke(Timestamp.Now,
                                                       Organization,
                                                       eventTrackingId,
                                                       CurrentUserId);

            await SendNotifications(Organization,
                                    addOrganization_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddOrganizationResult.Success(Organization,
                                                 eventTrackingId);

        }

        #endregion

        #region AddOrganization                      (Organization, ParentOrganization = null, OnAdded = null, ...)

        /// <summary>
        /// Add the given organization and add him/her to the given organization.
        /// </summary>
        /// <param name="Organization">A new organization.</param>
        /// <param name="ParentOrganization">The parent organization of the new organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<AddOrganizationResult> AddOrganization(Organization                            Organization,
                                                                 Organization                            ParentOrganization   = null,
                                                                 Action<Organization, EventTracking_Id>  OnAdded              = null,
                                                                 EventTracking_Id                        EventTrackingId      = null,
                                                                 User_Id?                                CurrentUserId        = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    if (ParentOrganization is null)
                        ParentOrganization = NoOwner;

                    if (!_Organizations.ContainsKey(ParentOrganization.Id))
                        return AddOrganizationResult.ArgumentError(Organization,
                                                                   eventTrackingId,
                                                                   nameof(ParentOrganization),
                                                                   "Parent organization '" + ParentOrganization.Id + "' does not exists in this API!");


                    #region Check if the user is allowed to create and link the given organizations!

                    if (CurrentUserId.HasValue &&
                       !GetUser(CurrentUserId.Value).
                            Organizations(Access_Levels.ReadWrite, true).
                            Contains     (ParentOrganization))
                    {
                        return AddOrganizationResult.Failed(Organization,
                                                            eventTrackingId,
                                                            "Your are not allowed to create this sub organization!",
                                                            ParentOrganization);
                    }

                    #endregion


                    var result = await _AddOrganization(Organization,
                                                        async (_organization, _eventTrackingId) => {

                                                            await _LinkOrganizations(_organization,
                                                                                     Organization2OrganizationEdgeLabel.IsChildOf,
                                                                                     ParentOrganization,
                                                                                     _eventTrackingId,
                                                                                     SuppressNotifications:  true,
                                                                                     CurrentUserId:          CurrentUserId);

                                                            OnAdded?.Invoke(_organization,
                                                                            _eventTrackingId);

                                                        },
                                                        eventTrackingId,
                                                        CurrentUserId);

                    if (result?.IsSuccess == true)
                    {

                        result.ParentOrganization = ParentOrganization;

                        await SendNotifications(Organization,
                                                Organization2OrganizationEdgeLabel.IsChildOf,
                                                ParentOrganization,
                                                linkOrganizations_MessageType,
                                                eventTrackingId,
                                                CurrentUserId);

                    }

                    return result;

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddOrganizationResult.Failed(Organization,
                                                        eventTrackingId,
                                                        e,
                                                        ParentOrganization);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return AddOrganizationResult.Failed(Organization,
                                                eventTrackingId,
                                                "Internal locking failed!",
                                                ParentOrganization);

        }

        #endregion

        #endregion

        #region AddOrganizationIfNotExists(Organization, (ParentOrganization), OnAdded = null, ...)

        #region (protected internal) _AddOrganizationIfNotExists(Organization,                     OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given organization to the API.
        /// </summary>
        /// <param name="Organization">A new organization to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<AddOrganizationIfNotExistsResult> _AddOrganizationIfNotExists(Organization                            Organization,
                                                                                                    Action<Organization, EventTracking_Id>  OnAdded           = null,
                                                                                                    EventTracking_Id                        EventTrackingId   = null,
                                                                                                    User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization is null)
                return AddOrganizationIfNotExistsResult.ArgumentError(Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization must not be null!");

            if (Organization.API != null && Organization.API != this)
                return AddOrganizationIfNotExistsResult.ArgumentError(Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization is already attached to another API!");

            if (_Organizations.ContainsKey(Organization.Id))
                return AddOrganizationIfNotExistsResult.Success(_Organizations[Organization.Id],
                                                                AddedOrIgnored.Ignored,
                                                                eventTrackingId);

            if (Organization.Id.Length < MinOrganizationIdLength)
                return AddOrganizationIfNotExistsResult.ArgumentError(Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "Organization identification '" + Organization.Id + "' is too short!");

            if (Organization.Name.IsNullOrEmpty() || Organization.Name.IsNullOrEmpty())
                return AddOrganizationIfNotExistsResult.ArgumentError(Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization name must not be null!");

            //if (Organization.Name.Length < MinOrganizationNameLength)
            //    return AddOrganizationIfNotExistsResult.ArgumentError(Organization,
            //                                                  nameof(Organization),
            //                                                  "Organization name '" + Organization.Name + "' is too short!");

            Organization.API = this;


            await WriteToDatabaseFile(addOrganizationIfNotExists_MessageType,
                                      Organization.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _Organizations.Add(Organization.Id, Organization);

            OnAdded?.Invoke(Organization,
                            eventTrackingId);

            var OnOrganizationAddedLocal = OnOrganizationAdded;
            if (OnOrganizationAddedLocal != null)
                await OnOrganizationAddedLocal?.Invoke(Timestamp.Now,
                                               Organization,
                                               eventTrackingId,
                                               CurrentUserId);

            await SendNotifications(Organization,
                                    addOrganizationIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            return AddOrganizationIfNotExistsResult.Success(Organization,
                                                            AddedOrIgnored.Added,
                                                            eventTrackingId);

        }

        #endregion

        #region AddOrganizationIfNotExists                      (Organization, ParentOrganization, OnAdded = null, ...)

        /// <summary>
        /// Add the given organization and add him/her to the given organization.
        /// </summary>
        /// <param name="Organization">A new organization.</param>
        /// <param name="ParentOrganization">The parent organization of the new organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<AddOrganizationIfNotExistsResult> AddOrganizationIfNotExists(Organization                            Organization,
                                                                                       Organization                            ParentOrganization,
                                                                                       Action<Organization, EventTracking_Id>  OnAdded           = null,
                                                                                       EventTracking_Id                        EventTrackingId   = null,
                                                                                       User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    if (ParentOrganization is null)
                        ParentOrganization = NoOwner;

                    if (!_Organizations.ContainsKey(ParentOrganization.Id))
                        return AddOrganizationIfNotExistsResult.ArgumentError(Organization,
                                                                              eventTrackingId,
                                                                              nameof(ParentOrganization),
                                                                              "Parent organization '" + ParentOrganization.Id + "' does not exists in this API!");


                    #region Check if the user is allowed to create and link the given organizations!

                    if (CurrentUserId.HasValue &&
                       !GetUser(CurrentUserId.Value).
                            Organizations(Access_Levels.ReadWrite, true).
                            Contains     (ParentOrganization))
                    {
                        return AddOrganizationIfNotExistsResult.Failed(Organization,
                                                                       eventTrackingId,
                                                                       "Your are not allowed to create this sub organization!",
                                                                       ParentOrganization);
                    }

                    #endregion


                    var result = await _AddOrganizationIfNotExists(Organization,
                                                                   async (_organization, _eventTrackingId) => {

                                                                       await _LinkOrganizations(_organization,
                                                                                                Organization2OrganizationEdgeLabel.IsChildOf,
                                                                                                ParentOrganization,
                                                                                                _eventTrackingId,
                                                                                                SuppressNotifications:  true,
                                                                                                CurrentUserId:          CurrentUserId);

                                                                       OnAdded?.Invoke(_organization,
                                                                                       _eventTrackingId);

                                                                   },
                                                                   eventTrackingId,
                                                                   CurrentUserId);

                    if (result?.IsSuccess == true)
                    {

                        result.ParentOrganization = ParentOrganization;

                        if (result?.AddedOrIgnored == AddedOrIgnored.Added)
                            await SendNotifications(Organization,
                                                    Organization2OrganizationEdgeLabel.IsChildOf,
                                                    ParentOrganization,
                                                    linkOrganizations_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                    }

                    return result;

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddOrganizationIfNotExistsResult.Failed(Organization,
                                                                   eventTrackingId,
                                                                   e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return AddOrganizationIfNotExistsResult.Failed(Organization,
                                                           eventTrackingId,
                                                           "Internal locking failed!",
                                                           ParentOrganization);

        }

        #endregion

        #endregion

        #region AddOrUpdateOrganization   (Organization, (ParentOrganization), OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateOrganization(Organization,                     OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<AddOrUpdateOrganizationResult> _AddOrUpdateOrganization(Organization                            Organization,
                                                                                              Action<Organization, EventTracking_Id>  OnAdded           = null,
                                                                                              Action<Organization, EventTracking_Id>  OnUpdated         = null,
                                                                                              EventTracking_Id                        EventTrackingId   = null,
                                                                                              User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization is null)
                return AddOrUpdateOrganizationResult.ArgumentError(Organization,
                                                                   eventTrackingId,
                                                                   nameof(Organization),
                                                                   "The given organization must not be null!");

            if (Organization.API != null && Organization.API != this)
                return AddOrUpdateOrganizationResult.ArgumentError(Organization,
                                                                   eventTrackingId,
                                                                   nameof(Organization.API),
                                                                   "The given organization is already attached to another API!");

            if (Organization.Id.Length < MinOrganizationIdLength)
                return AddOrUpdateOrganizationResult.ArgumentError(Organization,
                                                                   eventTrackingId,
                                                                   nameof(Organization),
                                                                   "The given organization identification '" + Organization.Id + "' is too short!");

            if (Organization.Name.IsNullOrEmpty() || Organization.Name.IsNullOrEmpty())
                return AddOrUpdateOrganizationResult.ArgumentError(Organization,
                                                                   eventTrackingId,
                                                                   nameof(Organization),
                                                                   "The given organization name must not be null!");

            //if (Organization.Name.Length < MinOrganizationNameLength)
            //    return AddOrUpdateOrganizationResult.ArgumentError(Organization,
            //                                               eventTrackingId,
            //                                               nameof(Organization),
            //                                               "Organization name '" + Organization.Name + "' is too short!");

            Organization.API = this;


            await WriteToDatabaseFile(addOrUpdateOrganization_MessageType,
                                      Organization.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_Organizations.TryGetValue(Organization.Id, out Organization OldOrganization))
            {
                _Organizations.Remove(OldOrganization.Id);
                Organization.CopyAllLinkedDataFrom(OldOrganization);
            }

            _Organizations.Add(Organization.Id, Organization);

            if (OldOrganization is null)
            {

                OnAdded?.Invoke(Organization,
                                eventTrackingId);

                var OnOrganizationAddedLocal = OnOrganizationAdded;
                if (OnOrganizationAddedLocal != null)
                    await OnOrganizationAddedLocal?.Invoke(Timestamp.Now,
                                                           Organization,
                                                           eventTrackingId,
                                                           CurrentUserId);

                await SendNotifications(Organization,
                                        addOrganization_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateOrganizationResult.Success(Organization,
                                                             AddedOrUpdated.Add,
                                                             eventTrackingId);

            }
            else
            {

                OnAdded?.Invoke(Organization,
                                eventTrackingId);

                var OnOrganizationUpdatedLocal = OnOrganizationUpdated;
                if (OnOrganizationUpdatedLocal != null)
                    await OnOrganizationUpdatedLocal?.Invoke(Timestamp.Now,
                                                             Organization,
                                                             OldOrganization,
                                                             eventTrackingId,
                                                             CurrentUserId);

                await SendNotifications(Organization,
                                        updateOrganization_MessageType,
                                        OldOrganization,
                                        eventTrackingId,
                                        CurrentUserId);

                return AddOrUpdateOrganizationResult.Success(Organization,
                                                             AddedOrUpdated.Update,
                                                             eventTrackingId);

            }

        }

        #endregion

        #region AddOrUpdateOrganization                      (Organization,                     OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<AddOrUpdateOrganizationResult> AddOrUpdateOrganization(Organization                            Organization,
                                                                                 Action<Organization, EventTracking_Id>  OnAdded           = null,
                                                                                 Action<Organization, EventTracking_Id>  OnUpdated         = null,
                                                                                 EventTracking_Id                        EventTrackingId   = null,
                                                                                 User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _AddOrUpdateOrganization(Organization,
                                                          OnAdded,
                                                          OnUpdated,
                                                          eventTrackingId,
                                                          CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddOrUpdateOrganizationResult.Failed(Organization,
                                                                eventTrackingId,
                                                                e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return AddOrUpdateOrganizationResult.Failed(Organization,
                                                        eventTrackingId,
                                                        "Internal locking failed!");

        }

        #endregion

        #region AddOrUpdateOrganization                      (Organization, ParentOrganization, OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="ParentOrganization">The parent organization of the new organization.</param>
        /// <param name="OnAdded">A delegate run whenever the organization has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<AddOrUpdateOrganizationResult> AddOrUpdateOrganization(Organization                            Organization,
                                                                                 Organization                            ParentOrganization,
                                                                                 Action<Organization, EventTracking_Id>  OnAdded           = null,
                                                                                 Action<Organization, EventTracking_Id>  OnUpdated         = null,
                                                                                 EventTracking_Id                        EventTrackingId   = null,
                                                                                 User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    if (ParentOrganization is null)
                        ParentOrganization = NoOwner;

                    if (!_Organizations.ContainsKey(ParentOrganization.Id))
                        return AddOrUpdateOrganizationResult.ArgumentError(Organization,
                                                                           eventTrackingId,
                                                                           nameof(ParentOrganization),
                                                                           "Parent organization '" + ParentOrganization.Id + "' does not exists in this API!");


                    #region Check if the user is allowed to create and link the given organizations!

                    if (!(Organization is null) &&
                        !_OrganizationExists(Organization.Id) &&
                         CurrentUserId.HasValue &&
                        !GetUser(CurrentUserId.Value).
                             Organizations(Access_Levels.ReadWrite, true).
                             Contains     (ParentOrganization))
                    {
                        return AddOrUpdateOrganizationResult.Failed(Organization,
                                                                    eventTrackingId,
                                                                    "Your are not allowed to create this sub organization!",
                                                                    ParentOrganization);
                    }

                    #endregion


                    var result = await _AddOrUpdateOrganization(Organization,
                                                                async (_organization, _eventTrackingId) => {

                                                                    await _LinkOrganizations(_organization,
                                                                                             Organization2OrganizationEdgeLabel.IsChildOf,
                                                                                             ParentOrganization,
                                                                                             _eventTrackingId,
                                                                                             SuppressNotifications:  true,
                                                                                             CurrentUserId:          CurrentUserId);

                                                                    OnAdded?.Invoke(_organization,
                                                                                    _eventTrackingId);

                                                                },
                                                                OnUpdated,
                                                                eventTrackingId,
                                                                CurrentUserId);

                    if (result?.IsSuccess == true)
                    {

                        result.ParentOrganization = ParentOrganization;

                        if (result?.AddedOrUpdated == AddedOrUpdated.Add)
                            await SendNotifications(Organization,
                                                    Organization2OrganizationEdgeLabel.IsChildOf,
                                                    ParentOrganization,
                                                    linkOrganizations_MessageType,
                                                    eventTrackingId,
                                                    CurrentUserId);

                    }

                    return result;

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return AddOrUpdateOrganizationResult.Failed(Organization,
                                                                eventTrackingId,
                                                                e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return AddOrUpdateOrganizationResult.Failed(Organization,
                                                        eventTrackingId,
                                                        "Internal locking failed!",
                                                        ParentOrganization);

        }

        #endregion

        #endregion

        #region UpdateOrganization        (Organization,                                       OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a organization was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization was updated.</param>
        /// <param name="Organization">The updated organization.</param>
        /// <param name="OldOrganization">The old organization.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public delegate Task OnOrganizationUpdatedDelegate(DateTime          Timestamp,
                                                           Organization      Organization,
                                                           Organization      OldOrganization,
                                                           EventTracking_Id  EventTrackingId   = null,
                                                           User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization was updated.
        /// </summary>
        public event OnOrganizationUpdatedDelegate OnOrganizationUpdated;


        #region (protected internal) _UpdateOrganization(Organization,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<UpdateOrganizationResult> _UpdateOrganization(Organization                            Organization,
                                                                                    Action<Organization, EventTracking_Id>  OnUpdated         = null,
                                                                                    EventTracking_Id                        EventTrackingId   = null,
                                                                                    User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization is null)
                return UpdateOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization),
                                                              "The given organization must not be null!");

            if (!_TryGetOrganization(Organization.Id, out Organization OldOrganization))
                return UpdateOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization),
                                                              "The given organization '" + Organization.Id + "' does not exists in this API!");

            if (Organization.API != null && Organization.API != this)
                return UpdateOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization.API),
                                                              "The given organization is already attached to another API!");

            Organization.API = this;


            await WriteToDatabaseFile(updateOrganization_MessageType,
                                      Organization.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _Organizations.Remove(OldOrganization.Id);
            Organization.CopyAllLinkedDataFrom(OldOrganization);
            _Organizations.Add(Organization.Id, Organization);

            OnUpdated?.Invoke(Organization,
                              eventTrackingId);

            var OnOrganizationUpdatedLocal = OnOrganizationUpdated;
            if (OnOrganizationUpdatedLocal != null)
                await OnOrganizationUpdatedLocal?.Invoke(Timestamp.Now,
                                                         Organization,
                                                         OldOrganization,
                                                         eventTrackingId,
                                                         CurrentUserId);

            await SendNotifications(Organization,
                                    updateOrganization_MessageType,
                                    OldOrganization,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateOrganizationResult.Success(Organization,
                                                    eventTrackingId);

        }

        #endregion

        #region UpdateOrganization                      (Organization,                 OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization to/within the API.
        /// </summary>
        /// <param name="Organization">A organization.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<UpdateOrganizationResult> UpdateOrganization(Organization                            Organization,
                                                                       Action<Organization, EventTracking_Id>  OnUpdated         = null,
                                                                       EventTracking_Id                        EventTrackingId   = null,
                                                                       User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UpdateOrganization(Organization,
                                                     OnUpdated,
                                                     eventTrackingId,
                                                     CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UpdateOrganizationResult.Failed(Organization,
                                                           eventTrackingId,
                                                           e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateOrganizationResult.Failed(Organization,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion


        #region (protected internal) _UpdateOrganization(Organization, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization.
        /// </summary>
        /// <param name="Organization">An organization.</param>
        /// <param name="UpdateDelegate">A delegate to update the given organization.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        protected internal async Task<UpdateOrganizationResult> _UpdateOrganization(Organization                            Organization,
                                                                                    Action<Organization.Builder>            UpdateDelegate,
                                                                                    Action<Organization, EventTracking_Id>  OnUpdated         = null,
                                                                                    EventTracking_Id                        EventTrackingId   = null,
                                                                                    User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization is null)
                return UpdateOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization),
                                                              "The given organization must not be null!");

            if (!_OrganizationExists(Organization.Id))
                return UpdateOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization),
                                                              "The given organization '" + Organization.Id + "' does not exists in this API!");

            if (Organization.API != this)
                return UpdateOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization.API),
                                                              "The given organization is not attached to this API!");

            if (UpdateDelegate is null)
                return UpdateOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(UpdateDelegate),
                                                              "The given update delegate must not be null!");


            var builder = Organization.ToBuilder();
            UpdateDelegate(builder);
            var updatedOrganization = builder.ToImmutable;

            await WriteToDatabaseFile(updateOrganization_MessageType,
                                      updatedOrganization.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _Organizations.Remove(Organization.Id);
            updatedOrganization.CopyAllLinkedDataFrom(Organization);
            _Organizations.Add(updatedOrganization.Id, updatedOrganization);

            OnUpdated?.Invoke(updatedOrganization,
                              eventTrackingId);

            var OnOrganizationUpdatedLocal = OnOrganizationUpdated;
            if (OnOrganizationUpdatedLocal != null)
                await OnOrganizationUpdatedLocal?.Invoke(Timestamp.Now,
                                                         updatedOrganization,
                                                         Organization,
                                                         eventTrackingId,
                                                         CurrentUserId);

            await SendNotifications(updatedOrganization,
                                    updateOrganization_MessageType,
                                    Organization,
                                    eventTrackingId,
                                    CurrentUserId);

            return UpdateOrganizationResult.Success(Organization,
                                                    eventTrackingId);

        }

        #endregion

        #region UpdateOrganization                      (Organization, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization.
        /// </summary>
        /// <param name="Organization">An organization.</param>
        /// <param name="UpdateDelegate">A delegate to update the given organization.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization identification initiating this command/request.</param>
        public async Task<UpdateOrganizationResult> UpdateOrganization(Organization                            Organization,
                                                                       Action<Organization.Builder>            UpdateDelegate,
                                                                       Action<Organization, EventTracking_Id>  OnUpdated         = null,
                                                                       EventTracking_Id                        EventTrackingId   = null,
                                                                       User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UpdateOrganization(Organization,
                                                     UpdateDelegate,
                                                     OnUpdated,
                                                     eventTrackingId,
                                                     CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UpdateOrganizationResult.Failed(Organization,
                                                           eventTrackingId,
                                                           e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UpdateOrganizationResult.Failed(Organization,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion

        #endregion


        #region OrganizationExists(OrganizationId)

        /// <summary>
        /// Determines whether the given organization identification exists within this API.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        protected internal Boolean _OrganizationExists(Organization_Id OrganizationId)

            => OrganizationId.IsNotNullOrEmpty && _Organizations.ContainsKey(OrganizationId);

        /// <summary>
        /// Determines whether the given organization identification exists within this API.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        protected internal Boolean _OrganizationExists(Organization_Id? OrganizationId)

            => OrganizationId.IsNotNullOrEmpty() && _Organizations.ContainsKey(OrganizationId.Value);


        /// <summary>
        /// Determines whether the given organization identification exists within this API.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        public Boolean OrganizationExists(Organization_Id OrganizationId)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _OrganizationExists(OrganizationId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        /// <summary>
        /// Determines whether the given organization identification exists within this API.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        public Boolean OrganizationExists(Organization_Id? OrganizationId)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _OrganizationExists(OrganizationId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return false;

        }

        #endregion

        #region GetOrganization   (OrganizationId)

        /// <summary>
        /// Get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        protected internal Organization _GetOrganization(Organization_Id OrganizationId)
        {

            if (OrganizationId.IsNotNullOrEmpty && _Organizations.TryGetValue(OrganizationId, out Organization organization))
                return organization;

            return null;

        }

        /// <summary>
        /// Get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        protected internal Organization _GetOrganization(Organization_Id? OrganizationId)
        {

            if (OrganizationId.IsNotNullOrEmpty() && _Organizations.TryGetValue(OrganizationId.Value, out Organization organization))
                return organization;

            return null;

        }


        /// <summary>
        /// Get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        public Organization GetOrganization(Organization_Id OrganizationId)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetOrganization(OrganizationId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        /// <summary>
        /// Get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        public Organization GetOrganization(Organization_Id? OrganizationId)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _GetOrganization(OrganizationId);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return null;

        }

        #endregion

        #region TryGetOrganization(OrganizationId, out Organization)

        /// <summary>
        /// Try to get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        /// <param name="Organization">The organization.</param>
        protected internal Boolean _TryGetOrganization(Organization_Id   OrganizationId,
                                                       out Organization  Organization)
        {

            if (OrganizationId.IsNotNullOrEmpty && _Organizations.TryGetValue(OrganizationId, out Organization organization))
            {
                Organization = organization;
                return true;
            }

            Organization = null;
            return false;

        }

        /// <summary>
        /// Try to get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        /// <param name="Organization">The organization.</param>
        protected internal Boolean _TryGetOrganization(Organization_Id?  OrganizationId,
                                                       out Organization  Organization)
        {

            if (OrganizationId.IsNotNullOrEmpty() && _Organizations.TryGetValue(OrganizationId.Value, out Organization organization))
            {
                Organization = organization;
                return true;
            }

            Organization = null;
            return false;

        }


        /// <summary>
        /// Try to get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        /// <param name="Organization">The organization.</param>
        public Boolean TryGetOrganization(Organization_Id   OrganizationId,
                                          out Organization  Organization)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetOrganization(OrganizationId, out Organization);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Organization = null;
            return false;

        }

        /// <summary>
        /// Try to get the organization having the given unique identification.
        /// </summary>
        /// <param name="OrganizationId">The unique identification of an organization.</param>
        /// <param name="Organization">The organization.</param>
        public Boolean TryGetOrganization(Organization_Id?  OrganizationId,
                                          out Organization  Organization)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TryGetOrganization(OrganizationId, out Organization);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Organization = null;
            return false;

        }

        #endregion


        #region SearchOrganizationsByName   (OrganizationName)

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        protected internal IEnumerable<Organization> _SearchOrganizationsByName(I18NString OrganizationName)

            => _Organizations.Values.
                              Where(organization => organization.Name.Equals(OrganizationName)).
                              ToArray();

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="IgnoreCase">Ignore the case of the organization name.</param>
        protected internal IEnumerable<Organization> _SearchOrganizationsByName(String   OrganizationName,
                                                                                Boolean  IgnoreCase = false)

            => _Organizations.Values.
                              Where(organization => organization.Name.Matches(OrganizationName,
                                                                              IgnoreCase)).
                              ToArray();


        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        public IEnumerable<Organization> SearchOrganizationsByName(I18NString OrganizationName)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _SearchOrganizationsByName(OrganizationName);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new Organization[0];

        }

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="IgnoreCase">Ignore the case of the organization name.</param>
        public IEnumerable<Organization> SearchOrganizationsByName(String   OrganizationName,
                                                                   Boolean  IgnoreCase = false)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _SearchOrganizationsByName(OrganizationName,
                                                      IgnoreCase);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return new Organization[0];

        }

        #endregion

        #region TrySearchOrganizationsByName(OrganizationName, out Organizations)

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="Organizations">An enumeration of matching organizations.</param>
        protected internal Boolean _TrySearchOrganizationsByName(I18NString                     OrganizationName,
                                                                 out IEnumerable<Organization>  Organizations)
        {

            var foundOrganizations = new List<Organization>();

            foreach (var organization in _Organizations.Values)
                if (organization.Name.Equals(OrganizationName))
                    foundOrganizations.Add(organization);

            Organizations = foundOrganizations;

            return foundOrganizations.Any();

        }

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="Organizations">An enumeration of matching organizations.</param>
        /// <param name="IgnoreCase">Ignore the case of the organization name.</param>
        protected internal Boolean _TrySearchOrganizationsByName(String                         OrganizationName,
                                                                 out IEnumerable<Organization>  Organizations,
                                                                 Boolean                        IgnoreCase = false)
        {

            var foundOrganizations = new List<Organization>();

            foreach (var organization in _Organizations.Values)
                if (organization.Name.Matches(OrganizationName, IgnoreCase))
                    foundOrganizations.Add(organization);

            Organizations = foundOrganizations;

            return foundOrganizations.Any();

        }


        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="Organizations">An enumeration of matching organizations.</param>
        public Boolean TrySearchOrganizationsByName(I18NString                     OrganizationName,
                                                    out IEnumerable<Organization>  Organizations)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TrySearchOrganizationsByName(OrganizationName, out Organizations);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Organizations = null;
            return false;

        }

        /// <summary>
        /// Find all organizations having the given organization name.
        /// </summary>
        /// <param name="OrganizationName">The name of a organization (might not be unique).</param>
        /// <param name="Organizations">An enumeration of matching organizations.</param>
        public Boolean TrySearchOrganizationsByName(String                         OrganizationName,
                                                    out IEnumerable<Organization>  Organizations,
                                                    Boolean                        IgnoreCase = false)
        {

            if (OrganizationsSemaphore.Wait(SemaphoreSlimTimeout))
            {
                try
                {

                    return _TrySearchOrganizationsByName(OrganizationName,
                                                         out Organizations,
                                                         IgnoreCase);

                }
                catch
                { }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            Organizations = null;
            return false;

        }

        #endregion


        #region IsAdmin(User)

        /// <summary>
        /// Check if the given user is an API admin.
        /// </summary>
        /// <param name="User">A user.</param>
        public Access_Levels IsAdmin(User User)
        {

            if (User.Organizations(Access_Levels.Admin, false).
                     Any          (org => org.Id == AdminOrganizationId))
            {
                return Access_Levels.ReadWrite;
            }

            if (User.Organizations(Access_Levels.AdminReadOnly, false).
                     Any          (org => org.Id == AdminOrganizationId))
            {
                return Access_Levels.ReadOnly;
            }

            return Access_Levels.None;

        }

        #endregion

        #region IsAdmin(UserId)

        /// <summary>
        /// Check if the given user is an API admin.
        /// </summary>
        /// <param name="UserId">A user identification.</param>
        public Access_Levels IsAdmin(User_Id UserId)
        {

            if (TryGetUser(UserId, out User User))
                return IsAdmin(User);

            return Access_Levels.None;

        }

        #endregion


        #region DeleteOrganization(Organization, OnDeleted = null, ...)

        /// <summary>
        /// A delegate called whenever a organization was deleted.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization was deleted.</param>
        /// <param name="Organization">The organization to be deleted.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnOrganizationDeletedDelegate(DateTime          Timestamp,
                                                           Organization      Organization,
                                                           EventTracking_Id  EventTrackingId   = null,
                                                           User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization was deleted.
        /// </summary>
        public event OnOrganizationDeletedDelegate OnOrganizationDeleted;


        #region (protected internal virtual) _CanDeleteOrganization(Organization)

        /// <summary>
        /// Determines whether the organization can safely be deleted from the API.
        /// </summary>
        /// <param name="Organization">The organization to be deleted.</param>
        protected internal virtual I18NString _CanDeleteOrganization(Organization Organization)
        {

            if (Organization.Users.Any())
                return new I18NString(Languages.en, "The organization still has members!");

            if (Organization.SubOrganizations.Any())
                return new I18NString(Languages.en, "The organization still has sub organizations!");

            return null;

        }

        #endregion

        #region (protected internal) _DeleteOrganization(Organization, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given organization.
        /// </summary>
        /// <param name="Organization">The organization to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the organization has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<DeleteOrganizationResult> _DeleteOrganization(Organization                            Organization,
                                                                                    Action<Organization, EventTracking_Id>  OnDeleted         = null,
                                                                                    EventTracking_Id                        EventTrackingId   = null,
                                                                                    User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (Organization is null)
                return DeleteOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization),
                                                              "The given organization must not be null!");

            if (Organization.API != this)
                return DeleteOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization),
                                                              "The given organization is not attached to this API!");

            if (!_Organizations.TryGetValue(Organization.Id, out Organization OrganizationToBeDeleted))
                return DeleteOrganizationResult.ArgumentError(Organization,
                                                              eventTrackingId,
                                                              nameof(Organization),
                                                              "The given organization does not exists in this API!");


            var result = _CanDeleteOrganization(Organization);

            if (result != null)
                return DeleteOrganizationResult.Failed(Organization,
                                                       eventTrackingId,
                                                       result);


            // Get all parent organizations now, because later
            // the --isChildOf--> edge will no longer be available!
            var parentOrganizations = Organization.GetAllParents(parent => parent != NoOwner).
                                                   ToArray();


            // Remove all: this --edge--> other_organization
            foreach (var edge in Organization.Organization2OrganizationOutEdges.ToArray())
                await _UnlinkOrganizations(edge.Source,
                                           edge.EdgeLabel,
                                           edge.Target,
                                           EventTrackingId,
                                           SuppressNotifications:  false,
                                           CurrentUserId:          CurrentUserId);

            // Remove all: this <--edge-- other_organization
            foreach (var edge in Organization.Organization2OrganizationInEdges.ToArray())
                await _UnlinkOrganizations(edge.Target,
                                           edge.EdgeLabel,
                                           edge.Source,
                                           EventTrackingId,
                                           SuppressNotifications:  false,
                                           CurrentUserId:          CurrentUserId);


            await WriteToDatabaseFile(deleteOrganization_MessageType,
                                      Organization.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _Organizations.Remove(Organization.Id);

            OnDeleted?.Invoke(Organization,
                              eventTrackingId);

            var OnOrganizationDeletedLocal = OnOrganizationDeleted;
            if (OnOrganizationDeletedLocal != null)
                await OnOrganizationDeletedLocal?.Invoke(Timestamp.Now,
                                                         Organization,
                                                         eventTrackingId,
                                                         CurrentUserId);

            await SendNotifications(Organization,
                                    parentOrganizations,
                                    deleteOrganization_MessageType,
                                    eventTrackingId,
                                    CurrentUserId);


            return DeleteOrganizationResult.Success(Organization,
                                                    eventTrackingId);

        }

        #endregion

        #region DeleteOrganization                      (Organization, OnDeleted = null, ...)

        /// <summary>
        /// Delete the given organization.
        /// </summary>
        /// <param name="Organization">The organization to be deleted.</param>
        /// <param name="OnDeleted">A delegate run whenever the organization has been deleted successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<DeleteOrganizationResult> DeleteOrganization(Organization                            Organization,
                                                                       Action<Organization, EventTracking_Id>  OnDeleted         = null,
                                                                       EventTracking_Id                        EventTrackingId   = null,
                                                                       User_Id?                                CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _DeleteOrganization(Organization,
                                                     OnDeleted,
                                                     eventTrackingId,
                                                     CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return DeleteOrganizationResult.Failed(Organization,
                                                           eventTrackingId,
                                                           e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }

            }

            return DeleteOrganizationResult.Failed(Organization,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion

        #endregion

        #endregion

        #region OrganizationGroups

        #region Data

        /// <summary>
        /// An enumeration of all organization groups.
        /// </summary>
        protected internal readonly Dictionary<OrganizationGroup_Id, OrganizationGroup> _OrganizationGroups;

        /// <summary>
        /// An enumeration of all organization groups.
        /// </summary>
        public IEnumerable<OrganizationGroup> OrganizationGroups
        {
            get
            {
                try
                {
                    return OrganizationGroupsSemaphore.Wait(SemaphoreSlimTimeout)
                               ? _OrganizationGroups.Values.ToArray()
                               : new OrganizationGroup[0];
                }
                finally
                {
                    try
                    {
                        OrganizationGroupsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(OrganizationGroup, MessageType,  OldOrganizationGroup = null, ...)

        /// <summary>
        /// Write the given organization group to the database and send out notifications.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldOrganizationGroup">The old/updated organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(OrganizationGroup        OrganizationGroup,
                                                                   NotificationMessageType  MessageType,
                                                                   OrganizationGroup        OldOrganizationGroup   = null,
                                                                   EventTracking_Id         EventTrackingId        = null,
                                                                   User_Id?                 CurrentUserId          = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),    "The given organization group must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      OrganizationGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(OrganizationGroup,
                                    MessageType,
                                    OldOrganizationGroup,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (OrganizationGroup, MessageTypes, OldOrganizationGroup = null, ...)

        /// <summary>
        /// Send organization group notifications.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldOrganizationGroup">The old/updated organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(OrganizationGroup        OrganizationGroup,
                                                        NotificationMessageType  MessageType,
                                                        OrganizationGroup        OldOrganizationGroup   = null,
                                                        EventTracking_Id         EventTrackingId        = null,
                                                        User_Id?                 CurrentUserId          = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),    "The given organization group must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(OrganizationGroup,
                                    new NotificationMessageType[] { MessageType },
                                    OldOrganizationGroup,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send organization group notifications.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldOrganizationGroup">The old/updated organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(OrganizationGroup                     OrganizationGroup,
                                                        IEnumerable<NotificationMessageType>  MessageTypes,
                                                        OrganizationGroup                     OldOrganizationGroup   = null,
                                                        EventTracking_Id                      EventTrackingId        = null,
                                                        User_Id?                              CurrentUserId          = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),     "The given organization group must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldOrganizationGroup == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected internal) GetOrganizationGroupSerializator(Request, User)

        protected internal OrganizationGroupToJSONDelegate GetOrganizationGroupSerializator(HTTPRequest  Request,
                                                                                            User         User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (organizationGroup,
                            embedded,
                            expandUsers,
                            expandParentGroup,
                            expandSubgroups,
                            expandAttachedFiles,
                            includeAttachedFileSignatures,
                            includeCryptoHash)

                            => organizationGroup.ToJSON(embedded,
                                                        expandUsers,
                                                        expandParentGroup,
                                                        expandSubgroups,
                                                        expandAttachedFiles,
                                                        includeAttachedFileSignatures,
                                                        includeCryptoHash);

            }

        }

        #endregion


        #region AddOrganizationGroup           (OrganizationGroup, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a organization group was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization group was added.</param>
        /// <param name="OrganizationGroup">The added organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnOrganizationGroupAddedDelegate(DateTime           Timestamp,
                                                              OrganizationGroup  OrganizationGroup,
                                                              EventTracking_Id   EventTrackingId   = null,
                                                              User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization group was added.
        /// </summary>
        public event OnOrganizationGroupAddedDelegate OnOrganizationGroupAdded;


        #region (protected internal) _AddOrganizationGroup(OrganizationGroup,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given organization group to the API.
        /// </summary>
        /// <param name="OrganizationGroup">A new organization group to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> _AddOrganizationGroup(OrganizationGroup                            OrganizationGroup,
                                                                               Action<OrganizationGroup, EventTracking_Id>  OnAdded           = null,
                                                                               EventTracking_Id                             EventTrackingId   = null,
                                                                               User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != null && OrganizationGroup.API != this)
                throw new ArgumentException    ("The given organization group is already attached to another API!",
                                                nameof(OrganizationGroup));

            if (_OrganizationGroups.ContainsKey(OrganizationGroup.Id))
                throw new ArgumentException    ("User group identification '" + OrganizationGroup.Id + "' already exists!",
                                                nameof(OrganizationGroup));

            if (OrganizationGroup.Id.Length < MinOrganizationGroupIdLength)
                throw new ArgumentException    ("User group identification '" + OrganizationGroup.Id + "' is too short!",
                                                nameof(OrganizationGroup));

            OrganizationGroup.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrganizationGroup_MessageType,
                                      OrganizationGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _OrganizationGroups.Add(OrganizationGroup.Id, OrganizationGroup);


            var OnOrganizationGroupAddedLocal = OnOrganizationGroupAdded;
            if (OnOrganizationGroupAddedLocal != null)
                await OnOrganizationGroupAddedLocal?.Invoke(Timestamp.Now,
                                                            OrganizationGroup,
                                                            eventTrackingId,
                                                            CurrentUserId);

            await SendNotifications(OrganizationGroup,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(OrganizationGroup,
                            eventTrackingId);

            return OrganizationGroup;

        }

        #endregion

        #region AddOrganizationGroup             (OrganizationGroup,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given organization group.
        /// </summary>
        /// <param name="OrganizationGroup">A new organization group.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<OrganizationGroup> AddOrganizationGroup(OrganizationGroup                            OrganizationGroup,
                                                                  Action<OrganizationGroup, EventTracking_Id>  OnAdded           = null,
                                                                  EventTracking_Id                             EventTrackingId   = null,
                                                                  User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup), "The given organization group must not be null!");

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddOrganizationGroup(OrganizationGroup,
                                                          OnAdded,
                                                          EventTrackingId,
                                                          CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrganizationGroupIfNotExists(OrganizationGroup, OnAdded = null,                   CurrentUserId = null)

        #region (protected internal) _AddOrganizationGroupIfNotExists(OrganizationGroup,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given organization group to the API.
        /// </summary>
        /// <param name="OrganizationGroup">A new organization group to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> _AddOrganizationGroupIfNotExists(OrganizationGroup                            OrganizationGroup,
                                                                                          Action<OrganizationGroup, EventTracking_Id>  OnAdded           = null,
                                                                                          EventTracking_Id                             EventTrackingId   = null,
                                                                                          User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != null && OrganizationGroup.API != this)
                throw new ArgumentException    ("The given organization group is already attached to another API!",
                                                nameof(OrganizationGroup));

            if (_OrganizationGroups.ContainsKey(OrganizationGroup.Id))
                return _OrganizationGroups[OrganizationGroup.Id];

            if (OrganizationGroup.Id.Length < MinOrganizationGroupIdLength)
                throw new ArgumentException    ("User group identification '" + OrganizationGroup.Id + "' is too short!",
                                                nameof(OrganizationGroup));

            OrganizationGroup.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrganizationGroupIfNotExists_MessageType,
                                      OrganizationGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _OrganizationGroups.Add(OrganizationGroup.Id, OrganizationGroup);

            var OnOrganizationGroupAddedLocal = OnOrganizationGroupAdded;
            if (OnOrganizationGroupAddedLocal != null)
                await OnOrganizationGroupAddedLocal?.Invoke(Timestamp.Now,
                                                            OrganizationGroup,
                                                            eventTrackingId,
                                                            CurrentUserId);

            await SendNotifications(OrganizationGroup,
                                    addOrganizationGroupIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(OrganizationGroup,
                            eventTrackingId);

            return OrganizationGroup;

        }

        #endregion

        #region AddOrganizationGroupIfNotExists             (OrganizationGroup,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given organization group.
        /// </summary>
        /// <param name="OrganizationGroup">A new organization group.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<OrganizationGroup> AddOrganizationGroupIfNotExists(OrganizationGroup                            OrganizationGroup,
                                                                             Action<OrganizationGroup, EventTracking_Id>  OnAdded           = null,
                                                                             EventTracking_Id                             EventTrackingId   = null,
                                                                             User_Id?                                     CurrentUserId     = null)
        {

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddOrganizationGroupIfNotExists(OrganizationGroup,
                                                                     OnAdded,
                                                                     EventTrackingId,
                                                                     CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrUpdateOrganizationGroup   (OrganizationGroup, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateOrganizationGroup   (OrganizationGroup,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization group to/within the API.
        /// </summary>
        /// <param name="OrganizationGroup">A organization group.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> _AddOrUpdateOrganizationGroup(OrganizationGroup                            OrganizationGroup,
                                                                                       Action<OrganizationGroup, EventTracking_Id>  OnAdded           = null,
                                                                                       Action<OrganizationGroup, EventTracking_Id>  OnUpdated         = null,
                                                                                       EventTracking_Id                             EventTrackingId   = null,
                                                                                       User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != null && OrganizationGroup.API != this)
                throw new ArgumentException    ("The given organization group is already attached to another API!",
                                                nameof(OrganizationGroup));

            if (_OrganizationGroups.ContainsKey(OrganizationGroup.Id))
                return _OrganizationGroups[OrganizationGroup.Id];

            if (OrganizationGroup.Id.Length < MinOrganizationGroupIdLength)
                throw new ArgumentException    ("OrganizationGroup identification '" + OrganizationGroup.Id + "' is too short!",
                                                nameof(OrganizationGroup));

            OrganizationGroup.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrUpdateOrganizationGroup_MessageType,
                                      OrganizationGroup.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_OrganizationGroups.TryGetValue(OrganizationGroup.Id, out OrganizationGroup OldOrganizationGroup))
            {
                _OrganizationGroups.Remove(OldOrganizationGroup.Id);
                OrganizationGroup.CopyAllLinkedDataFrom(OldOrganizationGroup);
            }

            _OrganizationGroups.Add(OrganizationGroup.Id, OrganizationGroup);

            if (OldOrganizationGroup != null)
            {

                var OnOrganizationGroupUpdatedLocal = OnOrganizationGroupUpdated;
                if (OnOrganizationGroupUpdatedLocal != null)
                    await OnOrganizationGroupUpdatedLocal?.Invoke(Timestamp.Now,
                                                                  OrganizationGroup,
                                                                  OldOrganizationGroup,
                                                                  eventTrackingId,
                                                                  CurrentUserId);

                await SendNotifications(OrganizationGroup,
                                        updateOrganizationGroup_MessageType,
                                        OldOrganizationGroup,
                                        eventTrackingId,
                                        CurrentUserId);

                OnUpdated?.Invoke(OrganizationGroup,
                                  eventTrackingId);

            }
            else
            {

                var OnOrganizationGroupAddedLocal = OnOrganizationGroupAdded;
                if (OnOrganizationGroupAddedLocal != null)
                    await OnOrganizationGroupAddedLocal?.Invoke(Timestamp.Now,
                                                                OrganizationGroup,
                                                                eventTrackingId,
                                                                CurrentUserId);

                await SendNotifications(OrganizationGroup,
                                        addOrganizationGroup_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnAdded?.Invoke(OrganizationGroup,
                                eventTrackingId);

            }

            return OrganizationGroup;

        }

        #endregion

        #region AddOrUpdateOrganizationGroup   (OrganizationGroup,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given organization group to/within the API.
        /// </summary>
        /// <param name="OrganizationGroup">A organization group.</param>
        /// <param name="OnAdded">A delegate run whenever the organization group has been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        public async Task<OrganizationGroup> AddOrUpdateOrganizationGroup(OrganizationGroup                            OrganizationGroup,
                                                                          Action<OrganizationGroup, EventTracking_Id>  OnAdded           = null,
                                                                          Action<OrganizationGroup, EventTracking_Id>  OnUpdated         = null,
                                                                          EventTracking_Id                             EventTrackingId   = null,
                                                                          User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup), "The given organization group must not be null!");

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddOrUpdateOrganizationGroup(OrganizationGroup,
                                                                  OnAdded,
                                                                  OnUpdated,
                                                                  EventTrackingId,
                                                                  CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region UpdateOrganizationGroup        (OrganizationGroup,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a organization group was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization group was updated.</param>
        /// <param name="OrganizationGroup">The updated organization group.</param>
        /// <param name="OldOrganizationGroup">The old organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization group identification</param>
        public delegate Task OnOrganizationGroupUpdatedDelegate(DateTime           Timestamp,
                                                                OrganizationGroup  OrganizationGroup,
                                                                OrganizationGroup  OldOrganizationGroup,
                                                                EventTracking_Id   EventTrackingId   = null,
                                                                User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization group was updated.
        /// </summary>
        public event OnOrganizationGroupUpdatedDelegate OnOrganizationGroupUpdated;


        #region (protected internal) _UpdateOrganizationGroup(OrganizationGroup, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization group to/within the API.
        /// </summary>
        /// <param name="OrganizationGroup">A organization group.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> _UpdateOrganizationGroup(OrganizationGroup                            OrganizationGroup,
                                                                                  Action<OrganizationGroup, EventTracking_Id>  OnUpdated         = null,
                                                                                  EventTracking_Id                             EventTrackingId   = null,
                                                                                  User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != null && OrganizationGroup.API != this)
                throw new ArgumentException    ("The given organization group is already attached to another API!",
                                                nameof(OrganizationGroup));

            if (!_OrganizationGroups.TryGetValue(OrganizationGroup.Id, out OrganizationGroup OldOrganizationGroup))
                throw new ArgumentException    ("The given organization group '" + OrganizationGroup.Id + "' does not exists in this API!",
                                                nameof(OrganizationGroup));

            OrganizationGroup.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateOrganizationGroup_MessageType,
                                      OrganizationGroup.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _OrganizationGroups.Remove(OldOrganizationGroup.Id);
            OrganizationGroup.CopyAllLinkedDataFrom(OldOrganizationGroup);


            var OnOrganizationGroupUpdatedLocal = OnOrganizationGroupUpdated;
            if (OnOrganizationGroupUpdatedLocal != null)
                await OnOrganizationGroupUpdatedLocal?.Invoke(Timestamp.Now,
                                                              OrganizationGroup,
                                                              OldOrganizationGroup,
                                                              eventTrackingId,
                                                              CurrentUserId);

            await SendNotifications(OrganizationGroup,
                                    updateOrganizationGroup_MessageType,
                                    OldOrganizationGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(OrganizationGroup,
                              eventTrackingId);

            return OrganizationGroup;

        }

        #endregion

        #region UpdateOrganizationGroup             (OrganizationGroup, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization group to/within the API.
        /// </summary>
        /// <param name="OrganizationGroup">A organization group.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        public async Task<OrganizationGroup> UpdateOrganizationGroup(OrganizationGroup                            OrganizationGroup,
                                                                     Action<OrganizationGroup, EventTracking_Id>  OnUpdated         = null,
                                                                     EventTracking_Id                             EventTrackingId   = null,
                                                                     User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup), "The given organization group must not be null!");

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateOrganizationGroup(OrganizationGroup,
                                                             OnUpdated,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion


        #region (protected internal) _UpdateOrganizationGroup(OrganizationGroupId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization group.
        /// </summary>
        /// <param name="OrganizationGroupId">An organization group identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given organization group.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        protected internal async Task<OrganizationGroup> _UpdateOrganizationGroup(OrganizationGroup_Id                         OrganizationGroupId,
                                                                                  Action<OrganizationGroup.Builder>            UpdateDelegate,
                                                                                  Action<OrganizationGroup, EventTracking_Id>  OnUpdated         = null,
                                                                                  EventTracking_Id                             EventTrackingId   = null,
                                                                                  User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroupId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(OrganizationGroupId),
                                                "The given organization group identification must not be null or empty!");

            if (UpdateDelegate == null)
                throw new ArgumentNullException(nameof(UpdateDelegate),
                                                "The given update delegate must not be null!");

            if (!_OrganizationGroups.TryGetValue(OrganizationGroupId, out OrganizationGroup OldOrganizationGroup))
                throw new ArgumentException    ("The given organization group '" + OrganizationGroupId + "' does not exists in this API!",
                                                nameof(OrganizationGroupId));

            var Builder = OldOrganizationGroup.ToBuilder();
            UpdateDelegate(Builder);
            var NewOrganizationGroup = Builder.ToImmutable;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateOrganizationGroup_MessageType,
                                      NewOrganizationGroup.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _OrganizationGroups.Remove(OldOrganizationGroup.Id);
            NewOrganizationGroup.CopyAllLinkedDataFrom(OldOrganizationGroup);


            var OnOrganizationGroupUpdatedLocal = OnOrganizationGroupUpdated;
            if (OnOrganizationGroupUpdatedLocal != null)
                await OnOrganizationGroupUpdatedLocal?.Invoke(Timestamp.Now,
                                                              NewOrganizationGroup,
                                                              OldOrganizationGroup,
                                                              eventTrackingId,
                                                              CurrentUserId);

            await SendNotifications(NewOrganizationGroup,
                                    updateOrganizationGroup_MessageType,
                                    OldOrganizationGroup,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewOrganizationGroup,
                              eventTrackingId);

            return NewOrganizationGroup;

        }

        #endregion

        #region UpdateOrganizationGroup             (OrganizationGroupId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given organization group.
        /// </summary>
        /// <param name="OrganizationGroupId">An organization group identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given organization group.</param>
        /// <param name="OnUpdated">A delegate run whenever the organization group has been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        public async Task<OrganizationGroup> UpdateOrganizationGroup(OrganizationGroup_Id                         OrganizationGroupId,
                                                                     Action<OrganizationGroup.Builder>            UpdateDelegate,
                                                                     Action<OrganizationGroup, EventTracking_Id>  OnUpdated         = null,
                                                                     EventTracking_Id                             EventTrackingId   = null,
                                                                     User_Id?                                     CurrentUserId     = null)
        {

            if (OrganizationGroupId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(OrganizationGroupId), "The given organization group identification must not be null or empty!");

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateOrganizationGroup(OrganizationGroupId,
                                                             UpdateDelegate,
                                                             OnUpdated,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion


        #region OrganizationGroupExists(OrganizationGroupId)

        /// <summary>
        /// Determines whether the given organization group identification exists within this API.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        protected internal Boolean _OrganizationGroupExists(OrganizationGroup_Id OrganizationGroupId)

            => !OrganizationGroupId.IsNullOrEmpty && _OrganizationGroups.ContainsKey(OrganizationGroupId);


        /// <summary>
        /// Determines whether the given organization group identification exists within this API.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        public Boolean OrganizationGroupExists(OrganizationGroup_Id OrganizationGroupId)
        {

            try
            {

                if (OrganizationGroupsSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _OrganizationGroupExists(OrganizationGroupId))
                {
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

            return false;

        }

        #endregion

        #region GetOrganizationGroup   (OrganizationGroupId)

        /// <summary>
        /// Get the organization group having the given unique identification.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        protected internal OrganizationGroup _GetOrganizationGroup(OrganizationGroup_Id OrganizationGroupId)
        {

            if (!OrganizationGroupId.IsNullOrEmpty && _OrganizationGroups.TryGetValue(OrganizationGroupId, out OrganizationGroup organizationGroup))
                return organizationGroup;

            return null;

        }


        /// <summary>
        /// Get the organization group having the given unique identification.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of the organization group.</param>
        public OrganizationGroup GetOrganizationGroup(OrganizationGroup_Id OrganizationGroupId)
        {

            try
            {

                if (OrganizationGroupsSemaphore.Wait(SemaphoreSlimTimeout))
                    return _GetOrganizationGroup(OrganizationGroupId);

            }
            catch
            { }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

            return null;

        }

        #endregion

        #region TryGetOrganizationGroup(OrganizationGroupId, out OrganizationGroup)

        /// <summary>
        /// Try to get the organization group having the given unique identification.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        /// <param name="OrganizationGroup">The organization group.</param>
        protected internal Boolean _TryGetOrganizationGroup(OrganizationGroup_Id OrganizationGroupId, out OrganizationGroup OrganizationGroup)
        {

            if (!OrganizationGroupId.IsNullOrEmpty && _OrganizationGroups.TryGetValue(OrganizationGroupId, out OrganizationGroup organizationGroup))
            {
                OrganizationGroup = organizationGroup;
                return true;
            }

            OrganizationGroup = null;
            return false;

        }


        /// <summary>
        /// Try to get the organization group having the given unique identification.
        /// </summary>
        /// <param name="OrganizationGroupId">The unique identification of an organization group.</param>
        /// <param name="OrganizationGroup">The organization group.</param>
        public Boolean TryGetOrganizationGroup(OrganizationGroup_Id   OrganizationGroupId,
                                               out OrganizationGroup  OrganizationGroup)
        {

            try
            {

                if (OrganizationGroupsSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _TryGetOrganizationGroup(OrganizationGroupId, out OrganizationGroup organizationGroup))
                {
                    OrganizationGroup = organizationGroup;
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

            OrganizationGroup = null;
            return false;

        }

        #endregion


        #region SearchOrganizationGroupsByName(OrganizationGroupName)

        /// <summary>
        /// Find all groups having the given name.
        /// </summary>
        /// <param name="OrganizationGroupName">The name of an group (might not be unique).</param>
        public IEnumerable<OrganizationGroup> SearchOrganizationGroupsByName(String OrganizationGroupName)
        {

            try
            {

                OrganizationGroupsSemaphore.Wait();

                var FoundOrganizationGroups = new List<OrganizationGroup>();

                foreach (var group in _OrganizationGroups.Values)
                    if (group.Name.Any(i18npair => i18npair.Text == OrganizationGroupName))
                        FoundOrganizationGroups.Add(group);

                return FoundOrganizationGroups;

            }
            finally
            {
                OrganizationGroupsSemaphore.Release();
            }

        }

        /// <summary>
        /// Find all groups having the given name.
        /// </summary>
        /// <param name="OrganizationGroupName">The name of an group (might not be unique).</param>
        public IEnumerable<OrganizationGroup> SearchOrganizationGroupsByName(I18NString OrganizationGroupName)
        {

            try
            {

                OrganizationGroupsSemaphore.Wait();

                var FoundOrganizationGroups = new List<OrganizationGroup>();

                foreach (var group in _OrganizationGroups.Values)
                    if (group.Name == OrganizationGroupName)
                        FoundOrganizationGroups.Add(group);

                return FoundOrganizationGroups;

            }
            finally
            {
                OrganizationGroupsSemaphore.Release();
            }

        }

        #endregion

        #region SearchOrganizationGroupsByName(OrganizationGroupName, out OrganizationGroups)

        /// <summary>
        /// Find all groups having the given name.
        /// </summary>
        /// <param name="OrganizationGroupName">The name of an group (might not be unique).</param>
        /// <param name="OrganizationGroups">An enumeration of matching groups.</param>
        public Boolean SearchOrganizationGroupsByName(String OrganizationGroupName, out IEnumerable<OrganizationGroup> OrganizationGroups)
        {

            try
            {

                OrganizationGroupsSemaphore.Wait();

                var FoundOrganizationGroups = new List<OrganizationGroup>();

                foreach (var group in _OrganizationGroups.Values)
                    if (group.Name.Any(i18npair => i18npair.Text == OrganizationGroupName))
                        FoundOrganizationGroups.Add(group);

                OrganizationGroups = FoundOrganizationGroups;

                return FoundOrganizationGroups.Count > 0;

            }
            finally
            {
                OrganizationGroupsSemaphore.Release();
            }

        }

        /// <summary>
        /// Find all groups having the given name.
        /// </summary>
        /// <param name="OrganizationGroupName">The name of an group (might not be unique).</param>
        /// <param name="OrganizationGroups">An enumeration of matching groups.</param>
        public Boolean SearchOrganizationGroupsByName(I18NString OrganizationGroupName, out IEnumerable<OrganizationGroup> OrganizationGroups)
        {

            try
            {

                OrganizationGroupsSemaphore.Wait();

                var FoundOrganizationGroups = new List<OrganizationGroup>();

                foreach (var group in _OrganizationGroups.Values)
                    if (group.Name == OrganizationGroupName)
                        FoundOrganizationGroups.Add(group);

                OrganizationGroups = FoundOrganizationGroups;

                return FoundOrganizationGroups.Count > 0;

            }
            finally
            {
                OrganizationGroupsSemaphore.Release();
            }

        }

        #endregion


        #region RemoveOrganizationGroup(OrganizationGroup, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a organization group was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the organization group was removed.</param>
        /// <param name="OrganizationGroup">The removed organization group.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking organization group identification</param>
        public delegate Task OnOrganizationGroupRemovedDelegate(DateTime           Timestamp,
                                                                OrganizationGroup  OrganizationGroup,
                                                                EventTracking_Id   EventTrackingId   = null,
                                                                User_Id?           CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a organization group was removed.
        /// </summary>
        public event OnOrganizationGroupRemovedDelegate OnOrganizationGroupRemoved;


        #region (protected internal virtual) CanDeleteOrganizationGroup(OrganizationGroup)

        /// <summary>
        /// Determines whether the organization group can safely be removed from the API.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group to be removed.</param>
        protected internal virtual I18NString CanDeleteOrganizationGroup(OrganizationGroup OrganizationGroup)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion

        #region (protected internal) _RemoveOrganizationGroup(OrganizationGroup, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given organization group from the API.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the organization group has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        protected internal async Task<RemoveOrganizationGroupResult> _RemoveOrganizationGroup(OrganizationGroup                            OrganizationGroup,
                                                                                              Action<OrganizationGroup, EventTracking_Id>  OnRemoved         = null,
                                                                                              EventTracking_Id                             EventTrackingId   = null,
                                                                                              User_Id?                                     CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (OrganizationGroup is null)
                throw new ArgumentNullException(nameof(OrganizationGroup),
                                                "The given organization group must not be null!");

            if (OrganizationGroup.API != this || !_OrganizationGroups.TryGetValue(OrganizationGroup.Id, out OrganizationGroup OrganizationGroupToBeRemoved))
                throw new ArgumentException    ("The given organization group '" + OrganizationGroup.Id + "' does not exists in this API!",
                                                nameof(OrganizationGroup));


            var result = CanDeleteOrganizationGroup(OrganizationGroup);

            if (result == null)
            {

                await WriteToDatabaseFile(removeOrganizationGroup_MessageType,
                                          OrganizationGroup.ToJSON(false, true),
                                          eventTrackingId,
                                          CurrentUserId);

                _OrganizationGroups.Remove(OrganizationGroup.Id);


                var OnOrganizationGroupRemovedLocal = OnOrganizationGroupRemoved;
                if (OnOrganizationGroupRemovedLocal != null)
                    await OnOrganizationGroupRemovedLocal?.Invoke(Timestamp.Now,
                                                          OrganizationGroup,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(OrganizationGroup,
                                        removeOrganizationGroup_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnRemoved?.Invoke(OrganizationGroup,
                                  eventTrackingId);

                return RemoveOrganizationGroupResult.Success(OrganizationGroup,
                                                             eventTrackingId);

            }
            else
                return RemoveOrganizationGroupResult.Failed(OrganizationGroup,
                                                            eventTrackingId,
                                                            result);

        }

        #endregion

        #region RemoveOrganizationGroup(OrganizationGroup, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given organization group from the API.
        /// </summary>
        /// <param name="OrganizationGroup">The organization group to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the organization group has been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional organization group identification initiating this command/request.</param>
        public async Task<RemoveOrganizationGroupResult> RemoveOrganizationGroup(OrganizationGroup                            OrganizationGroup,
                                                                                 Action<OrganizationGroup, EventTracking_Id>  OnRemoved         = null,
                                                                                 EventTracking_Id                             EventTrackingId   = null,
                                                                                 User_Id?                                     CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            try
            {

                return (await OrganizationGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _RemoveOrganizationGroup(OrganizationGroup,
                                                             OnRemoved,
                                                             eventTrackingId,
                                                             CurrentUserId)

                            : RemoveOrganizationGroupResult.Failed(OrganizationGroup,
                                                                   eventTrackingId,
                                                                   "Internal locking failed!");

            }
            catch (Exception e)
            {
                return RemoveOrganizationGroupResult.Failed(OrganizationGroup,
                                                            eventTrackingId,
                                                            e);
            }
            finally
            {
                try
                {
                    OrganizationGroupsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #endregion

        #region Users         <> UserGroups

        #region (protected internal) SendNotifications      (User, EdgeLabel, UserGroup, MessageType(s), ...)

        /// <summary>
        /// Send user &lt;-- edge --&gt; user group notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageType">The notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification</param>
        protected internal virtual Task SendNotifications(User                     User,
                                                          User2UserGroupEdgeLabel  EdgeLabel,
                                                          UserGroup                UserGroup,
                                                          NotificationMessageType  MessageType,
                                                          EventTracking_Id         EventTrackingId    = null,
                                                          User_Id?                 CurrentUserId      = null)

            => SendNotifications(User,
                                 EdgeLabel,
                                 UserGroup,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user &lt;-- edge --&gt; user group notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="UserGroup">The user group.</param>
        /// <param name="MessageTypes">The notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification.</param>
        protected internal async virtual Task SendNotifications(User                                  User,
                                                                User2UserGroupEdgeLabel               EdgeLabel,
                                                                UserGroup                             UserGroup,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id                      EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (User is null)
                throw new ArgumentNullException(nameof(User),          "The given User must not be null or empty!");

            if (UserGroup is null)
                throw new ArgumentNullException(nameof(UserGroup),     "The given user group must not be null or empty!");


            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            var messageTypes = messageTypesHash.ToArray();

            if (!DisableNotifications)
            {

                var membership = EdgeLabel switch {
                    User2UserGroupEdgeLabel.IsAdmin  => " as admin",
                    User2UserGroupEdgeLabel.IsMember => " as member",
                    User2UserGroupEdgeLabel.IsGuest  => " as guest",
                    _                                => ""
                };

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        //var AllTelegramNotifications  = UserGroup.GetNotificationsOf<TelegramNotification>(messageTypes).
                        //                                     ToSafeHashSet();

                        //if (AllTelegramNotifications.SafeAny())
                        //{

                        //    if (MessageTypes.Contains(addUserToUserGroup_MessageType))
                        //        await TelegramStore.SendTelegrams(String.Concat("User '", User.Name, "' was added to user group '", UserGroup.Name.FirstText(), "'" + membership + "."),
                        //                                          AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username));

                        //    if (MessageTypes.Contains(removeUserFromUserGroup_MessageType))
                        //        await TelegramStore.SendTelegrams(String.Concat("User '", User.Name, "' was removed from user group '", UserGroup.Name.FirstText(), "'."),
                        //                                          AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username));

                        //}

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    //var AllSMSNotifications  = UserGroup.GetNotificationsOf<SMSNotification>(messageTypes).
                    //                                     ToSafeHashSet();

                    //if (AllSMSNotifications.SafeAny())
                    //{

                    //    if (MessageTypes.Contains(addUserToUserGroup_MessageType))
                    //        SendSMS(String.Concat("User '", User.Name, "' was added to user group '", UserGroup.Name.FirstText(), "'" + membership + "."),
                    //                AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                    //                SMSSenderName);

                    //    if (MessageTypes.Contains(removeUserFromUserGroup_MessageType))
                    //        SendSMS(String.Concat("User '", User.Name, "' was removed from user group '", UserGroup.Name.FirstText(), "'."),
                    //                AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                    //                SMSSenderName);

                    //}

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    //var AllHTTPSNotifications  = UserGroup.GetNotificationsOf<HTTPSNotification>(messageTypes).
                    //                                       ToSafeHashSet();

                    //if (AllHTTPSNotifications.SafeAny())
                    //{

                    //    if (MessageTypes.Contains(addUserToUserGroup_MessageType))
                    //        await SendHTTPSNotifications(AllHTTPSNotifications,
                    //                                     new JObject(
                    //                                         new JProperty("addUserToUserGroup",
                    //                                             new JObject(
                    //                                                 new JProperty("userGroup", UserGroup.ToJSON()),
                    //                                                 new JProperty("user",      User.     ToJSON())
                    //                                             )
                    //                                         ),
                    //                                         new JProperty("timestamp", Timestamp.Now.ToIso8601())
                    //                                     ));

                    //    if (MessageTypes.Contains(removeUserFromUserGroup_MessageType))
                    //        await SendHTTPSNotifications(AllHTTPSNotifications,
                    //                                     new JObject(
                    //                                         new JProperty("removeUserFromUserGroup",
                    //                                             new JObject(
                    //                                                 new JProperty("userGroup", UserGroup.ToJSON()),
                    //                                                 new JProperty("user",      User.     ToJSON())
                    //                                             )
                    //                                         ),
                    //                                         new JProperty("timestamp", Timestamp.Now.ToIso8601())
                    //                                     ));

                    //}

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                try
                {

                    //var AllEMailNotifications  = UserGroup.GetNotificationsOf<EMailNotification>(messageTypes).
                    //                                       ToSafeHashSet();

                    //if (AllEMailNotifications.SafeAny())
                    //{

                    //    if (MessageTypes.Contains(addUserToUserGroup_MessageType))
                    //        await APISMTPClient.Send(
                    //                 new HTMLEMailBuilder() {

                    //                     From           = Robot.EMail,
                    //                     To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                    //                     Passphrase     = APIPassphrase,
                    //                     Subject        = String.Concat("User '", User.Name, "' was added to user group '", UserGroup.Name.FirstText(), "'" + membership + "."),

                    //                     HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                    //                                                    "User <a href=\"https://", this.ExternalDNSName, this.BasePath, "/users/", User.Id, "\">", User.Name, "</a> has been added to user group <a href=\"https://", ExternalDNSName, BasePath, "/user groups/", UserGroup.Id, "\">", UserGroup.Name.FirstText(), "</a>.<br />",
                    //                                                    HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                    //                     PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                    //                                                    "User '" + User.Name + "' has been added to user group '", UserGroup.Name.FirstText(), "'.\r\n",
                    //                                                    TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                    //                     SecurityLevel  = EMailSecurity.autosign

                    //                 });

                    //    if (MessageTypes.Contains(removeUserFromUserGroup_MessageType))
                    //        await APISMTPClient.Send(
                    //                 new HTMLEMailBuilder() {

                    //                     From           = Robot.EMail,
                    //                     To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                    //                     Passphrase     = APIPassphrase,
                    //                     Subject        = String.Concat("User '", User.Name, "' was removed from user group '", UserGroup.Name.FirstText(), "'."),

                    //                     HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                    //                                                    "User <a href=\"https://", this.ExternalDNSName, this.BasePath, "/users/", User.Id, "\">", User.Name, "</a> has been removed from user group <a href=\"https://", ExternalDNSName, BasePath, "/user groups/", UserGroup.Id, "\">", UserGroup.Name.FirstText(), "</a>.<br />",
                    //                                                    HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                    //                     PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                    //                                                    "User '" + User.Name + "' has been removed from user group '", UserGroup.Name.FirstText(), "'.\r\n",
                    //                                                    TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                    //                     SecurityLevel  = EMailSecurity.autosign

                    //                 });

                    //}

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

            }

        }

        #endregion



        #region (protected) _AddUserToUserGroup     (User, EdgeLabel, UserGroup, SuppressNotifications = false, CurrentUserId  = null)

        protected async Task<AddUserToUserGroupResult> _AddUserToUserGroup(User                     User,
                                                                           User2UserGroupEdgeLabel  EdgeLabel,
                                                                           UserGroup                UserGroup,
                                                                           EventTracking_Id         EventTrackingId         = null,
                                                                           Boolean                  SuppressNotifications   = false,
                                                                           User_Id?                 CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return AddUserToUserGroupResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 UserGroup,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user must not be null!");

            if (User.API != null && User.API != this)
                return AddUserToUserGroupResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 UserGroup,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user is not attached to this API!");

            if (!_Users.ContainsKey(User.Id))
                return AddUserToUserGroupResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 UserGroup,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user '" + User.Id + "' does not exists within this API!");


            //if (EdgeLabel.IsNullOrEmpty())
            //    return AddUserToUserGroupResult.ArgumentError(User,
            //                                                     EdgeLabel,
            //                                                     UserGroup,
            //                                                     eventTrackingId,
            //                                                     nameof(EdgeLabel),
            //                                                     "The given edge label must not be null or empty!");


            if (UserGroup is null)
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(UserGroup),
                                                              "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(UserGroup),
                                                              "The given user group is not attached to this API!");

            if (!_UserGroups.ContainsKey(UserGroup.Id))
                return AddUserToUserGroupResult.ArgumentError(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              nameof(UserGroup),
                                                              "The given user group '" + UserGroup.Id + "' does not exists within this API!");


                        //var updated = false;

                        //if (!User.OutEdges(UserGroup).Any(edgeLabel => edgeLabel == EdgeLabel))
                        //{
                        //    User.AddOutgoingEdge(EdgeLabel, UserGroup);
                        //    updated = true;
                        //}

                        //if (!UserGroup.InEdgeLabels(User).Any(edgeLabel => edgeLabel == EdgeLabel))
                        //{
                        //    UserGroup.AddIncomingEdge(User, EdgeLabel);
                        //    updated = true;
                        //}

                        //if (updated)
                        //    await WriteToDatabaseFile(addUserToUserGroup_MessageType,
                        //                              new JObject(
                        //                                  new JProperty("user",  User.Id.  ToString()),
                        //                                  new JProperty("edge",  EdgeLabel.ToString()),
                        //                                  new JProperty("group", UserGroup.ToString())
                        //                              ),
                        //                              eventTrackingId,
                        //                              CurrentUserId);









            if (!User.     EdgeLabels(UserGroup).Any(edgelabel => edgelabel == EdgeLabel) &&
                !UserGroup.EdgeLabels(User).     Any(edgelabel => edgelabel == EdgeLabel))
            {

                await WriteToDatabaseFile(addUserToUserGroup_MessageType,
                                          new JObject(
                                              new JProperty("user",         User.        Id.ToString()),
                                              new JProperty("edge",         EdgeLabel.      ToString()),
                                              new JProperty("user group", UserGroup.Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);


                var edge = User.AddToUserGroup(EdgeLabel, UserGroup);
                UserGroup.AddUser(edge);


                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            EdgeLabel,
                                            UserGroup,
                                            addUserToUserGroup_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);


                return AddUserToUserGroupResult.Success(User,
                                                           EdgeLabel,
                                                           UserGroup,
                                                           eventTrackingId);

            }

            return AddUserToUserGroupResult.Failed(User,
                                                      EdgeLabel,
                                                      UserGroup,
                                                      eventTrackingId,
                                                      "The given edge already exists!");

        }

        #endregion

        #region AddUserToUserGroup                  (User, EdgeLabel, UserGroup,                                CurrentUserId  = null)

        public async Task<AddUserToUserGroupResult> AddUserToUserGroup(User                     User,
                                                                       User2UserGroupEdgeLabel  EdgeLabel,
                                                                       UserGroup                UserGroup,
                                                                       EventTracking_Id         EventTrackingId   = null,
                                                                       User_Id?                 CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _AddUserToUserGroup(User,
                                                         EdgeLabel,
                                                         UserGroup,
                                                         eventTrackingId,
                                                         SuppressNotifications:  false,
                                                         CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserToUserGroupResult.Failed(User,
                                                               EdgeLabel,
                                                               UserGroup,
                                                               eventTrackingId,
                                                               e);

                    }
                    finally
                    {
                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserToUserGroupResult.Failed(User,
                                                   EdgeLabel,
                                                   UserGroup,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion


        #region (protected) _RemoveUserFromUserGroup(User, EdgeLabel, UserGroup, SuppressNotifications = false, ...)

        protected async Task<RemoveUserFromUserGroupResult> _RemoveUserFromUserGroup(User                     User,
                                                                                     User2UserGroupEdgeLabel  EdgeLabel,
                                                                                     UserGroup                UserGroup,
                                                                                     EventTracking_Id         EventTrackingId         = null,
                                                                                     Boolean                  SuppressNotifications   = false,
                                                                                     User_Id?                 CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user must not be null!");

            if (User.API != null && User.API != this)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user is not attached to this API!");

            if (!_Users.ContainsKey(User.Id))
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user '" + User.Id + "' does not exists within this API!");


            //if (EdgeLabel.IsNullOrEmpty())
            //    return AddUserToUserGroupResult.ArgumentError(User,
            //                                                     EdgeLabel,
            //                                                     UserGroup,
            //                                                     eventTrackingId,
            //                                                     nameof(EdgeLabel),
            //                                                     "The given edge label must not be null or empty!");


            if (UserGroup is null)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group is not attached to this API!");

            if (!_UserGroups.ContainsKey(UserGroup.Id))
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   EdgeLabel,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group '" + UserGroup.Id + "' does not exists within this API!");

            var edges = new HashSet<User2UserGroupEdge>();

            foreach (var edge in User.     Edges(EdgeLabel, UserGroup))
                edges.Add(edge);

            foreach (var edge in UserGroup.Edges(EdgeLabel, User))
                edges.Add(edge);


            foreach (var edge in edges)
            {

                User.     RemoveOutEdge(edge);
                UserGroup.AddUser      (edge.EdgeLabel, User);

                await WriteToDatabaseFile(removeUserFromUserGroup_MessageType,
                                          new JObject(
                                              new JProperty("user",      User.     Id.ToString()),
                                              new JProperty("edge",      EdgeLabel.   ToString()),
                                              new JProperty("userGroup", UserGroup.Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            EdgeLabel,
                                            UserGroup,
                                            removeUserFromUserGroup_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

            }


            return edges.Any()

                       ? RemoveUserFromUserGroupResult.Success(User,
                                                               EdgeLabel,
                                                               UserGroup,
                                                               eventTrackingId)

                       : RemoveUserFromUserGroupResult.Failed(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              "The requested edge was not found!");

        }

        #endregion

        #region RemoveUserFromUserGroup             (User, EdgeLabel, UserGroup,                                CurrentUserId = null)

        public async Task<RemoveUserFromUserGroupResult> RemoveUserFromUserGroup(User                     User,
                                                                                 User2UserGroupEdgeLabel  EdgeLabel,
                                                                                 UserGroup                UserGroup,
                                                                                 EventTracking_Id         EventTrackingId   = null,
                                                                                 User_Id?                 CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _RemoveUserFromUserGroup(User,
                                                              EdgeLabel,
                                                              UserGroup,
                                                              EventTrackingId,
                                                              SuppressNotifications:  false,
                                                              CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return RemoveUserFromUserGroupResult.Failed(User,
                                                                    EdgeLabel,
                                                                    UserGroup,
                                                                    eventTrackingId,
                                                                    e);

                    }
                    finally
                    {
                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return RemoveUserFromUserGroupResult.Failed(User,
                                                        EdgeLabel,
                                                        UserGroup,
                                                        eventTrackingId,
                                                        "Internal locking failed!");

        }

        #endregion


        #region (protected) _RemoveUserFromUserGroup(User,            UserGroup, SuppressNotifications = false, ...)

        protected async Task<RemoveUserFromUserGroupResult> _RemoveUserFromUserGroup(User              User,
                                                                                     UserGroup         UserGroup,
                                                                                     EventTracking_Id  EventTrackingId         = null,
                                                                                     Boolean           SuppressNotifications   = false,
                                                                                     User_Id?          CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user must not be null!");

            if (User.API != null && User.API != this)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user is not attached to this API!");

            if (!_Users.ContainsKey(User.Id))
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(User),
                                                                   "The given user '" + User.Id + "' does not exists within this API!");

            if (UserGroup is null)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group must not be null!");

            if (UserGroup.API != null && UserGroup.API != this)
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group is not attached to this API!");

            if (!_UserGroups.ContainsKey(UserGroup.Id))
                return RemoveUserFromUserGroupResult.ArgumentError(User,
                                                                   UserGroup,
                                                                   eventTrackingId,
                                                                   nameof(UserGroup),
                                                                   "The given user group '" + UserGroup.Id + "' does not exists within this API!");

            var edges = new HashSet<User2UserGroupEdge>();

            foreach (var edge in User.     Edges(UserGroup))
                edges.Add(edge);

            foreach (var edge in UserGroup.Edges(User))
                edges.Add(edge);


            foreach (var edge in edges)
            {

                User.     RemoveOutEdge(edge);
                UserGroup.AddUser      (edge.EdgeLabel, User);

                await WriteToDatabaseFile(removeUserFromUserGroup_MessageType,
                                          new JObject(
                                              new JProperty("user",       User.     Id.       ToString()),
                                              new JProperty("edge",       edge.     EdgeLabel.ToString()),
                                              new JProperty("userGroup",  UserGroup.Id.       ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            edge.EdgeLabel,
                                            UserGroup,
                                            removeUserFromUserGroup_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

            }


            return edges.Any()

                       ? RemoveUserFromUserGroupResult.Success(User,
                                                               UserGroup,
                                                               eventTrackingId)

                       : RemoveUserFromUserGroupResult.Failed(User,
                                                              UserGroup,
                                                              eventTrackingId,
                                                              "No edges had been found!");

        }

        #endregion

        #region RemoveUserFromUserGroup             (User,            UserGroup,                                CurrentUserId = null)

        public async Task<RemoveUserFromUserGroupResult> RemoveUserFromUserGroup(User              User,
                                                                                 UserGroup         UserGroup,
                                                                                 EventTracking_Id  EventTrackingId   = null,
                                                                                 User_Id?          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _RemoveUserFromUserGroup(User,
                                                              UserGroup,
                                                              EventTrackingId,
                                                              SuppressNotifications:  false,
                                                              CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return RemoveUserFromUserGroupResult.Failed(User,
                                                                    UserGroup,
                                                                    eventTrackingId,
                                                                    e);

                    }
                    finally
                    {
                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return RemoveUserFromUserGroupResult.Failed(User,
                                                        UserGroup,
                                                        eventTrackingId,
                                                        "Internal locking failed!");

        }

        #endregion








        #region AddUserToUserGroup(User, Edge, UserGroup, ...)

        public async Task<AddUserToUserGroupResult> AddUserToUserGroup_old(User                     User,
                                                                           User2UserGroupEdgeLabel  EdgeLabel,
                                                                           UserGroup                UserGroup,
                                                                           EventTracking_Id         EventTrackingId   = null,
                                                                           User_Id?                 CurrentUserId     = null)

        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await UserGroupsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        var updated = false;

                        if (!User.     HasEdge(EdgeLabel, UserGroup))
                        {
                            User.AddToUserGroup(EdgeLabel, UserGroup);
                            updated = true;
                        }

                        if (!UserGroup.HasEdge(EdgeLabel, User))
                        {
                            UserGroup.AddUser(EdgeLabel, User);
                            updated = true;
                        }

                        if (updated)
                            await WriteToDatabaseFile(addUserToUserGroup_MessageType,
                                                      new JObject(
                                                          new JProperty("user",  User.Id.  ToString()),
                                                          new JProperty("edge",  EdgeLabel.ToString()),
                                                          new JProperty("group", UserGroup.ToString())
                                                      ),
                                                      eventTrackingId,
                                                      CurrentUserId);

                        return AddUserToUserGroupResult.Success(User,
                                                                EdgeLabel,
                                                                UserGroup,
                                                                eventTrackingId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserToUserGroupResult.Failed(User,
                                                               EdgeLabel,
                                                               UserGroup,
                                                               eventTrackingId,
                                                               e);

                    }
                    finally
                    {
                        try
                        {
                            UserGroupsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserToUserGroupResult.Failed(User,
                                                   EdgeLabel,
                                                   UserGroup,
                                                   eventTrackingId,
                                                   "Internal locking failed!");

        }

        #endregion

        #endregion

        #region Users         <> Organizations

        #region (private) CheckImpersonate(currentOrg, Astronaut, AstronautFound, Member, VetoUsers)

        private Boolean? CheckImpersonate(Organization   currentOrg,
                                          User           Astronaut,
                                          Boolean        AstronautFound,
                                          User           Member,
                                          HashSet<User>  VetoUsers)
        {

            var currentUsers = new HashSet<User>(currentOrg.User2OrganizationEdges.Select(edge => edge.Source));

            AstronautFound |= currentUsers.Contains(Astronaut);

            if (!AstronautFound)
            {

                // Fail early!
                if (currentUsers.Contains(Member))
                    return false;

            }

            else if (currentUsers.Contains(Member))
            {

                // Astronaut and member are on the same level, e.g. both admin of the same organization!
                if (currentUsers.Contains(Astronaut))
                {
                    // Currently this is allowed!
                }

                return !VetoUsers.Contains(Member);

            }

            // Everyone found so far can no longer be impersonated!
            foreach (var currentUser in currentUsers)
                VetoUsers.Add(currentUser);



            var childResults = currentOrg.Organization2OrganizationInEdges.Where(edge => edge.EdgeLabel == Organization2OrganizationEdgeLabel.IsChildOf).
                                          Select(edge => CheckImpersonate(edge.Source, Astronaut, AstronautFound, Member, new HashSet<User>(VetoUsers))).ToArray();

            return childResults.Any(result => result == true);

        }

        #endregion

        #region CanImpersonate(Astronaut, Member, RequestedAccessLevel = Access_Levels.ReadWrite)

        public Boolean CanImpersonate(User           Astronaut,
                                      User           Member,
                                      Access_Levels  RequestedAccessLevel = Access_Levels.ReadWrite)
        {

            if (Astronaut == Member)
                return false;

            var adminOrganization = GetOrganization(AdminOrganizationId);

            if (adminOrganization is null)
                return false;

            // API admins can never be impersonated!
            if (Member.HasAccessToOrganization(Access_Levels.Admin, AdminOrganizationId) && RequestedAccessLevel != Access_Levels.ReadOnly)
                return false;

            // API admins can impersonate everyone!
            if (Astronaut.HasAccessToOrganization(Access_Levels.Admin, AdminOrganizationId))
                return true;

            // An astronaut must be at least an admin of some parent organization!
            if (!Astronaut.User2Organization_OutEdges.Any(edge => edge.EdgeLabel == User2OrganizationEdgeLabel.IsAdmin))
                return false;

            var VetoUsers             = new HashSet<User>();
            var AstronautFound        = false;
            var CurrentOrganizations  = new HashSet<Organization>(Organizations.Where(org => !org.Organization2OrganizationOutEdges.
                                                                                                  Any(edge => edge.EdgeLabel == Organization2OrganizationEdgeLabel.IsChildOf)));

            var childResults = CurrentOrganizations.Select(org => CheckImpersonate(org, Astronaut, AstronautFound, Member, VetoUsers)).ToArray();

            return childResults.Any(result => result == true);


            //do
            //{

            //    var NextOrgs  = new HashSet<Organization>(CurrentOrganizations.SelectMany(org => org.Organization2OrganizationInEdges.Where(edge => edge.EdgeLabel == Organization2OrganizationEdgeTypes.IsChildOf)).Select(edge => edge.Source));

            //    foreach (var currentOrg in NextOrgs)
            //    {

            //        var currentUsers = new HashSet<User>(currentOrg.User2OrganizationEdges.Select(edge => edge.Source));

            //        AstronautFound |= currentUsers.Contains(Astronaut);

            //        if (!AstronautFound)
            //        {

            //            // Fail early!
            //            if (currentUsers.Contains(Member))
            //                return false;

            //        }

            //        else if (currentUsers.Contains(Member))
            //        {

            //            // Astronaut and member are on the same level, e.g. both admin of the same organization!
            //            if (currentUsers.Contains(Astronaut))
            //            {
            //                // Currently this is allowed!
            //            }

            //            return !VetoUsers.Contains(Member);

            //        }

            //        // Everyone found so far can no longer be impersonated!
            //        currentUsers.ForEach(user => VetoUsers.Add(user));

            //    }

            //    CurrentOrganizations.Clear();
            //    NextOrgs.ForEach(org => CurrentOrganizations.Add(org));

            //}
            //while (CurrentOrganizations.Count > 0);

            //// The member was not found within the organizational hierarchy!
            //return false;

        }

        #endregion


        #region (protected internal) SendNotifications      (User, EdgeLabel, Organization, MessageType(s), ...)

        /// <summary>
        /// Send user &lt;-- edge --&gt; organization notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageType">The notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification</param>
        protected internal virtual Task SendNotifications(User                        User,
                                                          User2OrganizationEdgeLabel  EdgeLabel,
                                                          Organization                Organization,
                                                          NotificationMessageType     MessageType,
                                                          EventTracking_Id            EventTrackingId    = null,
                                                          User_Id?                    CurrentUserId      = null)

            => SendNotifications(User,
                                 EdgeLabel,
                                 Organization,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send user &lt;-- edge --&gt; organization notifications.
        /// </summary>
        /// <param name="User">The user.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="Organization">The organization.</param>
        /// <param name="MessageTypes">The notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification.</param>
        protected internal async virtual Task SendNotifications(User                                  User,
                                                                User2OrganizationEdgeLabel            EdgeLabel,
                                                                Organization                          Organization,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id                      EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (User is null)
                throw new ArgumentNullException(nameof(User),          "The given user must not be null or empty!");

            if (Organization is null)
                throw new ArgumentNullException(nameof(Organization),  "The given organization must not be null or empty!");


            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            var messageTypes = messageTypesHash.ToArray();

            if (!DisableNotifications)
            {

                var membership = EdgeLabel switch {
                    User2OrganizationEdgeLabel.IsAdmin  => " as admin",
                    User2OrganizationEdgeLabel.IsMember => " as member",
                    User2OrganizationEdgeLabel.IsGuest  => " as guest",
                    _                                   => ""
                };

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        var AllTelegramNotifications  = Organization.GetNotificationsOf<TelegramNotification>(messageTypes).
                                                             ToSafeHashSet();

                        if (AllTelegramNotifications.SafeAny())
                        {

                            if (MessageTypes.Contains(addUserToOrganization_MessageType))
                                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " was added to organization ", OrganizationHTMLInfo(Organization), membership, "."),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                            if (MessageTypes.Contains(removeUserFromOrganization_MessageType))
                                await TelegramClient.SendTelegrams(String.Concat("User ", UserHTMLInfo(User), " was removed from organization ", OrganizationHTMLInfo(Organization), "."),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    var AllSMSNotifications  = Organization.GetNotificationsOf<SMSNotification>(messageTypes).
                                                    ToSafeHashSet();

                    if (AllSMSNotifications.SafeAny())
                    {

                        if (MessageTypes.Contains(addUserToOrganization_MessageType))
                            SendSMS(String.Concat("User ", UserTextInfo(User), " was added to organization ", OrganizationTextInfo(Organization), membership, "."),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);

                        if (MessageTypes.Contains(removeUserFromOrganization_MessageType))
                            SendSMS(String.Concat("User ", UserTextInfo(User), " was removed from organization ", OrganizationTextInfo(Organization), "."),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications  = Organization.GetNotificationsOf<HTTPSNotification>(messageTypes).
                                                      ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (MessageTypes.Contains(addUserToOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("addUserToOrganization",
                                                                 new JObject(
                                                                     new JProperty("organization", Organization.ToJSON()),
                                                                     new JProperty("user",         User.        ToJSON())
                                                                 )
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                        if (MessageTypes.Contains(removeUserFromOrganization_MessageType))
                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("removeUserFromOrganization",
                                                                 new JObject(
                                                                     new JProperty("organization", Organization.ToJSON()),
                                                                     new JProperty("user",         User.        ToJSON())
                                                                 )
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                try
                {

                    var AllEMailNotifications  = Organization.GetNotificationsOf<EMailNotification>(messageTypes).
                                                              ToSafeHashSet();

                    if (AllEMailNotifications.SafeAny())
                    {

                        if (MessageTypes.Contains(addUserToOrganization_MessageType))
                            await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIPassphrase,
                                         Subject        = String.Concat("User ", UserTextInfo(User), " was added to organization ", Organization.Name.FirstText(), membership, "."),

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserHTMLInfo(User), " has been added to organization ", OrganizationHTMLInfo(Organization), membership, ".<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserTextInfo(User), " has been added to organization ", OrganizationTextInfo(Organization), membership, ".\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                        if (MessageTypes.Contains(removeUserFromOrganization_MessageType))
                            await SMTPClient.Send(
                                     new HTMLEMailBuilder() {

                                         From           = Robot.EMail,
                                         To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                         Passphrase     = APIPassphrase,
                                         Subject        = String.Concat("User ", UserTextInfo(User), " was removed from organization ", Organization.Name.FirstText(), "."),

                                         HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserHTMLInfo(User), " has been removed from organization ", OrganizationHTMLInfo(Organization), ".<br />",
                                                                        HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                        "User ", UserTextInfo(User), " has been removed from organization ", OrganizationTextInfo(Organization), ".\r\n",
                                                                        TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                         SecurityLevel  = EMailSecurity.autosign

                                     });

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

            }

        }

        #endregion


        #region (protected) _AddUserToOrganization     (User, EdgeLabel, Organization, SuppressNotifications = false, CurrentUserId  = null)

        protected async Task<AddUserToOrganizationResult> _AddUserToOrganization(User                        User,
                                                                                 User2OrganizationEdgeLabel  EdgeLabel,
                                                                                 Organization                Organization,
                                                                                 EventTracking_Id            EventTrackingId         = null,
                                                                                 Boolean                     SuppressNotifications   = false,
                                                                                 User_Id?                    CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user must not be null!");

            if (User.API != null && User.API != this)
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user is not attached to this API!");

            if (!_Users.ContainsKey(User.Id))
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(User),
                                                                 "The given user '" + User.Id + "' does not exists within this API!");


            //if (EdgeLabel.IsNullOrEmpty())
            //    return AddUserToOrganizationResult.ArgumentError(User,
            //                                                     EdgeLabel,
            //                                                     Organization,
            //                                                     eventTrackingId,
            //                                                     nameof(EdgeLabel),
            //                                                     "The given edge label must not be null or empty!");


            if (Organization is null)
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(Organization),
                                                                 "The given organization must not be null!");

            if (Organization.API != null && Organization.API != this)
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(Organization),
                                                                 "The given organization is not attached to this API!");

            if (!_Organizations.ContainsKey(Organization.Id))
                return AddUserToOrganizationResult.ArgumentError(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 nameof(Organization),
                                                                 "The given organization '" + Organization.Id + "' does not exists within this API!");


            if (!User.        EdgeLabels                   (Organization).Any(edgelabel => edgelabel == EdgeLabel) &&
                !Organization.User2OrganizationInEdgeLabels(User).        Any(edgelabel => edgelabel == EdgeLabel))
            {

                await WriteToDatabaseFile(addUserToOrganization_MessageType,
                                          new JObject(
                                              new JProperty("user",         User.        Id.ToString()),
                                              new JProperty("edge",         EdgeLabel.      ToString()),
                                              new JProperty("organization", Organization.Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);


                var edge = User.AddOutgoingEdge(EdgeLabel, Organization);
                Organization.AddUser(edge);


                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            EdgeLabel,
                                            Organization,
                                            addUserToOrganization_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);


                return AddUserToOrganizationResult.Success(User,
                                                           EdgeLabel,
                                                           Organization,
                                                           eventTrackingId);

            }

            return AddUserToOrganizationResult.Failed(User,
                                                      EdgeLabel,
                                                      Organization,
                                                      eventTrackingId,
                                                      "The given edge already exists!");

        }

        #endregion

        #region AddUserToOrganization                  (User, EdgeLabel, Organization,                                CurrentUserId  = null)

        public async Task<AddUserToOrganizationResult> AddUserToOrganization(User                        User,
                                                                             User2OrganizationEdgeLabel  EdgeLabel,
                                                                             Organization                Organization,
                                                                             EventTracking_Id            EventTrackingId   = null,
                                                                             User_Id?                    CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _AddUserToOrganization(User,
                                                            EdgeLabel,
                                                            Organization,
                                                            eventTrackingId,
                                                            SuppressNotifications:  false,
                                                            CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return AddUserToOrganizationResult.Failed(User,
                                                                  EdgeLabel,
                                                                  Organization,
                                                                  eventTrackingId,
                                                                  e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return AddUserToOrganizationResult.Failed(User,
                                                      EdgeLabel,
                                                      Organization,
                                                      eventTrackingId,
                                                      "Internal locking failed!");

        }

        #endregion


        #region (protected) _RemoveUserFromOrganization(User, EdgeLabel, Organization, SuppressNotifications = false, ...)

        protected async Task<RemoveUserFromOrganizationResult> _RemoveUserFromOrganization(User                        User,
                                                                                           User2OrganizationEdgeLabel  EdgeLabel,
                                                                                           Organization                Organization,
                                                                                           EventTracking_Id            EventTrackingId         = null,
                                                                                           Boolean                     SuppressNotifications   = false,
                                                                                           User_Id?                    CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user must not be null!");

            if (User.API != null && User.API != this)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user is not attached to this API!");

            if (!_Users.ContainsKey(User.Id))
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user '" + User.Id + "' does not exists within this API!");


            //if (EdgeLabel.IsNullOrEmpty())
            //    return AddUserToOrganizationResult.ArgumentError(User,
            //                                                     EdgeLabel,
            //                                                     Organization,
            //                                                     eventTrackingId,
            //                                                     nameof(EdgeLabel),
            //                                                     "The given edge label must not be null or empty!");


            if (Organization is null)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization must not be null!");

            if (Organization.API != null && Organization.API != this)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization is not attached to this API!");

            if (!_Organizations.ContainsKey(Organization.Id))
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      EdgeLabel,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization '" + Organization.Id + "' does not exists within this API!");

            var edges = new HashSet<User2OrganizationEdge>();

            foreach (var edge in User.Edges(Organization).Where(_edge => _edge.EdgeLabel == EdgeLabel))
                edges.Add(edge);

            foreach (var edge in Organization.User2OrganizationInEdges(User).Where(_edge => _edge.EdgeLabel == EdgeLabel))
                edges.Add(edge);


            foreach (var edge in edges)
            {

                User.        RemoveOutEdge(edge);
                Organization.RemoveUser   (edge.EdgeLabel, User);

                await WriteToDatabaseFile(removeUserFromOrganization_MessageType,
                                          new JObject(
                                              new JProperty("user",         User.        Id.ToString()),
                                              new JProperty("edge",         EdgeLabel.      ToString()),
                                              new JProperty("organization", Organization.Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            EdgeLabel,
                                            Organization,
                                            removeUserFromOrganization_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

            }


            return edges.Any()

                       ? RemoveUserFromOrganizationResult.Success(User,
                                                                  EdgeLabel,
                                                                  Organization,
                                                                  eventTrackingId)

                       : RemoveUserFromOrganizationResult.Failed(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 "The requested edge was not found!");

        }

        #endregion

        #region RemoveUserFromOrganization             (User, EdgeLabel, Organization,                                CurrentUserId = null)

        public async Task<RemoveUserFromOrganizationResult> RemoveUserFromOrganization(User                        User,
                                                                                       User2OrganizationEdgeLabel  EdgeLabel,
                                                                                       Organization                Organization,
                                                                                       EventTracking_Id            EventTrackingId   = null,
                                                                                       User_Id?                    CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _RemoveUserFromOrganization(User,
                                                                 EdgeLabel,
                                                                 Organization,
                                                                 EventTrackingId,
                                                                 SuppressNotifications:  false,
                                                                 CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return RemoveUserFromOrganizationResult.Failed(User,
                                                                       EdgeLabel,
                                                                       Organization,
                                                                       eventTrackingId,
                                                                       e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return RemoveUserFromOrganizationResult.Failed(User,
                                                           EdgeLabel,
                                                           Organization,
                                                           eventTrackingId,
                                                           "Internal locking failed!");

        }

        #endregion


        #region (protected) _RemoveUserFromOrganization(User,            Organization, SuppressNotifications = false, ...)

        protected async Task<RemoveUserFromOrganizationResult> _RemoveUserFromOrganization(User              User,
                                                                                           Organization      Organization,
                                                                                           EventTracking_Id  EventTrackingId         = null,
                                                                                           Boolean           SuppressNotifications   = false,
                                                                                           User_Id?          CurrentUserId           = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (User is null)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user must not be null!");

            if (User.API != null && User.API != this)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user is not attached to this API!");

            if (!_Users.ContainsKey(User.Id))
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(User),
                                                                      "The given user '" + User.Id + "' does not exists within this API!");

            if (Organization is null)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization must not be null!");

            if (Organization.API != null && Organization.API != this)
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization is not attached to this API!");

            if (!_Organizations.ContainsKey(Organization.Id))
                return RemoveUserFromOrganizationResult.ArgumentError(User,
                                                                      Organization,
                                                                      eventTrackingId,
                                                                      nameof(Organization),
                                                                      "The given organization '" + Organization.Id + "' does not exists within this API!");

            var edges = new HashSet<User2OrganizationEdge>();

            foreach (var edge in User.Edges(Organization))
                edges.Add(edge);

            foreach (var edge in Organization.User2OrganizationInEdges(User))
                edges.Add(edge);


            foreach (var edge in edges)
            {

                User.        RemoveOutEdge(edge);
                Organization.RemoveUser   (edge.EdgeLabel, User);

                await WriteToDatabaseFile(removeUserFromOrganization_MessageType,
                                          new JObject(
                                              new JProperty("user",          User.        Id.       ToString()),
                                              new JProperty("edge",          edge.        EdgeLabel.ToString()),
                                              new JProperty("organization",  Organization.Id.       ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                if (!SuppressNotifications)
                    await SendNotifications(User,
                                            edge.EdgeLabel,
                                            Organization,
                                            removeUserFromOrganization_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

            }


            return edges.Any()

                       ? RemoveUserFromOrganizationResult.Success(User,
                                                                  Organization,
                                                                  eventTrackingId)

                       : RemoveUserFromOrganizationResult.Failed(User,
                                                                 Organization,
                                                                 eventTrackingId,
                                                                 "No edges had been found!");

        }

        #endregion

        #region RemoveUserFromOrganization             (User,            Organization,                                CurrentUserId = null)

        public async Task<RemoveUserFromOrganizationResult> RemoveUserFromOrganization(User              User,
                                                                                       Organization      Organization,
                                                                                       EventTracking_Id  EventTrackingId   = null,
                                                                                       User_Id?          CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await UsersSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
                {
                    try
                    {

                        return await _RemoveUserFromOrganization(User,
                                                                 Organization,
                                                                 EventTrackingId,
                                                                 SuppressNotifications:  false,
                                                                 CurrentUserId:          CurrentUserId);

                    }
                    catch (Exception e)
                    {

                        DebugX.LogException(e);

                        return RemoveUserFromOrganizationResult.Failed(User,
                                                                       Organization,
                                                                       eventTrackingId,
                                                                       e);

                    }
                    finally
                    {
                        try
                        {
                            OrganizationsSemaphore.Release();
                        }
                        catch
                        { }

                        try
                        {
                            UsersSemaphore.Release();
                        }
                        catch
                        { }
                    }
                }
                else
                    UsersSemaphore.Release();
            }

            return RemoveUserFromOrganizationResult.Failed(User,
                                                           Organization,
                                                           eventTrackingId,
                                                           "Internal locking failed!");

        }

        #endregion

        #endregion

        #region Organizations <> Organizations

        #region (protected internal) SendNotifications(OrganizationOut, EdgeLabel, OrganizationIn, MessageType, ...)

        /// <summary>
        /// Send organization &lt;-- edge --&gt; organization notifications.
        /// </summary>
        /// <param name="OrganizationOut">The outgoing organization.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="OrganizationIn">The incoming organization.</param>
        /// <param name="MessageType">The notification.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification</param>
        protected internal virtual Task SendNotifications(Organization                        OrganizationOut,
                                                          Organization2OrganizationEdgeLabel  EdgeLabel,
                                                          Organization                        OrganizationIn,
                                                          NotificationMessageType             MessageType,
                                                          EventTracking_Id                    EventTrackingId    = null,
                                                          User_Id?                            CurrentUserId      = null)

            => SendNotifications(OrganizationOut,
                                 EdgeLabel,
                                 OrganizationIn,
                                 new NotificationMessageType[] { MessageType },
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send organization &lt;-- edge --&gt; organization notifications.
        /// </summary>
        /// <param name="OrganizationOut">The outgoing organization.</param>
        /// <param name="EdgeLabel">The edge label.</param>
        /// <param name="OrganizationIn">The incoming organization.</param>
        /// <param name="MessageTypes">The notifications.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification.</param>
        protected internal async virtual Task SendNotifications(Organization                          OrganizationOut,
                                                                Organization2OrganizationEdgeLabel    EdgeLabel,
                                                                Organization                          OrganizationIn,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                EventTracking_Id                      EventTrackingId   = null,
                                                                User_Id?                              CurrentUserId     = null)
        {

            if (OrganizationOut is null)
                throw new ArgumentNullException(nameof(OrganizationOut),  "The given OrganizationOut must not be null or empty!");

            if (OrganizationIn is null)
                throw new ArgumentNullException(nameof(OrganizationIn),   "The given OrganizationIn must not be null or empty!");

            //if (EdgeLabel.IsNullOrEmpty)
            //    throw new ArgumentNullException(nameof(EdgeLabel),        "The given EdgeLabel must not be null or empty!");


            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),   "The given enumeration of message types must not be null or empty!");

            //if (messageTypesHash.Contains(addServiceTicketIfNotExists_MessageType))
            //    messageTypesHash.Add(addServiceTicket_MessageType);

            //if (messageTypesHash.Contains(addOrUpdateServiceTicket_MessageType))
            //    messageTypesHash.Add(OldServiceTicket == null
            //                           ? addServiceTicket_MessageType
            //                           : updateServiceTicket_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        var AllTelegramNotifications  = OrganizationIn. GetNotificationsOf<TelegramNotification>(messageTypes).Concat(
                                                        OrganizationOut.GetNotificationsOf<TelegramNotification>(messageTypes)).
                                                        ToSafeHashSet();

                        if (AllTelegramNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(linkOrganizations_MessageType))
                            {
                                await TelegramClient.SendTelegrams(String.Concat("Organization ", OrganizationHTMLInfo(OrganizationOut), " was linked to organization ", OrganizationHTMLInfo(OrganizationIn), "."),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);
                            }

                            if (messageTypes.Contains(unlinkOrganizations_MessageType))
                            {
                                await TelegramClient.SendTelegrams(String.Concat("Organization ", OrganizationHTMLInfo(OrganizationOut), " was unlinked from organization ", OrganizationHTMLInfo(OrganizationIn), "."),
                                                                   AllTelegramNotifications.Select(TelegramNotification => TelegramNotification.Username),
                                                                   Telegram.Bot.Types.Enums.ParseMode.Html);
                            }

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    var AllSMSNotifications  = OrganizationIn. GetNotificationsOf<SMSNotification>(messageTypes).Concat(
                                               OrganizationOut.GetNotificationsOf<SMSNotification>(messageTypes)).
                                               ToSafeHashSet();

                    if (AllSMSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(linkOrganizations_MessageType))
                        {
                            SendSMS(String.Concat("Organization ", OrganizationTextInfo(OrganizationOut), " was linked to organization ", OrganizationTextInfo(OrganizationIn), "."),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);
                        }

                        if (messageTypes.Contains(unlinkOrganizations_MessageType))
                        {
                            SendSMS(String.Concat("Organization ", OrganizationTextInfo(OrganizationOut), " was unlinked from organization ", OrganizationTextInfo(OrganizationIn), "."),
                                    AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                                    SMSSenderName);
                        }

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications  = OrganizationIn. GetNotificationsOf<HTTPSNotification>(messageTypes).Concat(
                                                 OrganizationOut.GetNotificationsOf<HTTPSNotification>(messageTypes)).
                                                 ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        if (messageTypes.Contains(linkOrganizations_MessageType))
                        {

                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("linkOrganizations",
                                                                 new JObject(
                                                                     new JProperty("organization",       OrganizationOut.      ToJSON()),
                                                                     new JProperty("parentOrganization", OrganizationIn.ToJSON())
                                                                 )
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                        }

                        if (messageTypes.Contains(unlinkOrganizations_MessageType))
                        {

                            await SendHTTPSNotifications(AllHTTPSNotifications,
                                                         new JObject(
                                                             new JProperty("unlinkOrganizations",
                                                                 new JObject(
                                                                     new JProperty("organization",       OrganizationOut.      ToJSON()),
                                                                     new JProperty("parentOrganization", OrganizationIn.ToJSON())
                                                                 )
                                                             ),
                                                             new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                                         ));

                        }

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications  = OrganizationIn. GetNotificationsOf<EMailNotification>(messageTypes).Concat(
                                                     OrganizationOut.GetNotificationsOf<EMailNotification>(messageTypes)).
                                                     ToSafeHashSet();

                        if (AllEMailNotifications.SafeAny())
                        {

                            if (messageTypes.Contains(linkOrganizations_MessageType))
                            {
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIPassphrase,
                                             Subject        = String.Concat("Organization ", OrganizationTextInfo(OrganizationOut), " was linked to organization ", OrganizationTextInfo(OrganizationIn), "."),

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "Organization ", OrganizationHTMLInfo(OrganizationOut), " had been linked to organization ", OrganizationTextInfo(OrganizationIn), ".<br />",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "Organization ", OrganizationTextInfo(OrganizationOut), " had been linked to organization ", OrganizationTextInfo(OrganizationIn), ".\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });
                            }

                            if (messageTypes.Contains(unlinkOrganizations_MessageType))
                            {
                                await SMTPClient.Send(
                                         new HTMLEMailBuilder() {

                                             From           = Robot.EMail,
                                             To             = EMailAddressListBuilder.Create(EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))),
                                             Passphrase     = APIPassphrase,
                                             Subject        = String.Concat("Organization ", OrganizationTextInfo(OrganizationOut), " was unlinked from organization ", OrganizationTextInfo(OrganizationIn), "."),

                                             HTMLText       = String.Concat(HTMLEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "Organization ", OrganizationHTMLInfo(OrganizationOut), " had been unlinked from organization ", OrganizationTextInfo(OrganizationIn), ".<br />",
                                                                            HTMLEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             PlainText      = String.Concat(TextEMailHeader(ExternalDNSName, BasePath, EMailType.Notification),
                                                                            "Organization ", OrganizationTextInfo(OrganizationOut), " had been unlinked from organization ", OrganizationTextInfo(OrganizationIn), ".\r\r\r\r",
                                                                            TextEMailFooter(ExternalDNSName, BasePath, EMailType.Notification)),

                                             SecurityLevel  = EMailSecurity.autosign

                                         });
                            }

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion


        #region (protected) _LinkOrganizations  (OrganizationOut, EdgeLabel, OrganizationIn, EventTrackingId = null, SuppressNotifications = false, ...)

        protected async Task<LinkOrganizationsResult> _LinkOrganizations(Organization                        OrganizationOut,
                                                                         Organization2OrganizationEdgeLabel  EdgeLabel,
                                                                         Organization                        OrganizationIn,
                                                                         EventTracking_Id                    EventTrackingId         = null,
                                                                         Boolean                             SuppressNotifications   = false,
                                                                         User_Id?                            CurrentUserId           = null)
        {

                if (!OrganizationOut.
                        Organization2OrganizationOutEdges.
                        Where(edge => edge.Target    == OrganizationIn).
                        Any  (edge => edge.EdgeLabel == EdgeLabel))
                {

                    var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                    await WriteToDatabaseFile(linkOrganizations_MessageType,
                                              new JObject(
                                                  new JProperty("organizationOut", OrganizationOut.Id.ToString()),
                                                  new JProperty("edge",            EdgeLabel.         ToString()),
                                                  new JProperty("organizationIn",  OrganizationIn. Id.ToString())
                                              ),
                                              EventTrackingId,
                                              CurrentUserId);

                    OrganizationOut.AddOutEdge(EdgeLabel, OrganizationIn);

                    if (!OrganizationIn.
                            Organization2OrganizationInEdges.
                            Where(edge => edge.Source    == OrganizationOut).
                            Any  (edge => edge.EdgeLabel == EdgeLabel))
                    {
                        OrganizationIn.AddInEdge(EdgeLabel, OrganizationOut);
                    }

                    if (!SuppressNotifications)
                        await SendNotifications(OrganizationOut,
                                                EdgeLabel,
                                                OrganizationIn,
                                                linkOrganizations_MessageType,
                                                eventTrackingId,
                                                CurrentUserId);

                    return LinkOrganizationsResult.Success(OrganizationOut,
                                                           EdgeLabel,
                                                           OrganizationIn,
                                                           EventTrackingId);

                }

                return LinkOrganizationsResult.Failed(OrganizationOut,
                                                      EdgeLabel,
                                                      OrganizationIn,
                                                      EventTrackingId,
                                                      "!");

        }

        #endregion

        #region LinkOrganizations               (OrganizationOut, EdgeLabel, OrganizationIn, EventTrackingId = null,                                CurrentUserId = null)

        public async Task<LinkOrganizationsResult> LinkOrganizations(Organization                        OrganizationOut,
                                                                     Organization2OrganizationEdgeLabel  EdgeLabel,
                                                                     Organization                        OrganizationIn,
                                                                     EventTracking_Id                    EventTrackingId   = null,
                                                                     User_Id?                            CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _LinkOrganizations(OrganizationOut,
                                                    EdgeLabel,
                                                    OrganizationIn,
                                                    eventTrackingId,
                                                    SuppressNotifications:  false,
                                                    CurrentUserId:          CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return LinkOrganizationsResult.Failed(OrganizationOut,
                                                          EdgeLabel,
                                                          OrganizationIn,
                                                          eventTrackingId,
                                                          e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return LinkOrganizationsResult.Failed(OrganizationOut,
                                                  EdgeLabel,
                                                  OrganizationIn,
                                                  eventTrackingId,
                                                  "Internal locking failed!");

        }

        #endregion


        #region (protected) _UnlinkOrganizations(OrganizationOut, EdgeLabel, OrganizationIn, SuppressNotifications = false, ...)

        protected async Task<UnlinkOrganizationsResult> _UnlinkOrganizations(Organization                        OrganizationOut,
                                                                             Organization2OrganizationEdgeLabel  EdgeLabel,
                                                                             Organization                        OrganizationIn,
                                                                             EventTracking_Id                    EventTrackingId         = null,
                                                                             Boolean                             SuppressNotifications   = false,
                                                                             User_Id?                            CurrentUserId           = null)
        {

            if (OrganizationOut.
                    Organization2OrganizationOutEdges.
                    Where(edge => edge.Target    == OrganizationIn).
                    Any  (edge => edge.EdgeLabel == EdgeLabel))
            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                await WriteToDatabaseFile(unlinkOrganizations_MessageType,
                                          new JObject(
                                              new JProperty("organizationOut", OrganizationOut.Id.ToString()),
                                              new JProperty("edge",            EdgeLabel.         ToString()),
                                              new JProperty("organizationIn",  OrganizationIn. Id.ToString())
                                          ),
                                          eventTrackingId,
                                          CurrentUserId);

                OrganizationOut.RemoveOutEdges(EdgeLabel, OrganizationIn);

                if (OrganizationIn.
                        Organization2OrganizationInEdges.
                        Where(edge => edge.Source    == OrganizationOut).
                        Any  (edge => edge.EdgeLabel == EdgeLabel))
                {
                    OrganizationIn.RemoveInEdges(EdgeLabel, OrganizationOut);
                }

                if (!SuppressNotifications)
                    await SendNotifications(OrganizationOut,
                                            EdgeLabel,
                                            OrganizationIn,
                                            unlinkOrganizations_MessageType,
                                            eventTrackingId,
                                            CurrentUserId);

                return UnlinkOrganizationsResult.Success(OrganizationOut,
                                                         EdgeLabel,
                                                         OrganizationIn,
                                                         EventTrackingId);

            }

            return UnlinkOrganizationsResult.Failed(OrganizationOut,
                                                    EdgeLabel,
                                                    OrganizationIn,
                                                    EventTrackingId,
                                                    "!");

        }

        #endregion

        #region UnlinkOrganizations             (OrganizationOut, EdgeLabel, OrganizationIn,                                CurrentUserId = null)

        public async Task<UnlinkOrganizationsResult> UnlinkOrganizations(Organization                        OrganizationOut,
                                                                         Organization2OrganizationEdgeLabel  EdgeLabel,
                                                                         Organization                        OrganizationIn,
                                                                         EventTracking_Id                    EventTrackingId   = null,
                                                                         User_Id?                            CurrentUserId     = null)
        {

            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            if (await OrganizationsSemaphore.WaitAsync(SemaphoreSlimTimeout))
            {
                try
                {

                    return await _UnlinkOrganizations(OrganizationOut,
                                                      EdgeLabel,
                                                      OrganizationIn,
                                                      eventTrackingId,
                                                      SuppressNotifications:  false,
                                                      CurrentUserId:          CurrentUserId);

                }
                catch (Exception e)
                {

                    DebugX.LogException(e);

                    return UnlinkOrganizationsResult.Failed(OrganizationOut,
                                                            EdgeLabel,
                                                            OrganizationIn,
                                                            eventTrackingId,
                                                            e);

                }
                finally
                {
                    try
                    {
                        OrganizationsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }

            return UnlinkOrganizationsResult.Failed(OrganizationOut,
                                                    EdgeLabel,
                                                    OrganizationIn,
                                                    eventTrackingId,
                                                    "Internal locking failed!");

        }

        #endregion

        #endregion


        #region ServiceTickets

        #region Data

        protected internal readonly ConcurrentDictionary<ServiceTicket_Id, ServiceTicket> _ServiceTickets;

        /// <summary>
        /// Return an enumeration of all service tickets.
        /// </summary>
        public IEnumerable<ServiceTicket> ServiceTickets
        {
            get
            {
                try
                {
                    ServiceTicketsSemaphore.Wait();
                    return _ServiceTickets.Values.ToArray();
                }
                finally
                {
                    ServiceTicketsSemaphore.Release();
                }

            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(ServiceTicket, MessageType, OldServiceTicket = null, ...)

        protected internal async Task WriteToDatabaseFileAndNotify(ServiceTicket            ServiceTicket,
                                                                   NotificationMessageType  MessageType,
                                                                   ServiceTicket            OldServiceTicket   = null,
                                                                   EventTracking_Id         EventTrackingId    = null,
                                                                   User_Id?                 CurrentUserId      = null)
        {

            if (ServiceTicket is null)
                throw new ArgumentNullException(nameof(ServiceTicket),  "The given service ticket must not be null!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),    "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      ServiceTicket.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(ServiceTicket,
                                    MessageType,
                                    OldServiceTicket,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (ServiceTicket, MessageTypes, OldServiceTicket = null, ...)

        /// <summary>
        /// Send service ticket notifications.
        /// </summary>
        /// <param name="ServiceTicket">The service ticket.</param>
        /// <param name="MessageType">The service ticket notification.</param>
        /// <param name="OldServiceTicket">The old/updated service ticket.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification.</param>
        protected internal virtual Task SendNotifications(ServiceTicket            ServiceTicket,
                                                          NotificationMessageType  MessageType,
                                                          ServiceTicket            OldServiceTicket   = null,
                                                          EventTracking_Id         EventTrackingId    = null,
                                                          User_Id?                 CurrentUserId      = null)

            => SendNotifications(ServiceTicket,
                                 new NotificationMessageType[] { MessageType },
                                 OldServiceTicket,
                                 EventTrackingId,
                                 CurrentUserId);


        /// <summary>
        /// Send service ticket notifications.
        /// </summary>
        /// <param name="ServiceTicket">The service ticket.</param>
        /// <param name="MessageTypes">The service ticket notifications.</param>
        /// <param name="OldServiceTicket">The old/updated service ticket.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking user identification.</param>
        protected internal async virtual Task SendNotifications(ServiceTicket                         ServiceTicket,
                                                                IEnumerable<NotificationMessageType>  MessageTypes,
                                                                ServiceTicket                         OldServiceTicket   = null,
                                                                EventTracking_Id                      EventTrackingId    = null,
                                                                User_Id?                              CurrentUserId      = null)
        {

            if (ServiceTicket is null)
                throw new ArgumentNullException(nameof(ServiceTicket),  "The given service ticket must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),   "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addServiceTicketIfNotExists_MessageType))
                messageTypesHash.Add(addServiceTicket_MessageType);

            if (messageTypesHash.Contains(addOrUpdateServiceTicket_MessageType))
                messageTypesHash.Add(OldServiceTicket == null
                                       ? addServiceTicket_MessageType
                                       : updateServiceTicket_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {

                #region Telegram Notifications

                if (TelegramClient != null)
                {
                    try
                    {

                        var AllTelegramNotifications = ServiceTicket.Author.
                                                                     GetNotificationsOf<EMailNotification>(messageTypes).
                                                                     ToSafeHashSet();

                        if (ServiceTicket.Affected != null)
                        {

                            if (ServiceTicket.Affected.Users.SafeAny())
                            {
                                foreach (var user in ServiceTicket.Affected.Users)
                                    foreach (var notification in user.Message.GetNotificationsOf<EMailNotification>(messageTypes))
                                        AllTelegramNotifications.Add(notification);
                            }

                            if (ServiceTicket.Affected.Organizations.SafeAny())
                            {
                                foreach (var organization in ServiceTicket.Affected.Organizations)
                                    foreach (var notification in organization.Message.GetNotificationsOf<EMailNotification>(messageTypes))
                                        AllTelegramNotifications.Add(notification);
                            }

                        }

                        if (AllTelegramNotifications.SafeAny())
                        {

                            //await TelegramStore.SendTelegrams("ServiceTicket '" + ServiceTicket.Id + "' sent '" + MessageType + "'!",
                            //                                  AllTelegramNotifications.Select(telegramNotification => telegramNotification.Username));

                        }

                    }
                    catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

                #region SMS Notifications

                try
                {

                    var AllSMSNotifications = ServiceTicket.Author.
                                                            GetNotificationsOf<SMSNotification>(messageTypes).
                                                            ToSafeHashSet();

                    if (AllSMSNotifications.SafeAny())
                    {

                        //SendSMS("ServiceTicket '" + ServiceTicket.Id + "' sent '" + MessageType + "'!",
                        //        AllSMSNotifications.Select(smsPhoneNumber => smsPhoneNumber.PhoneNumber.ToString()).ToArray(),
                        //        SMSSenderName);

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region HTTPS Notifications

                try
                {

                    var AllHTTPSNotifications = ServiceTicket.Author.
                                                              GetNotificationsOf<HTTPSNotification>(messageTypes).
                                                              ToSafeHashSet();

                    if (AllHTTPSNotifications.SafeAny())
                    {

                        #region Create JSON...

                        JObject JSONNotification = null;

                        if (messageTypes.Contains(addServiceTicket_MessageType))
                            JSONNotification = new JObject(
                                                   new JProperty("addServiceTicket",
                                                       ServiceTicket.ToJSON()
                                                   ),
                                                   new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                               );

                        else if (messageTypes.Contains(addServiceTicketIfNotExists_MessageType))
                            JSONNotification = new JObject(
                                                   new JProperty("addServiceTicketIfNotExists",
                                                       ServiceTicket.ToJSON()
                                                   ),
                                                   new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                               );

                        else if (messageTypes.Contains(addOrUpdateServiceTicket_MessageType))
                            JSONNotification = new JObject(
                                                   new JProperty("addOrUpdateServiceTicket",
                                                       ServiceTicket.ToJSON()
                                                   ),
                                                   new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                               );

                        else if (messageTypes.Contains(updateServiceTicket_MessageType))
                            JSONNotification = new JObject(
                                                   new JProperty("updateServiceTicket",
                                                       ServiceTicket.ToJSON()
                                                   ),
                                                   new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                               );

                        else if (messageTypes.Contains(removeServiceTicket_MessageType))
                            JSONNotification = new JObject(
                                                   new JProperty("removeServiceTicket",
                                                       ServiceTicket.ToJSON()
                                                   ),
                                                   new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                               );

                        else if (messageTypes.Contains(changeServiceTicketStatus_MessageType))
                            JSONNotification = new JObject(
                                                   new JProperty("changeServiceTicketStatus",
                                                       ServiceTicket.ToJSON()
                                                   ),
                                                   new JProperty("timestamp", Timestamp.Now.ToIso8601())
                                               );

                        #endregion

                        await SendHTTPSNotifications(AllHTTPSNotifications,
                                                     JSONNotification);

                    }

                }
                catch (Exception e)
                {
                    DebugX.LogException(e);
                }

                #endregion

                #region EMailNotifications

                if (SMTPClient != null)
                {
                    try
                    {

                        var AllEMailNotifications = new HashSet<EMailNotification>();

                        // Add author
                        ServiceTicket.Author.GetNotificationsOf<EMailNotification>(messageTypes).
                             ForEach(notificationemail => AllEMailNotifications.Add(notificationemail));

                        // Add device owners

                        if (AllEMailNotifications.SafeAny())
                        {

                            //await APISMTPClient.Send(__ServiceTicketChangedEMailDelegate(ExternalDNSName, Robot.EMail, APIPassphrase)
                            //                         (ServiceTicket,
                            //                          MessageType,
                            //                          MessageTypes,
                            //                          EMailAddressList.Create(AllEMailNotifications.Select(emailnotification => emailnotification.EMailAddress))
                            //                         ));

                        }

                    } catch (Exception e)
                    {
                        DebugX.LogException(e);
                    }
                }

                #endregion

            }

        }

        #endregion


        #region AddServiceTicket           (ServiceTicket,   CurrentUserId = null)

        /// <summary>
        /// Add the given service ticket to the API.
        /// </summary>
        /// <param name="ServiceTicket">A service ticket.</param>
        /// <param name="AfterAddition">A delegate to call after the service ticket was added to the API.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<TServiceTicket> AddServiceTicket<TServiceTicket>(TServiceTicket          ServiceTicket,
                                                                           Action<TServiceTicket>  AfterAddition     = null,
                                                                           EventTracking_Id        EventTrackingId   = null,
                                                                           User_Id?                CurrentUserId     = null)

            where TServiceTicket : ServiceTicket

        {

            if (ServiceTicket is null)
                throw new ArgumentNullException(nameof(ServiceTicket), "The given service ticket must not be null!");

            if (ServiceTicket.API != null && ServiceTicket.API != this)
                throw new ArgumentException("The given service ticket is already attached to another API!", nameof(ServiceTicket));

            try
            {

                await ServiceTicketsSemaphore.WaitAsync();

                if (_ServiceTickets.ContainsKey(ServiceTicket.Id))
                    throw new Exception("ServiceTicket '" + ServiceTicket.Id + "' already exists in this API!");

                await WriteToDatabaseFileAndNotify(ServiceTicket,
                                                   addServiceTicket_MessageType,
                                                   CurrentUserId: CurrentUserId);

                ServiceTicket.API = this;

                _ServiceTickets.AddOrUpdate(ServiceTicket.Id,
                                            id                     => ServiceTicket,
                                            (id, oldServiceTicket) => ServiceTicket);

                AfterAddition?.Invoke(ServiceTicket);

                return ServiceTicket;

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }

        }

        #endregion

        #region AddServiceTicketIfNotExists(ServiceTicket,   CurrentUserId = null)

        /// <summary>
        /// Add the given service ticket to the API.
        /// </summary>
        /// <param name="ServiceTicket">A service ticket.</param>
        /// <param name="WhenNotExisted">A delegate to call when the service ticket did not exist before.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<TServiceTicket> AddServiceTicketIfNotExists<TServiceTicket>(TServiceTicket          ServiceTicket,
                                                                                      Action<TServiceTicket>  WhenNotExisted  = null,
                                                                                      User_Id?                CurrentUserId   = null)

            where TServiceTicket : ServiceTicket

        {

            if (ServiceTicket is null)
                throw new ArgumentNullException(nameof(ServiceTicket), "The given service ticket must not be null!");

            if (ServiceTicket.API != null && ServiceTicket.API != this)
                throw new ArgumentException(nameof(ServiceTicket), "The given service ticket is already attached to another API!");

            try
            {

                await ServiceTicketsSemaphore.WaitAsync();

                if (_ServiceTickets.TryGetValue(ServiceTicket.Id, out ServiceTicket OldServiceTicket))
                    return OldServiceTicket as TServiceTicket;

                await WriteToDatabaseFileAndNotify(ServiceTicket,
                                                   addServiceTicketIfNotExists_MessageType,
                                                   CurrentUserId: CurrentUserId);

                ServiceTicket.API = this;

                _ServiceTickets.AddOrUpdate(ServiceTicket.Id,
                                            id                     => ServiceTicket,
                                            (id, oldServiceTicket) => ServiceTicket);

                WhenNotExisted?.Invoke(ServiceTicket);

                return ServiceTicket;

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }

        }

        #endregion

        #region AddOrUpdateServiceTicket   (ServiceTicket, DisableAnalyzeServiceTicketStatus = false,   CurrentUserId = null)

        /// <summary>
        /// Add or update the given service ticket to/within the API.
        /// </summary>
        /// <param name="ServiceTicket">A service ticket.</param>
        /// <param name="AfterAddOrUpdate">A delegate to call after the service ticket was added to or updated within the API.</param>
        /// <param name="DoNotAnalyzeTheServiceTicketStatus">Do not analyze the service ticket status.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<TServiceTicket> AddOrUpdateServiceTicket<TServiceTicket>(TServiceTicket                          ServiceTicket,
                                                                                   Action<TServiceTicket, TServiceTicket>  AfterAddOrUpdate                     = null,
                                                                                   Boolean                                 DoNotAnalyzeTheServiceTicketStatus   = false,
                                                                                   User_Id?                                CurrentUserId                        = null)

            where TServiceTicket : ServiceTicket

        {

            if (ServiceTicket is null)
                throw new ArgumentNullException(nameof(ServiceTicket), "The given service ticket must not be null!");

            if (ServiceTicket.API != null && ServiceTicket.API != this)
                throw new ArgumentException(nameof(ServiceTicket), "The given service ticket is already attached to another API!");

            ServiceTicket  OldServiceTicket                = null;
            DateTime       Now                             = Timestamp.Now;
            Boolean        FastAnalyzeServiceTicketStatus  = false;

            try
            {

                await ServiceTicketsSemaphore.WaitAsync();

                ServiceTicket.API = this;

                if (_ServiceTickets.TryRemove(ServiceTicket.Id, out OldServiceTicket))
                {

                    ServiceTicket.CopyAllLinkedDataFrom(OldServiceTicket);

                    //// Only run when the admin status changed!
                    //if (!DoNotAnalyzeTheServiceTicketStatus &&
                    //    OldServiceTicket.AdminStatus.Value != ServiceTicketAdminStatusTypes.Monitored &&
                    //    OldServiceTicket.AdminStatus.Value != ServiceTicketAdminStatusTypes.Tracked   &&
                    //   (ServiceTicket.   AdminStatus.Value == ServiceTicketAdminStatusTypes.Monitored ||
                    //    ServiceTicket.   AdminStatus.Value == ServiceTicketAdminStatusTypes.Tracked))
                    //{
                    //    FastAnalyzeServiceTicketStatus = true;
                    //}

                }

                await WriteToDatabaseFileAndNotify(ServiceTicket,
                                                   addOrUpdateServiceTicket_MessageType,
                                                   OldServiceTicket,
                                                   EventTracking_Id.New,
                                                   CurrentUserId);

                _ServiceTickets.AddOrUpdate(ServiceTicket.Id,
                                            id                     => ServiceTicket,
                                            (id, oldServiceTicket) => ServiceTicket);

                AfterAddOrUpdate?.Invoke(OldServiceTicket as TServiceTicket,
                                         ServiceTicket);

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }


            #region Analyze service ticket status...

            //// AnalyzeServiceTicketStatus(ServiceTicket) might enter this method again!
            //if (FastAnalyzeServiceTicketStatus)
            //    await AnalyzeServiceTicketStatus(ServiceTicket);

            #endregion

            #region Call OnServiceTicket(Admin)StatusChanged events...

            if (OldServiceTicket != null)
            {

                if (OldServiceTicket.Status != ServiceTicket.Status)
                    OnServiceTicketStatusChanged?.Invoke(Now,
                                                         ServiceTicket.Id,
                                                         OldServiceTicket.Status,
                                                         ServiceTicket.Status);

            }

            #endregion

            return ServiceTicket;

        }

        #endregion

        #region UpdateServiceTicket        (ServiceTicket, DisableAnalyzeServiceTicketStatus = false,   CurrentUserId = null)

        /// <summary>
        /// Update the given service ticket within the API.
        /// </summary>
        /// <param name="ServiceTicket">A service ticket.</param>
        /// <param name="AfterUpdate">A delegate to call after the service ticket was updated within the API.</param>
        /// <param name="DoNotAnalyzeTheServiceTicketStatus">Do not analyze the service ticket status.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<TServiceTicket> UpdateServiceTicket<TServiceTicket>(TServiceTicket          ServiceTicket,
                                                                              Action<TServiceTicket>  AfterUpdate                          = null,
                                                                              Boolean                 DoNotAnalyzeTheServiceTicketStatus   = false,
                                                                              User_Id?                CurrentUserId                        = null)

            where TServiceTicket : ServiceTicket

        {

            if (ServiceTicket is null)
                throw new ArgumentNullException(nameof(ServiceTicket), "The given service ticket must not be null!");

            if (ServiceTicket.API != null && ServiceTicket.API != this)
                throw new ArgumentException(nameof(ServiceTicket), "The given service ticket is already attached to another API!");

            ServiceTicket OldServiceTicket;
            DateTime       Now = Timestamp.Now;

            try
            {

                await ServiceTicketsSemaphore.WaitAsync();

                if (!_ServiceTickets.TryGetValue(ServiceTicket.Id, out OldServiceTicket))
                    throw new Exception("ServiceTicket '" + ServiceTicket.Id + "' does not exists in this API!");

                await WriteToDatabaseFileAndNotify(ServiceTicket,
                                                   updateServiceTicket_MessageType,
                                                   OldServiceTicket,
                                                   EventTracking_Id.New,
                                                   CurrentUserId);

                //if (ServiceTicket.API == null)
                    ServiceTicket.API = this;

                _ServiceTickets.TryRemove(OldServiceTicket.Id, out ServiceTicket removedServiceTicket);
                ServiceTicket.CopyAllLinkedDataFrom(OldServiceTicket);

                _ServiceTickets.AddOrUpdate(ServiceTicket.Id,
                                            id                     => ServiceTicket,
                                            (id, oldServiceTicket) => ServiceTicket);

                AfterUpdate?.Invoke(ServiceTicket);

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }


            #region Analyze service ticket status...

            //// Only run when the admin status changed!
            //// AnalyzeServiceTicketStatus(ServiceTicket) might enter this method again!
            //if (!DoNotAnalyzeTheServiceTicketStatus &&
            //    OldServiceTicket.AdminStatus.Value != ServiceTicketAdminStatusTypes.Monitored &&
            //    OldServiceTicket.AdminStatus.Value != ServiceTicketAdminStatusTypes.Tracked   &&
            //   (ServiceTicket.   AdminStatus.Value == ServiceTicketAdminStatusTypes.Monitored ||
            //    ServiceTicket.   AdminStatus.Value == ServiceTicketAdminStatusTypes.Tracked))
            //{
            //    await AnalyzeServiceTicketStatus(ServiceTicket);
            //}

            #endregion

            #region Call OnServiceTicket(Admin)StatusChanged events...

            if (OldServiceTicket.Status != ServiceTicket.Status)
                OnServiceTicketStatusChanged?.Invoke(Now,
                                                     ServiceTicket.Id,
                                                     OldServiceTicket.Status,
                                                     ServiceTicket.Status);

            #endregion


            return ServiceTicket;

        }

        #endregion

        #region UpdateServiceTicket        (ServiceTicketId, UpdateDelegate, DoNotAnalyzeTheServiceTicketStatus = false, ...)

        /// <summary>
        /// Update the given service ticket.
        /// </summary>
        /// <param name="ServiceTicketId">A service ticket identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given service ticket.</param>
        /// <param name="AfterUpdate">A delegate to call after the service ticket was updated within the API.</param>
        /// <param name="DoNotAnalyzeTheServiceTicketStatus">Do not analyze the service ticket status.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<TServiceTicket> UpdateServiceTicket<TServiceTicket>(ServiceTicket_Id                      ServiceTicketId,
                                                                              Func<TServiceTicket, TServiceTicket>  UpdateDelegate,
                                                                              Action<TServiceTicket>                AfterUpdate                          = null,
                                                                              Boolean                               DoNotAnalyzeTheServiceTicketStatus   = false,
                                                                              User_Id?                              CurrentUserId                        = null)
            where TServiceTicket : ServiceTicket
        {

            TServiceTicket  castedOldServiceTicket;
            TServiceTicket  ServiceTicket;
            DateTime        Now = Timestamp.Now;

            try
            {

                if (UpdateDelegate == null)
                    throw new Exception("The given update delegate must not be null!");

                await ServiceTicketsSemaphore.WaitAsync();

                if (!_ServiceTickets.TryGetValue(ServiceTicketId, out ServiceTicket OldServiceTicket))
                    throw new Exception("ServiceTicket '" + ServiceTicketId + "' does not exists in this API!");

                castedOldServiceTicket = OldServiceTicket as TServiceTicket;

                if (castedOldServiceTicket == null)
                    throw new Exception("ServiceTicket '" + ServiceTicketId + "' is not of type TServiceTicket!");

                ServiceTicket = UpdateDelegate(castedOldServiceTicket);
                ServiceTicket.API = this;

                await WriteToDatabaseFileAndNotify(ServiceTicket,
                                                   updateServiceTicket_MessageType,
                                                   castedOldServiceTicket,
                                                   EventTracking_Id.New,
                                                   CurrentUserId);

                _ServiceTickets.TryRemove(OldServiceTicket.Id, out ServiceTicket RemovedServiceTicket);
                //OldServiceTicket.CopyAllEdgesTo(ServiceTicket);
                _ServiceTickets.AddOrUpdate(ServiceTicket.Id,
                                            id                     => ServiceTicket,
                                            (id, oldServiceTicket) => ServiceTicket);

                AfterUpdate?.Invoke(ServiceTicket);

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }


            #region Analyze service ticket status...

            //// Only run when the admin status changed!
            //// AnalyzeServiceTicketStatus(ServiceTicket) might enter this method again!
            //if (!DoNotAnalyzeTheServiceTicketStatus &&
            //    OldServiceTicket.AdminStatus.Value != ServiceTicketAdminStatusTypes.Monitored &&
            //    OldServiceTicket.AdminStatus.Value != ServiceTicketAdminStatusTypes.Tracked   &&
            //   (ServiceTicket.   AdminStatus.Value == ServiceTicketAdminStatusTypes.Monitored ||
            //    ServiceTicket.   AdminStatus.Value == ServiceTicketAdminStatusTypes.Tracked))
            //{
            //    await AnalyzeServiceTicketStatus(ServiceTicket);
            //}

            #endregion

            #region Call OnServiceTicket(Admin)StatusChanged events...

            if (castedOldServiceTicket.Status != ServiceTicket.Status)
                OnServiceTicketStatusChanged?.Invoke(Now,
                                                     ServiceTicket.Id,
                                                     castedOldServiceTicket.Status,
                                                     ServiceTicket.Status);

            #endregion


            return ServiceTicket;

        }

        #endregion

        #region RemoveServiceTicket        (ServiceTicketId, ...)

        /// <summary>
        /// Remove the given service ticket from this API.
        /// </summary>
        /// <param name="ServiceTicketId">The unique identification of the service ticket.</param>
        /// <param name="AfterRemoval">A delegate to call after the service ticket was removed from the API.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<ServiceTicket> RemoveServiceTicket(ServiceTicket_Id        ServiceTicketId,
                                                              Action<ServiceTicket>  AfterRemoval    = null,
                                                              User_Id?                CurrentUserId   = null)
        {

            try
            {

                await ServiceTicketsSemaphore.WaitAsync();

                if (_ServiceTickets.TryGetValue(ServiceTicketId, out ServiceTicket ServiceTicket))
                {

                    await WriteToDatabaseFileAndNotify(ServiceTicket,
                                                       removeServiceTicket_MessageType,
                                                       CurrentUserId: CurrentUserId);

                    _ServiceTickets.TryRemove(ServiceTicketId, out ServiceTicket RemovedServiceTicket);

                    ServiceTicket.API = null;

                    AfterRemoval?.Invoke(ServiceTicket);

                    return ServiceTicket;

                }

                return null;

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }

        }

        #endregion


        #region ServiceTicketExists        (ServiceTicketId)

        /// <summary>
        /// Whether this API contains a service ticket having the given unique identification.
        /// </summary>
        /// <param name="ServiceTicketId">The unique identification of the service ticket.</param>
        public Boolean ServiceTicketExists(ServiceTicket_Id ServiceTicketId)
        {

            try
            {

                ServiceTicketsSemaphore.Wait();

                return _ServiceTickets.ContainsKey(ServiceTicketId);

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }

        }

        #endregion

        #region GetServiceTicket           (ServiceTicketId)

        /// <summary>
        /// Get the service ticket having the given unique identification.
        /// </summary>
        /// <param name="ServiceTicketId">The unique identification of the service ticket.</param>
        public async Task<ServiceTicket> GetServiceTicket(ServiceTicket_Id  ServiceTicketId)
        {

            try
            {

                await ServiceTicketsSemaphore.WaitAsync();

                if (_ServiceTickets.TryGetValue(ServiceTicketId, out ServiceTicket serviceTicket))
                    return serviceTicket;

                return null;

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }

        }

        #endregion

        #region TryGetServiceTicket        (ServiceTicketId, out ServiceTicket)

        /// <summary>
        /// Try to get the service ticket having the given unique identification.
        /// </summary>
        /// <param name="ServiceTicketId">The unique identification of the service ticket.</param>
        /// <param name="ServiceTicket">The service ticket.</param>
        public Boolean TryGetServiceTicket<TServiceTicket>(ServiceTicket_Id    ServiceTicketId,
                                                           out TServiceTicket  ServiceTicket)

            where TServiceTicket : ServiceTicket

        {

            try
            {

                ServiceTicketsSemaphore.Wait();

                if (_ServiceTickets.TryGetValue(ServiceTicketId, out ServiceTicket serviceTicket))
                {
                    ServiceTicket = serviceTicket as TServiceTicket;
                    return ServiceTicket != null;
                }

                ServiceTicket = null;
                return false;

            }
            finally
            {
                ServiceTicketsSemaphore.Release();
            }

        }

        #endregion


        /// <summary>
        /// A delegate used whenever a service ticket status changed.
        /// </summary>
        /// <param name="Timestamp">The timestamp of the event.</param>
        /// <param name="ServiceTicketId">The unique service ticket identification.</param>
        /// <param name="OldStatus">The old status.</param>
        /// <param name="NewStatus">The new status.</param>
        public delegate Task ServiceTicketStatusChangedDelegate     (DateTime                               Timestamp,
                                                                     ServiceTicket_Id                       ServiceTicketId,
                                                                     Timestamped<ServiceTicketStatusTypes>  OldStatus,
                                                                     Timestamped<ServiceTicketStatusTypes>  NewStatus);

        /// <summary>
        /// An event sent whenever a service ticket status changed.
        /// </summary>
        public event ServiceTicketStatusChangedDelegate       OnServiceTicketStatusChanged;

        #endregion

        #region NewsPostings

        #region Data

        /// <summary>
        /// An enumeration of all news postings.
        /// </summary>
        protected internal readonly Dictionary<NewsPosting_Id, NewsPosting> _NewsPostings;

        /// <summary>
        /// An enumeration of all news postings.
        /// </summary>
        public IEnumerable<NewsPosting> NewsPostings
        {
            get
            {
                try
                {
                    return NewsPostingsSemaphore.Wait(SemaphoreSlimTimeout)
                               ? _NewsPostings.Values.ToArray()
                               : new NewsPosting[0];
                }
                finally
                {
                    try
                    {
                        NewsPostingsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(NewsPosting, MessageType,  OldNewsPosting = null, ...)

        /// <summary>
        /// Write the given news posting to the database and send out notifications.
        /// </summary>
        /// <param name="NewsPosting">The news posting.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldNewsPosting">The old/updated news posting.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(NewsPosting              NewsPosting,
                                                          NotificationMessageType  MessageType,
                                                          NewsPosting              OldNewsPosting    = null,
                                                          EventTracking_Id         EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting),  "The given news posting must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      NewsPosting.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(NewsPosting,
                                    MessageType,
                                    OldNewsPosting,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (NewsPosting, MessageTypes, OldNewsPosting = null, ...)

        /// <summary>
        /// Send news posting notifications.
        /// </summary>
        /// <param name="NewsPosting">The news posting.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldNewsPosting">The old/updated news posting.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(NewsPosting              NewsPosting,
                                               NotificationMessageType  MessageType,
                                               NewsPosting              OldNewsPosting    = null,
                                               EventTracking_Id         EventTrackingId   = null,
                                               User_Id?                 CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting),  "The given news posting must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(NewsPosting,
                                    new NotificationMessageType[] { MessageType },
                                    OldNewsPosting,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send news posting notifications.
        /// </summary>
        /// <param name="NewsPosting">The news posting.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldNewsPosting">The old/updated news posting.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(NewsPosting                           NewsPosting,
                                               IEnumerable<NotificationMessageType>  MessageTypes,
                                               NewsPosting                           OldNewsPosting    = null,
                                               EventTracking_Id                      EventTrackingId   = null,
                                               User_Id?                              CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting),   "The given news posting must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldNewsPosting == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected internal) GetNewsPostingSerializator(Request, User)

        protected internal NewsPostingToJSONDelegate GetNewsPostingSerializator(HTTPRequest  Request,
                                                                       User         User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (newsPosting,
                            embedded,
                            ExpandTags,
                            ExpandAuthorId,
                            includeCryptoHash)

                            => newsPosting.ToJSON(embedded,
                                                  ExpandTags,
                                                  ExpandAuthorId,
                                                  includeCryptoHash);

            }

        }

        #endregion


        #region AddNewsPosting           (NewsPosting, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a news posting was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the news posting was added.</param>
        /// <param name="NewsPosting">The added news posting.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnNewsPostingAddedDelegate(DateTime          Timestamp,
                                                        NewsPosting       NewsPosting,
                                                        EventTracking_Id  EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a news posting was added.
        /// </summary>
        public event OnNewsPostingAddedDelegate OnNewsPostingAdded;


        #region (protected internal) _AddNewsPosting(NewsPosting,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given news posting to the API.
        /// </summary>
        /// <param name="NewsPosting">A new news posting to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the news posting had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<NewsPosting> _AddNewsPosting(NewsPosting                            NewsPosting,
                                                          Action<NewsPosting, EventTracking_Id>  OnAdded           = null,
                                                          EventTracking_Id                       EventTrackingId   = null,
                                                          User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting),
                                                "The given news posting must not be null!");

            if (NewsPosting.API != null && NewsPosting.API != this)
                throw new ArgumentException    ("The given news posting is already attached to another API!",
                                                nameof(NewsPosting));

            if (_NewsPostings.ContainsKey(NewsPosting.Id))
                throw new ArgumentException    ("User group identification '" + NewsPosting.Id + "' already exists!",
                                                nameof(NewsPosting));

            if (NewsPosting.Id.Length < MinNewsPostingIdLength)
                throw new ArgumentException    ("User group identification '" + NewsPosting.Id + "' is too short!",
                                                nameof(NewsPosting));

            NewsPosting.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addNewsPosting_MessageType,
                                      NewsPosting.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _NewsPostings.Add(NewsPosting.Id, NewsPosting);


            var OnNewsPostingAddedLocal = OnNewsPostingAdded;
            if (OnNewsPostingAddedLocal != null)
                await OnNewsPostingAddedLocal?.Invoke(Timestamp.Now,
                                                      NewsPosting,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(NewsPosting,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(NewsPosting,
                            eventTrackingId);

            return NewsPosting;

        }

        #endregion

        #region AddNewsPosting             (NewsPosting,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given news posting.
        /// </summary>
        /// <param name="NewsPosting">A new news posting.</param>
        /// <param name="OnAdded">A delegate run whenever the news posting had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<NewsPosting> AddNewsPosting(NewsPosting                            NewsPosting,
                                                      Action<NewsPosting, EventTracking_Id>  OnAdded           = null,
                                                      EventTracking_Id                       EventTrackingId   = null,
                                                      User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting), "The given news posting must not be null!");

            try
            {

                return (await NewsPostingsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddNewsPosting(NewsPosting,
                                                    OnAdded,
                                                    EventTrackingId,
                                                    CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddNewsPostingIfNotExists(NewsPosting, OnAdded = null,                   CurrentUserId = null)

        #region (protected internal) _AddNewsPostingIfNotExists(NewsPosting,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given news posting to the API.
        /// </summary>
        /// <param name="NewsPosting">A new news posting to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the news posting had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<NewsPosting> _AddNewsPostingIfNotExists(NewsPosting                            NewsPosting,
                                                                     Action<NewsPosting, EventTracking_Id>  OnAdded           = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting),
                                                "The given news posting must not be null!");

            if (NewsPosting.API != null && NewsPosting.API != this)
                throw new ArgumentException    ("The given news posting is already attached to another API!",
                                                nameof(NewsPosting));

            if (_NewsPostings.ContainsKey(NewsPosting.Id))
                return _NewsPostings[NewsPosting.Id];

            if (NewsPosting.Id.Length < MinNewsPostingIdLength)
                throw new ArgumentException    ("User group identification '" + NewsPosting.Id + "' is too short!",
                                                nameof(NewsPosting));

            NewsPosting.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addNewsPostingIfNotExists_MessageType,
                                      NewsPosting.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _NewsPostings.Add(NewsPosting.Id, NewsPosting);

            var OnNewsPostingAddedLocal = OnNewsPostingAdded;
            if (OnNewsPostingAddedLocal != null)
                await OnNewsPostingAddedLocal?.Invoke(Timestamp.Now,
                                                      NewsPosting,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(NewsPosting,
                                    addNewsPostingIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(NewsPosting,
                            eventTrackingId);

            return NewsPosting;

        }

        #endregion

        #region AddNewsPostingIfNotExists             (NewsPosting,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given news posting.
        /// </summary>
        /// <param name="NewsPosting">A new news posting.</param>
        /// <param name="OnAdded">A delegate run whenever the news posting had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<NewsPosting> AddNewsPostingIfNotExists(NewsPosting                            NewsPosting,
                                                                 Action<NewsPosting, EventTracking_Id>  OnAdded           = null,
                                                                 EventTracking_Id                       EventTrackingId   = null,
                                                                 User_Id?                               CurrentUserId     = null)
        {

            try
            {

                return (await NewsPostingsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddNewsPostingIfNotExists(NewsPosting,
                                                             OnAdded,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrUpdateNewsPosting   (NewsPosting, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateNewsPosting   (NewsPosting,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given news posting to/within the API.
        /// </summary>
        /// <param name="NewsPosting">A news posting.</param>
        /// <param name="OnAdded">A delegate run whenever the news posting had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the news posting had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news posting identification initiating this command/request.</param>
        protected internal async Task<NewsPosting> _AddOrUpdateNewsPosting(NewsPosting                            NewsPosting,
                                                                  Action<NewsPosting, EventTracking_Id>  OnAdded           = null,
                                                                  Action<NewsPosting, EventTracking_Id>  OnUpdated         = null,
                                                                  EventTracking_Id                       EventTrackingId   = null,
                                                                  User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting),
                                                "The given news posting must not be null!");

            if (NewsPosting.API != null && NewsPosting.API != this)
                throw new ArgumentException    ("The given news posting is already attached to another API!",
                                                nameof(NewsPosting));

            if (_NewsPostings.ContainsKey(NewsPosting.Id))
                return _NewsPostings[NewsPosting.Id];

            if (NewsPosting.Id.Length < MinNewsPostingIdLength)
                throw new ArgumentException    ("NewsPosting identification '" + NewsPosting.Id + "' is too short!",
                                                nameof(NewsPosting));

            NewsPosting.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrUpdateNewsPosting_MessageType,
                                      NewsPosting.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_NewsPostings.TryGetValue(NewsPosting.Id, out NewsPosting OldNewsPosting))
            {
                _NewsPostings.Remove(OldNewsPosting.Id);
                NewsPosting.CopyAllLinkedDataFrom(OldNewsPosting);
            }

            _NewsPostings.Add(NewsPosting.Id, NewsPosting);

            if (OldNewsPosting != null)
            {

                var OnNewsPostingUpdatedLocal = OnNewsPostingUpdated;
                if (OnNewsPostingUpdatedLocal != null)
                    await OnNewsPostingUpdatedLocal?.Invoke(Timestamp.Now,
                                                            NewsPosting,
                                                            OldNewsPosting,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(NewsPosting,
                                        updateNewsPosting_MessageType,
                                        OldNewsPosting,
                                        eventTrackingId,
                                        CurrentUserId);

                OnUpdated?.Invoke(NewsPosting,
                                  eventTrackingId);

            }
            else
            {

                var OnNewsPostingAddedLocal = OnNewsPostingAdded;
                if (OnNewsPostingAddedLocal != null)
                    await OnNewsPostingAddedLocal?.Invoke(Timestamp.Now,
                                                          NewsPosting,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(NewsPosting,
                                        addNewsPosting_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnAdded?.Invoke(NewsPosting,
                                eventTrackingId);

            }

            return NewsPosting;

        }

        #endregion

        #region AddOrUpdateNewsPosting   (NewsPosting,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given news posting to/within the API.
        /// </summary>
        /// <param name="NewsPosting">A news posting.</param>
        /// <param name="OnAdded">A delegate run whenever the news posting had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the news posting had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news posting identification initiating this command/request.</param>
        public async Task<NewsPosting> AddOrUpdateNewsPosting(NewsPosting                            NewsPosting,
                                                              Action<NewsPosting, EventTracking_Id>  OnAdded           = null,
                                                              Action<NewsPosting, EventTracking_Id>  OnUpdated         = null,
                                                              EventTracking_Id                       EventTrackingId   = null,
                                                              User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting), "The given news posting must not be null!");

            try
            {

                return (await NewsPostingsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddOrUpdateNewsPosting(NewsPosting,
                                                            OnAdded,
                                                            OnUpdated,
                                                            EventTrackingId,
                                                            CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region UpdateNewsPosting        (NewsPosting,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a news posting was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the news posting was updated.</param>
        /// <param name="NewsPosting">The updated news posting.</param>
        /// <param name="OldNewsPosting">The old news posting.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking news posting identification</param>
        public delegate Task OnNewsPostingUpdatedDelegate(DateTime          Timestamp,
                                                          NewsPosting       NewsPosting,
                                                          NewsPosting       OldNewsPosting,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a news posting was updated.
        /// </summary>
        public event OnNewsPostingUpdatedDelegate OnNewsPostingUpdated;


        #region (protected internal) _UpdateNewsPosting(NewsPosting, OnUpdated = null, ...)

        /// <summary>
        /// Update the given news posting to/within the API.
        /// </summary>
        /// <param name="NewsPosting">A news posting.</param>
        /// <param name="OnUpdated">A delegate run whenever the news posting had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news posting identification initiating this command/request.</param>
        protected internal async Task<NewsPosting> _UpdateNewsPosting(NewsPosting                            NewsPosting,
                                                             Action<NewsPosting, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting),
                                                "The given news posting must not be null!");

            if (NewsPosting.API != null && NewsPosting.API != this)
                throw new ArgumentException    ("The given news posting is already attached to another API!",
                                                nameof(NewsPosting));

            if (!_NewsPostings.TryGetValue(NewsPosting.Id, out NewsPosting OldNewsPosting))
                throw new ArgumentException    ("The given news posting '" + NewsPosting.Id + "' does not exists in this API!",
                                                nameof(NewsPosting));

            NewsPosting.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateNewsPosting_MessageType,
                                      NewsPosting.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _NewsPostings.Remove(OldNewsPosting.Id);
            NewsPosting.CopyAllLinkedDataFrom(OldNewsPosting);


            var OnNewsPostingUpdatedLocal = OnNewsPostingUpdated;
            if (OnNewsPostingUpdatedLocal != null)
                await OnNewsPostingUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NewsPosting,
                                                        OldNewsPosting,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NewsPosting,
                                    updateNewsPosting_MessageType,
                                    OldNewsPosting,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewsPosting,
                              eventTrackingId);

            return NewsPosting;

        }

        #endregion

        #region UpdateNewsPosting             (NewsPosting, OnUpdated = null, ...)

        /// <summary>
        /// Update the given news posting to/within the API.
        /// </summary>
        /// <param name="NewsPosting">A news posting.</param>
        /// <param name="OnUpdated">A delegate run whenever the news posting had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news posting identification initiating this command/request.</param>
        public async Task<NewsPosting> UpdateNewsPosting(NewsPosting                            NewsPosting,
                                                         Action<NewsPosting, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting), "The given news posting must not be null!");

            try
            {

                return (await NewsPostingsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateNewsPosting(NewsPosting,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion


        #region (protected internal) _UpdateNewsPosting(NewsPostingId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given news posting.
        /// </summary>
        /// <param name="NewsPostingId">An news posting identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given news posting.</param>
        /// <param name="OnUpdated">A delegate run whenever the news posting had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news posting identification initiating this command/request.</param>
        protected internal async Task<NewsPosting> _UpdateNewsPosting(NewsPosting_Id                         NewsPostingId,
                                                             Action<NewsPosting.Builder>            UpdateDelegate,
                                                             Action<NewsPosting, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (NewsPostingId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(NewsPostingId),
                                                "The given news posting identification must not be null or empty!");

            if (UpdateDelegate == null)
                throw new ArgumentNullException(nameof(UpdateDelegate),
                                                "The given update delegate must not be null!");

            if (!_NewsPostings.TryGetValue(NewsPostingId, out NewsPosting OldNewsPosting))
                throw new ArgumentException    ("The given news posting '" + NewsPostingId + "' does not exists in this API!",
                                                nameof(NewsPostingId));

            var Builder = OldNewsPosting.ToBuilder();
            UpdateDelegate(Builder);
            var NewNewsPosting = Builder.ToImmutable;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateNewsPosting_MessageType,
                                      NewNewsPosting.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _NewsPostings.Remove(OldNewsPosting.Id);
            NewNewsPosting.CopyAllLinkedDataFrom(OldNewsPosting);


            var OnNewsPostingUpdatedLocal = OnNewsPostingUpdated;
            if (OnNewsPostingUpdatedLocal != null)
                await OnNewsPostingUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NewNewsPosting,
                                                        OldNewsPosting,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NewNewsPosting,
                                    updateNewsPosting_MessageType,
                                    OldNewsPosting,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewNewsPosting,
                              eventTrackingId);

            return NewNewsPosting;

        }

        #endregion

        #region UpdateNewsPosting             (NewsPostingId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given news posting.
        /// </summary>
        /// <param name="NewsPostingId">An news posting identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given news posting.</param>
        /// <param name="OnUpdated">A delegate run whenever the news posting had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news posting identification initiating this command/request.</param>
        public async Task<NewsPosting> UpdateNewsPosting(NewsPosting_Id                         NewsPostingId,
                                                         Action<NewsPosting.Builder>            UpdateDelegate,
                                                         Action<NewsPosting, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NewsPostingId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(NewsPostingId), "The given news posting identification must not be null or empty!");

            try
            {

                return (await NewsPostingsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateNewsPosting(NewsPostingId,
                                                       UpdateDelegate,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion


        #region NewsPostingExists(NewsPostingId)

        /// <summary>
        /// Determines whether the given news posting identification exists within this API.
        /// </summary>
        /// <param name="NewsPostingId">The unique identification of an news posting.</param>
        protected internal Boolean _NewsPostingExists(NewsPosting_Id NewsPostingId)

            => !NewsPostingId.IsNullOrEmpty && _NewsPostings.ContainsKey(NewsPostingId);


        /// <summary>
        /// Determines whether the given news posting identification exists within this API.
        /// </summary>
        /// <param name="NewsPostingId">The unique identification of an news posting.</param>
        public Boolean NewsPostingExists(NewsPosting_Id NewsPostingId)
        {

            try
            {

                if (NewsPostingsSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _NewsPostingExists(NewsPostingId))
                {
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

            return false;

        }

        #endregion

        #region GetNewsPosting   (NewsPostingId)

        /// <summary>
        /// Get the news posting having the given unique identification.
        /// </summary>
        /// <param name="NewsPostingId">The unique identification of an news posting.</param>
        protected internal NewsPosting _GetNewsPosting(NewsPosting_Id NewsPostingId)
        {

            if (!NewsPostingId.IsNullOrEmpty && _NewsPostings.TryGetValue(NewsPostingId, out NewsPosting newsPosting))
                return newsPosting;

            return null;

        }


        /// <summary>
        /// Get the news posting having the given unique identification.
        /// </summary>
        /// <param name="NewsPostingId">The unique identification of the news posting.</param>
        public NewsPosting GetNewsPosting(NewsPosting_Id NewsPostingId)
        {

            try
            {

                if (NewsPostingsSemaphore.Wait(SemaphoreSlimTimeout))
                    return _GetNewsPosting(NewsPostingId);

            }
            catch
            { }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

            return null;

        }

        #endregion

        #region TryGetNewsPosting(NewsPostingId, out NewsPosting)

        /// <summary>
        /// Try to get the news posting having the given unique identification.
        /// </summary>
        /// <param name="NewsPostingId">The unique identification of an news posting.</param>
        /// <param name="NewsPosting">The news posting.</param>
        protected internal Boolean _TryGetNewsPosting(NewsPosting_Id NewsPostingId, out NewsPosting NewsPosting)
        {

            if (!NewsPostingId.IsNullOrEmpty && _NewsPostings.TryGetValue(NewsPostingId, out NewsPosting newsPosting))
            {
                NewsPosting = newsPosting;
                return true;
            }

            NewsPosting = null;
            return false;

        }


        /// <summary>
        /// Try to get the news posting having the given unique identification.
        /// </summary>
        /// <param name="NewsPostingId">The unique identification of an news posting.</param>
        /// <param name="NewsPosting">The news posting.</param>
        public Boolean TryGetNewsPosting(NewsPosting_Id   NewsPostingId,
                                         out NewsPosting  NewsPosting)
        {

            try
            {

                if (NewsPostingsSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _TryGetNewsPosting(NewsPostingId, out NewsPosting newsPosting))
                {
                    NewsPosting = newsPosting;
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

            NewsPosting = null;
            return false;

        }

        #endregion


        #region RemoveNewsPosting(NewsPosting, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a news posting was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the news posting was removed.</param>
        /// <param name="NewsPosting">The removed news posting.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking news posting identification</param>
        public delegate Task OnNewsPostingRemovedDelegate(DateTime          Timestamp,
                                                          NewsPosting       NewsPosting,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a news posting was removed.
        /// </summary>
        public event OnNewsPostingRemovedDelegate OnNewsPostingRemoved;


        #region (class) DeleteNewsPostingResult

        public class DeleteNewsPostingResult
        {

            public Boolean     IsSuccess           { get; }

            public I18NString  ErrorDescription    { get; }


            private DeleteNewsPostingResult(Boolean     IsSuccess,
                                          I18NString  ErrorDescription  = null)
            {
                this.IsSuccess         = IsSuccess;
                this.ErrorDescription  = ErrorDescription;
            }


            public static DeleteNewsPostingResult Success

                => new DeleteNewsPostingResult(true);

            public static DeleteNewsPostingResult Failed(I18NString Reason)

                => new DeleteNewsPostingResult(false,
                                             Reason);

            public static DeleteNewsPostingResult Failed(Exception Exception)

                => new DeleteNewsPostingResult(false,
                                             I18NString.Create(Languages.en,
                                                               Exception.Message));

            public override String ToString()

                => IsSuccess
                       ? "Success"
                       : "Failed" + (ErrorDescription.IsNullOrEmpty()
                                         ? ": " + ErrorDescription.FirstText()
                                         : "!");

        }

        #endregion

        #region (protected internal virtual) CanDeleteNewsPosting(NewsPosting)

        /// <summary>
        /// Determines whether the news posting can safely be removed from the API.
        /// </summary>
        /// <param name="NewsPosting">The news posting to be removed.</param>
        protected internal virtual I18NString CanDeleteNewsPosting(NewsPosting NewsPosting)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion


        #region (protected internal) _RemoveNewsPosting(NewsPosting, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given news posting from the API.
        /// </summary>
        /// <param name="NewsPosting">The news posting to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the news posting had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news posting identification initiating this command/request.</param>
        protected internal async Task<DeleteNewsPostingResult> _RemoveNewsPosting(NewsPosting                            NewsPosting,
                                                                         Action<NewsPosting, EventTracking_Id>  OnRemoved         = null,
                                                                         EventTracking_Id                       EventTrackingId   = null,
                                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting),
                                                "The given news posting must not be null!");

            if (NewsPosting.API != this || !_NewsPostings.TryGetValue(NewsPosting.Id, out NewsPosting NewsPostingToBeRemoved))
                throw new ArgumentException    ("The given news posting '" + NewsPosting.Id + "' does not exists in this API!",
                                                nameof(NewsPosting));


            var result = CanDeleteNewsPosting(NewsPosting);

            if (result == null)
            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                await WriteToDatabaseFile(removeNewsPosting_MessageType,
                                          NewsPosting.ToJSON(false, true),
                                          eventTrackingId,
                                          CurrentUserId);

                _NewsPostings.Remove(NewsPosting.Id);


                var OnNewsPostingRemovedLocal = OnNewsPostingRemoved;
                if (OnNewsPostingRemovedLocal != null)
                    await OnNewsPostingRemovedLocal?.Invoke(Timestamp.Now,
                                                            NewsPosting,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(NewsPosting,
                                        removeNewsPosting_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnRemoved?.Invoke(NewsPosting,
                                  eventTrackingId);

                return DeleteNewsPostingResult.Success;

            }
            else
                return DeleteNewsPostingResult.Failed(result);

        }

        #endregion

        #region RemoveNewsPosting             (NewsPosting, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given news posting from the API.
        /// </summary>
        /// <param name="NewsPosting">The news posting to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the news posting had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news posting identification initiating this command/request.</param>
        public async Task<DeleteNewsPostingResult> RemoveNewsPosting(NewsPosting                            NewsPosting,
                                                                     Action<NewsPosting, EventTracking_Id>  OnRemoved         = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (NewsPosting is null)
                throw new ArgumentNullException(nameof(NewsPosting), "The given news posting must not be null!");

            try
            {

                return (await NewsPostingsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _RemoveNewsPosting(NewsPosting,
                                                       OnRemoved,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            catch (Exception e)
            {
                return DeleteNewsPostingResult.Failed(e);
            }
            finally
            {
                try
                {
                    NewsPostingsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #endregion

        #region NewsBanners

        #region Data

        /// <summary>
        /// An enumeration of all news banners.
        /// </summary>
        protected internal readonly Dictionary<NewsBanner_Id, NewsBanner> _NewsBanners;

        /// <summary>
        /// An enumeration of all news banners.
        /// </summary>
        public IEnumerable<NewsBanner> NewsBanners
        {
            get
            {
                try
                {
                    return NewsBannersSemaphore.Wait(SemaphoreSlimTimeout)
                               ? _NewsBanners.Values.ToArray()
                               : new NewsBanner[0];
                }
                finally
                {
                    try
                    {
                        NewsBannersSemaphore.Release();
                    }
                    catch
                    { }
                }
            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(NewsBanner, MessageType,  OldNewsBanner = null, ...)

        /// <summary>
        /// Write the given news banner to the database and send out notifications.
        /// </summary>
        /// <param name="NewsBanner">The news banner.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldNewsBanner">The old/updated news banner.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(NewsBanner              NewsBanner,
                                                          NotificationMessageType  MessageType,
                                                          NewsBanner              OldNewsBanner    = null,
                                                          EventTracking_Id         EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner),  "The given news banner must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      NewsBanner.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(NewsBanner,
                                    MessageType,
                                    OldNewsBanner,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (NewsBanner, MessageTypes, OldNewsBanner = null, ...)

        /// <summary>
        /// Send news banner notifications.
        /// </summary>
        /// <param name="NewsBanner">The news banner.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldNewsBanner">The old/updated news banner.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(NewsBanner              NewsBanner,
                                               NotificationMessageType  MessageType,
                                               NewsBanner              OldNewsBanner    = null,
                                               EventTracking_Id         EventTrackingId   = null,
                                               User_Id?                 CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner),  "The given news banner must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(NewsBanner,
                                    new NotificationMessageType[] { MessageType },
                                    OldNewsBanner,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send news banner notifications.
        /// </summary>
        /// <param name="NewsBanner">The news banner.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldNewsBanner">The old/updated news banner.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(NewsBanner                           NewsBanner,
                                               IEnumerable<NotificationMessageType>  MessageTypes,
                                               NewsBanner                           OldNewsBanner    = null,
                                               EventTracking_Id                      EventTrackingId   = null,
                                               User_Id?                              CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner),   "The given news banner must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldNewsBanner == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected internal) GetNewsBannerSerializator(Request, User)

        protected internal NewsBannerToJSONDelegate GetNewsBannerSerializator(HTTPRequest  Request,
                                                                       User         User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (newsBanner,
                            embedded,
                            ExpandTags,
                            ExpandAuthorId,
                            includeCryptoHash)

                            => newsBanner.ToJSON(embedded,
                                                  ExpandTags,
                                                  ExpandAuthorId,
                                                  includeCryptoHash);

            }

        }

        #endregion


        #region AddNewsBanner           (NewsBanner, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a news banner was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the news banner was added.</param>
        /// <param name="NewsBanner">The added news banner.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnNewsBannerAddedDelegate(DateTime          Timestamp,
                                                        NewsBanner       NewsBanner,
                                                        EventTracking_Id  EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a news banner was added.
        /// </summary>
        public event OnNewsBannerAddedDelegate OnNewsBannerAdded;


        #region (protected internal) _AddNewsBanner(NewsBanner,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given news banner to the API.
        /// </summary>
        /// <param name="NewsBanner">A new news banner to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the news banner had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<NewsBanner> _AddNewsBanner(NewsBanner                            NewsBanner,
                                                          Action<NewsBanner, EventTracking_Id>  OnAdded           = null,
                                                          EventTracking_Id                       EventTrackingId   = null,
                                                          User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner),
                                                "The given news banner must not be null!");

            if (NewsBanner.API != null && NewsBanner.API != this)
                throw new ArgumentException    ("The given news banner is already attached to another API!",
                                                nameof(NewsBanner));

            if (_NewsBanners.ContainsKey(NewsBanner.Id))
                throw new ArgumentException    ("User group identification '" + NewsBanner.Id + "' already exists!",
                                                nameof(NewsBanner));

            if (NewsBanner.Id.Length < MinNewsBannerIdLength)
                throw new ArgumentException    ("User group identification '" + NewsBanner.Id + "' is too short!",
                                                nameof(NewsBanner));

            NewsBanner.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addNewsBanner_MessageType,
                                      NewsBanner.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _NewsBanners.Add(NewsBanner.Id, NewsBanner);


            var OnNewsBannerAddedLocal = OnNewsBannerAdded;
            if (OnNewsBannerAddedLocal != null)
                await OnNewsBannerAddedLocal?.Invoke(Timestamp.Now,
                                                      NewsBanner,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(NewsBanner,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(NewsBanner,
                            eventTrackingId);

            return NewsBanner;

        }

        #endregion

        #region AddNewsBanner             (NewsBanner,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given news banner.
        /// </summary>
        /// <param name="NewsBanner">A new news banner.</param>
        /// <param name="OnAdded">A delegate run whenever the news banner had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<NewsBanner> AddNewsBanner(NewsBanner                            NewsBanner,
                                                      Action<NewsBanner, EventTracking_Id>  OnAdded           = null,
                                                      EventTracking_Id                       EventTrackingId   = null,
                                                      User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner), "The given news banner must not be null!");

            try
            {

                return (await NewsBannersSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddNewsBanner(NewsBanner,
                                                    OnAdded,
                                                    EventTrackingId,
                                                    CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddNewsBannerIfNotExists(NewsBanner, OnAdded = null,                   CurrentUserId = null)

        #region (protected internal) _AddNewsBannerIfNotExists(NewsBanner,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given news banner to the API.
        /// </summary>
        /// <param name="NewsBanner">A new news banner to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the news banner had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<NewsBanner> _AddNewsBannerIfNotExists(NewsBanner                            NewsBanner,
                                                                     Action<NewsBanner, EventTracking_Id>  OnAdded           = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner),
                                                "The given news banner must not be null!");

            if (NewsBanner.API != null && NewsBanner.API != this)
                throw new ArgumentException    ("The given news banner is already attached to another API!",
                                                nameof(NewsBanner));

            if (_NewsBanners.ContainsKey(NewsBanner.Id))
                return _NewsBanners[NewsBanner.Id];

            if (NewsBanner.Id.Length < MinNewsBannerIdLength)
                throw new ArgumentException    ("User group identification '" + NewsBanner.Id + "' is too short!",
                                                nameof(NewsBanner));

            NewsBanner.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addNewsBannerIfNotExists_MessageType,
                                      NewsBanner.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _NewsBanners.Add(NewsBanner.Id, NewsBanner);

            var OnNewsBannerAddedLocal = OnNewsBannerAdded;
            if (OnNewsBannerAddedLocal != null)
                await OnNewsBannerAddedLocal?.Invoke(Timestamp.Now,
                                                      NewsBanner,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(NewsBanner,
                                    addNewsBannerIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(NewsBanner,
                            eventTrackingId);

            return NewsBanner;

        }

        #endregion

        #region AddNewsBannerIfNotExists             (NewsBanner,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given news banner.
        /// </summary>
        /// <param name="NewsBanner">A new news banner.</param>
        /// <param name="OnAdded">A delegate run whenever the news banner had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<NewsBanner> AddNewsBannerIfNotExists(NewsBanner                            NewsBanner,
                                                                 Action<NewsBanner, EventTracking_Id>  OnAdded           = null,
                                                                 EventTracking_Id                       EventTrackingId   = null,
                                                                 User_Id?                               CurrentUserId     = null)
        {

            try
            {

                return (await NewsBannersSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddNewsBannerIfNotExists(NewsBanner,
                                                             OnAdded,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrUpdateNewsBanner   (NewsBanner, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateNewsBanner   (NewsBanner,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given news banner to/within the API.
        /// </summary>
        /// <param name="NewsBanner">A news banner.</param>
        /// <param name="OnAdded">A delegate run whenever the news banner had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the news banner had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news banner identification initiating this command/request.</param>
        protected internal async Task<NewsBanner> _AddOrUpdateNewsBanner(NewsBanner                            NewsBanner,
                                                                  Action<NewsBanner, EventTracking_Id>  OnAdded           = null,
                                                                  Action<NewsBanner, EventTracking_Id>  OnUpdated         = null,
                                                                  EventTracking_Id                       EventTrackingId   = null,
                                                                  User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner),
                                                "The given news banner must not be null!");

            if (NewsBanner.API != null && NewsBanner.API != this)
                throw new ArgumentException    ("The given news banner is already attached to another API!",
                                                nameof(NewsBanner));

            if (_NewsBanners.ContainsKey(NewsBanner.Id))
                return _NewsBanners[NewsBanner.Id];

            if (NewsBanner.Id.Length < MinNewsBannerIdLength)
                throw new ArgumentException    ("NewsBanner identification '" + NewsBanner.Id + "' is too short!",
                                                nameof(NewsBanner));

            NewsBanner.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrUpdateNewsBanner_MessageType,
                                      NewsBanner.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_NewsBanners.TryGetValue(NewsBanner.Id, out NewsBanner OldNewsBanner))
            {
                _NewsBanners.Remove(OldNewsBanner.Id);
                NewsBanner.CopyAllLinkedDataFrom(OldNewsBanner);
            }

            _NewsBanners.Add(NewsBanner.Id, NewsBanner);

            if (OldNewsBanner != null)
            {

                var OnNewsBannerUpdatedLocal = OnNewsBannerUpdated;
                if (OnNewsBannerUpdatedLocal != null)
                    await OnNewsBannerUpdatedLocal?.Invoke(Timestamp.Now,
                                                            NewsBanner,
                                                            OldNewsBanner,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(NewsBanner,
                                        updateNewsBanner_MessageType,
                                        OldNewsBanner,
                                        eventTrackingId,
                                        CurrentUserId);

                OnUpdated?.Invoke(NewsBanner,
                                  eventTrackingId);

            }
            else
            {

                var OnNewsBannerAddedLocal = OnNewsBannerAdded;
                if (OnNewsBannerAddedLocal != null)
                    await OnNewsBannerAddedLocal?.Invoke(Timestamp.Now,
                                                          NewsBanner,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(NewsBanner,
                                        addNewsBanner_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnAdded?.Invoke(NewsBanner,
                                eventTrackingId);

            }

            return NewsBanner;

        }

        #endregion

        #region AddOrUpdateNewsBanner   (NewsBanner,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given news banner to/within the API.
        /// </summary>
        /// <param name="NewsBanner">A news banner.</param>
        /// <param name="OnAdded">A delegate run whenever the news banner had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the news banner had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news banner identification initiating this command/request.</param>
        public async Task<NewsBanner> AddOrUpdateNewsBanner(NewsBanner                            NewsBanner,
                                                              Action<NewsBanner, EventTracking_Id>  OnAdded           = null,
                                                              Action<NewsBanner, EventTracking_Id>  OnUpdated         = null,
                                                              EventTracking_Id                       EventTrackingId   = null,
                                                              User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner), "The given news banner must not be null!");

            try
            {

                return (await NewsBannersSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddOrUpdateNewsBanner(NewsBanner,
                                                            OnAdded,
                                                            OnUpdated,
                                                            EventTrackingId,
                                                            CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region UpdateNewsBanner        (NewsBanner,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a news banner was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the news banner was updated.</param>
        /// <param name="NewsBanner">The updated news banner.</param>
        /// <param name="OldNewsBanner">The old news banner.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking news banner identification</param>
        public delegate Task OnNewsBannerUpdatedDelegate(DateTime          Timestamp,
                                                          NewsBanner       NewsBanner,
                                                          NewsBanner       OldNewsBanner,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a news banner was updated.
        /// </summary>
        public event OnNewsBannerUpdatedDelegate OnNewsBannerUpdated;


        #region (protected internal) _UpdateNewsBanner(NewsBanner, OnUpdated = null, ...)

        /// <summary>
        /// Update the given news banner to/within the API.
        /// </summary>
        /// <param name="NewsBanner">A news banner.</param>
        /// <param name="OnUpdated">A delegate run whenever the news banner had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news banner identification initiating this command/request.</param>
        protected internal async Task<NewsBanner> _UpdateNewsBanner(NewsBanner                            NewsBanner,
                                                             Action<NewsBanner, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner),
                                                "The given news banner must not be null!");

            if (NewsBanner.API != null && NewsBanner.API != this)
                throw new ArgumentException    ("The given news banner is already attached to another API!",
                                                nameof(NewsBanner));

            if (!_NewsBanners.TryGetValue(NewsBanner.Id, out NewsBanner OldNewsBanner))
                throw new ArgumentException    ("The given news banner '" + NewsBanner.Id + "' does not exists in this API!",
                                                nameof(NewsBanner));

            NewsBanner.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateNewsBanner_MessageType,
                                      NewsBanner.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _NewsBanners.Remove(OldNewsBanner.Id);
            NewsBanner.CopyAllLinkedDataFrom(OldNewsBanner);


            var OnNewsBannerUpdatedLocal = OnNewsBannerUpdated;
            if (OnNewsBannerUpdatedLocal != null)
                await OnNewsBannerUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NewsBanner,
                                                        OldNewsBanner,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NewsBanner,
                                    updateNewsBanner_MessageType,
                                    OldNewsBanner,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewsBanner,
                              eventTrackingId);

            return NewsBanner;

        }

        #endregion

        #region UpdateNewsBanner             (NewsBanner, OnUpdated = null, ...)

        /// <summary>
        /// Update the given news banner to/within the API.
        /// </summary>
        /// <param name="NewsBanner">A news banner.</param>
        /// <param name="OnUpdated">A delegate run whenever the news banner had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news banner identification initiating this command/request.</param>
        public async Task<NewsBanner> UpdateNewsBanner(NewsBanner                            NewsBanner,
                                                         Action<NewsBanner, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner), "The given news banner must not be null!");

            try
            {

                return (await NewsBannersSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateNewsBanner(NewsBanner,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion


        #region (protected internal) _UpdateNewsBanner(NewsBannerId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given news banner.
        /// </summary>
        /// <param name="NewsBannerId">An news banner identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given news banner.</param>
        /// <param name="OnUpdated">A delegate run whenever the news banner had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news banner identification initiating this command/request.</param>
        protected internal async Task<NewsBanner> _UpdateNewsBanner(NewsBanner_Id                         NewsBannerId,
                                                             Action<NewsBanner.Builder>            UpdateDelegate,
                                                             Action<NewsBanner, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (NewsBannerId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(NewsBannerId),
                                                "The given news banner identification must not be null or empty!");

            if (UpdateDelegate == null)
                throw new ArgumentNullException(nameof(UpdateDelegate),
                                                "The given update delegate must not be null!");

            if (!_NewsBanners.TryGetValue(NewsBannerId, out NewsBanner OldNewsBanner))
                throw new ArgumentException    ("The given news banner '" + NewsBannerId + "' does not exists in this API!",
                                                nameof(NewsBannerId));

            var Builder = OldNewsBanner.ToBuilder();
            UpdateDelegate(Builder);
            var NewNewsBanner = Builder.ToImmutable;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateNewsBanner_MessageType,
                                      NewNewsBanner.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _NewsBanners.Remove(OldNewsBanner.Id);
            NewNewsBanner.CopyAllLinkedDataFrom(OldNewsBanner);


            var OnNewsBannerUpdatedLocal = OnNewsBannerUpdated;
            if (OnNewsBannerUpdatedLocal != null)
                await OnNewsBannerUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NewNewsBanner,
                                                        OldNewsBanner,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NewNewsBanner,
                                    updateNewsBanner_MessageType,
                                    OldNewsBanner,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewNewsBanner,
                              eventTrackingId);

            return NewNewsBanner;

        }

        #endregion

        #region UpdateNewsBanner             (NewsBannerId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given news banner.
        /// </summary>
        /// <param name="NewsBannerId">An news banner identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given news banner.</param>
        /// <param name="OnUpdated">A delegate run whenever the news banner had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news banner identification initiating this command/request.</param>
        public async Task<NewsBanner> UpdateNewsBanner(NewsBanner_Id                         NewsBannerId,
                                                         Action<NewsBanner.Builder>            UpdateDelegate,
                                                         Action<NewsBanner, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NewsBannerId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(NewsBannerId), "The given news banner identification must not be null or empty!");

            try
            {

                return (await NewsBannersSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateNewsBanner(NewsBannerId,
                                                       UpdateDelegate,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion


        #region NewsBannerExists(NewsBannerId)

        /// <summary>
        /// Determines whether the given news banner identification exists within this API.
        /// </summary>
        /// <param name="NewsBannerId">The unique identification of an news banner.</param>
        protected internal Boolean _NewsBannerExists(NewsBanner_Id NewsBannerId)

            => !NewsBannerId.IsNullOrEmpty && _NewsBanners.ContainsKey(NewsBannerId);


        /// <summary>
        /// Determines whether the given news banner identification exists within this API.
        /// </summary>
        /// <param name="NewsBannerId">The unique identification of an news banner.</param>
        public Boolean NewsBannerExists(NewsBanner_Id NewsBannerId)
        {

            try
            {

                if (NewsBannersSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _NewsBannerExists(NewsBannerId))
                {
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

            return false;

        }

        #endregion

        #region GetNewsBanner   (NewsBannerId)

        /// <summary>
        /// Get the news banner having the given unique identification.
        /// </summary>
        /// <param name="NewsBannerId">The unique identification of an news banner.</param>
        protected internal NewsBanner _GetNewsBanner(NewsBanner_Id NewsBannerId)
        {

            if (!NewsBannerId.IsNullOrEmpty && _NewsBanners.TryGetValue(NewsBannerId, out NewsBanner newsBanner))
                return newsBanner;

            return null;

        }


        /// <summary>
        /// Get the news banner having the given unique identification.
        /// </summary>
        /// <param name="NewsBannerId">The unique identification of the news banner.</param>
        public NewsBanner GetNewsBanner(NewsBanner_Id NewsBannerId)
        {

            try
            {

                if (NewsBannersSemaphore.Wait(SemaphoreSlimTimeout))
                    return _GetNewsBanner(NewsBannerId);

            }
            catch
            { }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

            return null;

        }

        #endregion

        #region TryGetNewsBanner(NewsBannerId, out NewsBanner)

        /// <summary>
        /// Try to get the news banner having the given unique identification.
        /// </summary>
        /// <param name="NewsBannerId">The unique identification of an news banner.</param>
        /// <param name="NewsBanner">The news banner.</param>
        protected internal Boolean _TryGetNewsBanner(NewsBanner_Id NewsBannerId, out NewsBanner NewsBanner)
        {

            if (!NewsBannerId.IsNullOrEmpty && _NewsBanners.TryGetValue(NewsBannerId, out NewsBanner newsBanner))
            {
                NewsBanner = newsBanner;
                return true;
            }

            NewsBanner = null;
            return false;

        }


        /// <summary>
        /// Try to get the news banner having the given unique identification.
        /// </summary>
        /// <param name="NewsBannerId">The unique identification of an news banner.</param>
        /// <param name="NewsBanner">The news banner.</param>
        public Boolean TryGetNewsBanner(NewsBanner_Id   NewsBannerId,
                                         out NewsBanner  NewsBanner)
        {

            try
            {

                if (NewsBannersSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _TryGetNewsBanner(NewsBannerId, out NewsBanner newsBanner))
                {
                    NewsBanner = newsBanner;
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

            NewsBanner = null;
            return false;

        }

        #endregion


        #region RemoveNewsBanner(NewsBanner, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a news banner was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the news banner was removed.</param>
        /// <param name="NewsBanner">The removed news banner.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking news banner identification</param>
        public delegate Task OnNewsBannerRemovedDelegate(DateTime          Timestamp,
                                                          NewsBanner       NewsBanner,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a news banner was removed.
        /// </summary>
        public event OnNewsBannerRemovedDelegate OnNewsBannerRemoved;


        #region (class) DeleteNewsBannerResult

        public class DeleteNewsBannerResult
        {

            public Boolean     IsSuccess           { get; }

            public I18NString  ErrorDescription    { get; }


            private DeleteNewsBannerResult(Boolean     IsSuccess,
                                          I18NString  ErrorDescription  = null)
            {
                this.IsSuccess         = IsSuccess;
                this.ErrorDescription  = ErrorDescription;
            }


            public static DeleteNewsBannerResult Success

                => new DeleteNewsBannerResult(true);

            public static DeleteNewsBannerResult Failed(I18NString Reason)

                => new DeleteNewsBannerResult(false,
                                             Reason);

            public static DeleteNewsBannerResult Failed(Exception Exception)

                => new DeleteNewsBannerResult(false,
                                             I18NString.Create(Languages.en,
                                                               Exception.Message));

            public override String ToString()

                => IsSuccess
                       ? "Success"
                       : "Failed" + (ErrorDescription.IsNullOrEmpty()
                                         ? ": " + ErrorDescription.FirstText()
                                         : "!");

        }

        #endregion

        #region (protected internal virtual) CanDeleteNewsBanner(NewsBanner)

        /// <summary>
        /// Determines whether the news banner can safely be removed from the API.
        /// </summary>
        /// <param name="NewsBanner">The news banner to be removed.</param>
        protected internal virtual I18NString CanDeleteNewsBanner(NewsBanner NewsBanner)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion


        #region (protected internal) _RemoveNewsBanner(NewsBanner, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given news banner from the API.
        /// </summary>
        /// <param name="NewsBanner">The news banner to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the news banner had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news banner identification initiating this command/request.</param>
        protected internal async Task<DeleteNewsBannerResult> _RemoveNewsBanner(NewsBanner                            NewsBanner,
                                                                         Action<NewsBanner, EventTracking_Id>  OnRemoved         = null,
                                                                         EventTracking_Id                       EventTrackingId   = null,
                                                                         User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner),
                                                "The given news banner must not be null!");

            if (NewsBanner.API != this || !_NewsBanners.TryGetValue(NewsBanner.Id, out NewsBanner NewsBannerToBeRemoved))
                throw new ArgumentException    ("The given news banner '" + NewsBanner.Id + "' does not exists in this API!",
                                                nameof(NewsBanner));


            var result = CanDeleteNewsBanner(NewsBanner);

            if (result == null)
            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                await WriteToDatabaseFile(removeNewsBanner_MessageType,
                                          NewsBanner.ToJSON(false, true),
                                          eventTrackingId,
                                          CurrentUserId);

                _NewsBanners.Remove(NewsBanner.Id);


                var OnNewsBannerRemovedLocal = OnNewsBannerRemoved;
                if (OnNewsBannerRemovedLocal != null)
                    await OnNewsBannerRemovedLocal?.Invoke(Timestamp.Now,
                                                            NewsBanner,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(NewsBanner,
                                        removeNewsBanner_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnRemoved?.Invoke(NewsBanner,
                                  eventTrackingId);

                return DeleteNewsBannerResult.Success;

            }
            else
                return DeleteNewsBannerResult.Failed(result);

        }

        #endregion

        #region RemoveNewsBanner             (NewsBanner, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given news banner from the API.
        /// </summary>
        /// <param name="NewsBanner">The news banner to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the news banner had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional news banner identification initiating this command/request.</param>
        public async Task<DeleteNewsBannerResult> RemoveNewsBanner(NewsBanner                            NewsBanner,
                                                                     Action<NewsBanner, EventTracking_Id>  OnRemoved         = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (NewsBanner is null)
                throw new ArgumentNullException(nameof(NewsBanner), "The given news banner must not be null!");

            try
            {

                return (await NewsBannersSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _RemoveNewsBanner(NewsBanner,
                                                       OnRemoved,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            catch (Exception e)
            {
                return DeleteNewsBannerResult.Failed(e);
            }
            finally
            {
                try
                {
                    NewsBannersSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #endregion

        #region FAQs

        #region Data

        /// <summary>
        /// An enumeration of all FAQs.
        /// </summary>
        protected internal readonly Dictionary<FAQ_Id, FAQ> _FAQs;

        /// <summary>
        /// An enumeration of all FAQs.
        /// </summary>
        public IEnumerable<FAQ> FAQs
        {
            get
            {
                try
                {
                    return FAQsSemaphore.Wait(SemaphoreSlimTimeout)
                               ? _FAQs.Values.ToArray()
                               : new FAQ[0];
                }
                finally
                {
                    try
                    {
                        FAQsSemaphore.Release();
                    }
                    catch
                    { }
                }
            }
        }

        #endregion


        #region (protected internal) WriteToDatabaseFileAndNotify(FAQ, MessageType,  OldFAQ = null, ...)

        /// <summary>
        /// Write the given FAQ to the database and send out notifications.
        /// </summary>
        /// <param name="FAQ">The FAQ.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldFAQ">The old/updated FAQ.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task WriteToDatabaseFileAndNotify(FAQ              FAQ,
                                                          NotificationMessageType  MessageType,
                                                          FAQ              OldFAQ    = null,
                                                          EventTracking_Id         EventTrackingId   = null,
                                                          User_Id?                 CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ),  "The given FAQ must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(MessageType,
                                      FAQ.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            await SendNotifications(FAQ,
                                    MessageType,
                                    OldFAQ,
                                    eventTrackingId,
                                    CurrentUserId);

        }

        #endregion

        #region (protected internal) SendNotifications           (FAQ, MessageTypes, OldFAQ = null, ...)

        /// <summary>
        /// Send FAQ notifications.
        /// </summary>
        /// <param name="FAQ">The FAQ.</param>
        /// <param name="MessageType">The user notification.</param>
        /// <param name="OldFAQ">The old/updated FAQ.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(FAQ              FAQ,
                                               NotificationMessageType  MessageType,
                                               FAQ              OldFAQ    = null,
                                               EventTracking_Id         EventTrackingId   = null,
                                               User_Id?                 CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ),  "The given FAQ must not be null or empty!");

            if (MessageType.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(MessageType),  "The given message type must not be null or empty!");


            await SendNotifications(FAQ,
                                    new NotificationMessageType[] { MessageType },
                                    OldFAQ,
                                    EventTrackingId,
                                    CurrentUserId);

        }


        /// <summary>
        /// Send FAQ notifications.
        /// </summary>
        /// <param name="FAQ">The FAQ.</param>
        /// <param name="MessageTypes">The user notifications.</param>
        /// <param name="OldFAQ">The old/updated FAQ.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task SendNotifications(FAQ                           FAQ,
                                               IEnumerable<NotificationMessageType>  MessageTypes,
                                               FAQ                           OldFAQ    = null,
                                               EventTracking_Id                      EventTrackingId   = null,
                                               User_Id?                              CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ),   "The given FAQ must not be null or empty!");

            var messageTypesHash = new HashSet<NotificationMessageType>(MessageTypes.Where(messageType => !messageType.IsNullOrEmpty));

            if (messageTypesHash.IsNullOrEmpty())
                throw new ArgumentNullException(nameof(MessageTypes),  "The given enumeration of message types must not be null or empty!");

            if (messageTypesHash.Contains(addUserIfNotExists_MessageType))
                messageTypesHash.Add(addUser_MessageType);

            if (messageTypesHash.Contains(addOrUpdateUser_MessageType))
                messageTypesHash.Add(OldFAQ == null
                                       ? addUser_MessageType
                                       : updateUser_MessageType);

            var messageTypes = messageTypesHash.ToArray();


            if (!DisableNotifications)
            {


            }

        }

        #endregion

        #region (protected internal) GetFAQSerializator(Request, User)

        protected internal FAQToJSONDelegate GetFAQSerializator(HTTPRequest  Request,
                                                                       User         User)
        {

            switch (User?.Id.ToString())
            {

                default:
                    return (faq,
                            embedded,
                            ExpandTags,
                            ExpandAuthorId,
                            includeCryptoHash)

                            => faq.ToJSON(embedded,
                                                  ExpandTags,
                                                  ExpandAuthorId,
                                                  includeCryptoHash);

            }

        }

        #endregion


        #region AddFAQ           (FAQ, OnAdded = null,                   CurrentUserId = null)

        /// <summary>
        /// A delegate called whenever a FAQ was added.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the FAQ was added.</param>
        /// <param name="FAQ">The added FAQ.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public delegate Task OnFAQAddedDelegate(DateTime          Timestamp,
                                                        FAQ       FAQ,
                                                        EventTracking_Id  EventTrackingId   = null,
                                                        User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a FAQ was added.
        /// </summary>
        public event OnFAQAddedDelegate OnFAQAdded;


        #region (protected internal) _AddFAQ(FAQ,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given FAQ to the API.
        /// </summary>
        /// <param name="FAQ">A new FAQ to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the FAQ had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<FAQ> _AddFAQ(FAQ                            FAQ,
                                                          Action<FAQ, EventTracking_Id>  OnAdded           = null,
                                                          EventTracking_Id                       EventTrackingId   = null,
                                                          User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ),
                                                "The given FAQ must not be null!");

            if (FAQ.API != null && FAQ.API != this)
                throw new ArgumentException    ("The given FAQ is already attached to another API!",
                                                nameof(FAQ));

            if (_FAQs.ContainsKey(FAQ.Id))
                throw new ArgumentException    ("User group identification '" + FAQ.Id + "' already exists!",
                                                nameof(FAQ));

            if (FAQ.Id.Length < MinFAQIdLength)
                throw new ArgumentException    ("User group identification '" + FAQ.Id + "' is too short!",
                                                nameof(FAQ));

            FAQ.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addFAQ_MessageType,
                                      FAQ.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _FAQs.Add(FAQ.Id, FAQ);


            var OnFAQAddedLocal = OnFAQAdded;
            if (OnFAQAddedLocal != null)
                await OnFAQAddedLocal?.Invoke(Timestamp.Now,
                                                      FAQ,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(FAQ,
                                    addUser_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(FAQ,
                            eventTrackingId);

            return FAQ;

        }

        #endregion

        #region AddFAQ             (FAQ,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given FAQ.
        /// </summary>
        /// <param name="FAQ">A new FAQ.</param>
        /// <param name="OnAdded">A delegate run whenever the FAQ had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<FAQ> AddFAQ(FAQ                            FAQ,
                                                      Action<FAQ, EventTracking_Id>  OnAdded           = null,
                                                      EventTracking_Id                       EventTrackingId   = null,
                                                      User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ), "The given FAQ must not be null!");

            try
            {

                return (await FAQsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddFAQ(FAQ,
                                                    OnAdded,
                                                    EventTrackingId,
                                                    CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddFAQIfNotExists(FAQ, OnAdded = null,                   CurrentUserId = null)

        #region (protected internal) _AddFAQIfNotExists(FAQ,                                OnAdded = null, ...)

        /// <summary>
        /// When it has not been created before, add the given FAQ to the API.
        /// </summary>
        /// <param name="FAQ">A new FAQ to be added to this API.</param>
        /// <param name="OnAdded">A delegate run whenever the FAQ had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        protected internal async Task<FAQ> _AddFAQIfNotExists(FAQ                            FAQ,
                                                                     Action<FAQ, EventTracking_Id>  OnAdded           = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ),
                                                "The given FAQ must not be null!");

            if (FAQ.API != null && FAQ.API != this)
                throw new ArgumentException    ("The given FAQ is already attached to another API!",
                                                nameof(FAQ));

            if (_FAQs.ContainsKey(FAQ.Id))
                return _FAQs[FAQ.Id];

            if (FAQ.Id.Length < MinFAQIdLength)
                throw new ArgumentException    ("User group identification '" + FAQ.Id + "' is too short!",
                                                nameof(FAQ));

            FAQ.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addFAQIfNotExists_MessageType,
                                      FAQ.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            _FAQs.Add(FAQ.Id, FAQ);

            var OnFAQAddedLocal = OnFAQAdded;
            if (OnFAQAddedLocal != null)
                await OnFAQAddedLocal?.Invoke(Timestamp.Now,
                                                      FAQ,
                                                      eventTrackingId,
                                                      CurrentUserId);

            await SendNotifications(FAQ,
                                    addFAQIfNotExists_MessageType,
                                    null,
                                    eventTrackingId,
                                    CurrentUserId);

            OnAdded?.Invoke(FAQ,
                            eventTrackingId);

            return FAQ;

        }

        #endregion

        #region AddFAQIfNotExists             (FAQ,                                OnAdded = null, ...)

        /// <summary>
        /// Add the given FAQ.
        /// </summary>
        /// <param name="FAQ">A new FAQ.</param>
        /// <param name="OnAdded">A delegate run whenever the FAQ had been added successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional user identification initiating this command/request.</param>
        public async Task<FAQ> AddFAQIfNotExists(FAQ                            FAQ,
                                                                 Action<FAQ, EventTracking_Id>  OnAdded           = null,
                                                                 EventTracking_Id                       EventTrackingId   = null,
                                                                 User_Id?                               CurrentUserId     = null)
        {

            try
            {

                return (await FAQsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddFAQIfNotExists(FAQ,
                                                             OnAdded,
                                                             EventTrackingId,
                                                             CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region AddOrUpdateFAQ   (FAQ, OnAdded = null, OnUpdated = null, ...)

        #region (protected internal) _AddOrUpdateFAQ   (FAQ,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given FAQ to/within the API.
        /// </summary>
        /// <param name="FAQ">A FAQ.</param>
        /// <param name="OnAdded">A delegate run whenever the FAQ had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the FAQ had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional FAQ identification initiating this command/request.</param>
        protected internal async Task<FAQ> _AddOrUpdateFAQ(FAQ                            FAQ,
                                                                  Action<FAQ, EventTracking_Id>  OnAdded           = null,
                                                                  Action<FAQ, EventTracking_Id>  OnUpdated         = null,
                                                                  EventTracking_Id                       EventTrackingId   = null,
                                                                  User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ),
                                                "The given FAQ must not be null!");

            if (FAQ.API != null && FAQ.API != this)
                throw new ArgumentException    ("The given FAQ is already attached to another API!",
                                                nameof(FAQ));

            if (_FAQs.ContainsKey(FAQ.Id))
                return _FAQs[FAQ.Id];

            if (FAQ.Id.Length < MinFAQIdLength)
                throw new ArgumentException    ("FAQ identification '" + FAQ.Id + "' is too short!",
                                                nameof(FAQ));

            FAQ.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(addOrUpdateFAQ_MessageType,
                                      FAQ.ToJSON(false, true),
                                      eventTrackingId,
                                      CurrentUserId);

            if (_FAQs.TryGetValue(FAQ.Id, out FAQ OldFAQ))
            {
                _FAQs.Remove(OldFAQ.Id);
                FAQ.CopyAllLinkedDataFrom(OldFAQ);
            }

            _FAQs.Add(FAQ.Id, FAQ);

            if (OldFAQ != null)
            {

                var OnFAQUpdatedLocal = OnFAQUpdated;
                if (OnFAQUpdatedLocal != null)
                    await OnFAQUpdatedLocal?.Invoke(Timestamp.Now,
                                                            FAQ,
                                                            OldFAQ,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(FAQ,
                                        updateFAQ_MessageType,
                                        OldFAQ,
                                        eventTrackingId,
                                        CurrentUserId);

                OnUpdated?.Invoke(FAQ,
                                  eventTrackingId);

            }
            else
            {

                var OnFAQAddedLocal = OnFAQAdded;
                if (OnFAQAddedLocal != null)
                    await OnFAQAddedLocal?.Invoke(Timestamp.Now,
                                                          FAQ,
                                                          eventTrackingId,
                                                          CurrentUserId);

                await SendNotifications(FAQ,
                                        addFAQ_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnAdded?.Invoke(FAQ,
                                eventTrackingId);

            }

            return FAQ;

        }

        #endregion

        #region AddOrUpdateFAQ   (FAQ,   OnAdded = null, OnUpdated = null, ...)

        /// <summary>
        /// Add or update the given FAQ to/within the API.
        /// </summary>
        /// <param name="FAQ">A FAQ.</param>
        /// <param name="OnAdded">A delegate run whenever the FAQ had been added successfully.</param>
        /// <param name="OnUpdated">A delegate run whenever the FAQ had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional FAQ identification initiating this command/request.</param>
        public async Task<FAQ> AddOrUpdateFAQ(FAQ                            FAQ,
                                                              Action<FAQ, EventTracking_Id>  OnAdded           = null,
                                                              Action<FAQ, EventTracking_Id>  OnUpdated         = null,
                                                              EventTracking_Id                       EventTrackingId   = null,
                                                              User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ), "The given FAQ must not be null!");

            try
            {

                return (await FAQsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _AddOrUpdateFAQ(FAQ,
                                                            OnAdded,
                                                            OnUpdated,
                                                            EventTrackingId,
                                                            CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #region UpdateFAQ        (FAQ,                 OnUpdated = null, ...)

        /// <summary>
        /// A delegate called whenever a FAQ was updated.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the FAQ was updated.</param>
        /// <param name="FAQ">The updated FAQ.</param>
        /// <param name="OldFAQ">The old FAQ.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking FAQ identification</param>
        public delegate Task OnFAQUpdatedDelegate(DateTime          Timestamp,
                                                          FAQ       FAQ,
                                                          FAQ       OldFAQ,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a FAQ was updated.
        /// </summary>
        public event OnFAQUpdatedDelegate OnFAQUpdated;


        #region (protected internal) _UpdateFAQ(FAQ, OnUpdated = null, ...)

        /// <summary>
        /// Update the given FAQ to/within the API.
        /// </summary>
        /// <param name="FAQ">A FAQ.</param>
        /// <param name="OnUpdated">A delegate run whenever the FAQ had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional FAQ identification initiating this command/request.</param>
        protected internal async Task<FAQ> _UpdateFAQ(FAQ                            FAQ,
                                                             Action<FAQ, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ),
                                                "The given FAQ must not be null!");

            if (FAQ.API != null && FAQ.API != this)
                throw new ArgumentException    ("The given FAQ is already attached to another API!",
                                                nameof(FAQ));

            if (!_FAQs.TryGetValue(FAQ.Id, out FAQ OldFAQ))
                throw new ArgumentException    ("The given FAQ '" + FAQ.Id + "' does not exists in this API!",
                                                nameof(FAQ));

            FAQ.API = this;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateFAQ_MessageType,
                                      FAQ.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _FAQs.Remove(OldFAQ.Id);
            FAQ.CopyAllLinkedDataFrom(OldFAQ);


            var OnFAQUpdatedLocal = OnFAQUpdated;
            if (OnFAQUpdatedLocal != null)
                await OnFAQUpdatedLocal?.Invoke(Timestamp.Now,
                                                        FAQ,
                                                        OldFAQ,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(FAQ,
                                    updateFAQ_MessageType,
                                    OldFAQ,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(FAQ,
                              eventTrackingId);

            return FAQ;

        }

        #endregion

        #region UpdateFAQ             (FAQ, OnUpdated = null, ...)

        /// <summary>
        /// Update the given FAQ to/within the API.
        /// </summary>
        /// <param name="FAQ">A FAQ.</param>
        /// <param name="OnUpdated">A delegate run whenever the FAQ had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional FAQ identification initiating this command/request.</param>
        public async Task<FAQ> UpdateFAQ(FAQ                            FAQ,
                                                         Action<FAQ, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ), "The given FAQ must not be null!");

            try
            {

                return (await FAQsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateFAQ(FAQ,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion


        #region (protected internal) _UpdateFAQ(FAQId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given FAQ.
        /// </summary>
        /// <param name="FAQId">An FAQ identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given FAQ.</param>
        /// <param name="OnUpdated">A delegate run whenever the FAQ had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional FAQ identification initiating this command/request.</param>
        protected internal async Task<FAQ> _UpdateFAQ(FAQ_Id                         FAQId,
                                                             Action<FAQ.Builder>            UpdateDelegate,
                                                             Action<FAQ, EventTracking_Id>  OnUpdated         = null,
                                                             EventTracking_Id                       EventTrackingId   = null,
                                                             User_Id?                               CurrentUserId     = null)
        {

            if (FAQId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(FAQId),
                                                "The given FAQ identification must not be null or empty!");

            if (UpdateDelegate == null)
                throw new ArgumentNullException(nameof(UpdateDelegate),
                                                "The given update delegate must not be null!");

            if (!_FAQs.TryGetValue(FAQId, out FAQ OldFAQ))
                throw new ArgumentException    ("The given FAQ '" + FAQId + "' does not exists in this API!",
                                                nameof(FAQId));

            var Builder = OldFAQ.ToBuilder();
            UpdateDelegate(Builder);
            var NewFAQ = Builder.ToImmutable;


            var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

            await WriteToDatabaseFile(updateFAQ_MessageType,
                                      NewFAQ.ToJSON(),
                                      eventTrackingId,
                                      CurrentUserId);

            _FAQs.Remove(OldFAQ.Id);
            NewFAQ.CopyAllLinkedDataFrom(OldFAQ);


            var OnFAQUpdatedLocal = OnFAQUpdated;
            if (OnFAQUpdatedLocal != null)
                await OnFAQUpdatedLocal?.Invoke(Timestamp.Now,
                                                        NewFAQ,
                                                        OldFAQ,
                                                        eventTrackingId,
                                                        CurrentUserId);

            await SendNotifications(NewFAQ,
                                    updateFAQ_MessageType,
                                    OldFAQ,
                                    eventTrackingId,
                                    CurrentUserId);

            OnUpdated?.Invoke(NewFAQ,
                              eventTrackingId);

            return NewFAQ;

        }

        #endregion

        #region UpdateFAQ             (FAQId, UpdateDelegate, OnUpdated = null, ...)

        /// <summary>
        /// Update the given FAQ.
        /// </summary>
        /// <param name="FAQId">An FAQ identification.</param>
        /// <param name="UpdateDelegate">A delegate to update the given FAQ.</param>
        /// <param name="OnUpdated">A delegate run whenever the FAQ had been updated successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional FAQ identification initiating this command/request.</param>
        public async Task<FAQ> UpdateFAQ(FAQ_Id                         FAQId,
                                                         Action<FAQ.Builder>            UpdateDelegate,
                                                         Action<FAQ, EventTracking_Id>  OnUpdated         = null,
                                                         EventTracking_Id                       EventTrackingId   = null,
                                                         User_Id?                               CurrentUserId     = null)
        {

            if (FAQId.IsNullOrEmpty)
                throw new ArgumentNullException(nameof(FAQId), "The given FAQ identification must not be null or empty!");

            try
            {

                return (await FAQsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _UpdateFAQ(FAQId,
                                                       UpdateDelegate,
                                                       OnUpdated,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion


        #region FAQExists(FAQId)

        /// <summary>
        /// Determines whether the given FAQ identification exists within this API.
        /// </summary>
        /// <param name="FAQId">The unique identification of an FAQ.</param>
        protected internal Boolean _FAQExists(FAQ_Id FAQId)

            => !FAQId.IsNullOrEmpty && _FAQs.ContainsKey(FAQId);


        /// <summary>
        /// Determines whether the given FAQ identification exists within this API.
        /// </summary>
        /// <param name="FAQId">The unique identification of an FAQ.</param>
        public Boolean FAQExists(FAQ_Id FAQId)
        {

            try
            {

                if (FAQsSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _FAQExists(FAQId))
                {
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

            return false;

        }

        #endregion

        #region GetFAQ   (FAQId)

        /// <summary>
        /// Get the FAQ having the given unique identification.
        /// </summary>
        /// <param name="FAQId">The unique identification of an FAQ.</param>
        protected internal FAQ _GetFAQ(FAQ_Id FAQId)
        {

            if (!FAQId.IsNullOrEmpty && _FAQs.TryGetValue(FAQId, out FAQ faq))
                return faq;

            return null;

        }


        /// <summary>
        /// Get the FAQ having the given unique identification.
        /// </summary>
        /// <param name="FAQId">The unique identification of the FAQ.</param>
        public FAQ GetFAQ(FAQ_Id FAQId)
        {

            try
            {

                if (FAQsSemaphore.Wait(SemaphoreSlimTimeout))
                    return _GetFAQ(FAQId);

            }
            catch
            { }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

            return null;

        }

        #endregion

        #region TryGetFAQ(FAQId, out FAQ)

        /// <summary>
        /// Try to get the FAQ having the given unique identification.
        /// </summary>
        /// <param name="FAQId">The unique identification of an FAQ.</param>
        /// <param name="FAQ">The FAQ.</param>
        protected internal Boolean _TryGetFAQ(FAQ_Id FAQId, out FAQ FAQ)
        {

            if (!FAQId.IsNullOrEmpty && _FAQs.TryGetValue(FAQId, out FAQ faq))
            {
                FAQ = faq;
                return true;
            }

            FAQ = null;
            return false;

        }


        /// <summary>
        /// Try to get the FAQ having the given unique identification.
        /// </summary>
        /// <param name="FAQId">The unique identification of an FAQ.</param>
        /// <param name="FAQ">The FAQ.</param>
        public Boolean TryGetFAQ(FAQ_Id   FAQId,
                                         out FAQ  FAQ)
        {

            try
            {

                if (FAQsSemaphore.Wait(SemaphoreSlimTimeout) &&
                    _TryGetFAQ(FAQId, out FAQ faq))
                {
                    FAQ = faq;
                    return true;
                }

            }
            catch
            { }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

            FAQ = null;
            return false;

        }

        #endregion


        #region RemoveFAQ(FAQ, OnRemoved = null, ...)

        /// <summary>
        /// A delegate called whenever a FAQ was removed.
        /// </summary>
        /// <param name="Timestamp">The timestamp when the FAQ was removed.</param>
        /// <param name="FAQ">The removed FAQ.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">The invoking FAQ identification</param>
        public delegate Task OnFAQRemovedDelegate(DateTime          Timestamp,
                                                          FAQ       FAQ,
                                                          EventTracking_Id  EventTrackingId   = null,
                                                          User_Id?          CurrentUserId     = null);

        /// <summary>
        /// An event fired whenever a FAQ was removed.
        /// </summary>
        public event OnFAQRemovedDelegate OnFAQRemoved;


        #region (class) DeleteFAQResult

        public class DeleteFAQResult
        {

            public Boolean     IsSuccess           { get; }

            public I18NString  ErrorDescription    { get; }


            private DeleteFAQResult(Boolean     IsSuccess,
                                          I18NString  ErrorDescription  = null)
            {
                this.IsSuccess         = IsSuccess;
                this.ErrorDescription  = ErrorDescription;
            }


            public static DeleteFAQResult Success

                => new DeleteFAQResult(true);

            public static DeleteFAQResult Failed(I18NString Reason)

                => new DeleteFAQResult(false,
                                             Reason);

            public static DeleteFAQResult Failed(Exception Exception)

                => new DeleteFAQResult(false,
                                             I18NString.Create(Languages.en,
                                                               Exception.Message));

            public override String ToString()

                => IsSuccess
                       ? "Success"
                       : "Failed" + (ErrorDescription.IsNullOrEmpty()
                                         ? ": " + ErrorDescription.FirstText()
                                         : "!");

        }

        #endregion

        #region (protected internal virtual) CanDeleteFAQ(FAQ)

        /// <summary>
        /// Determines whether the FAQ can safely be removed from the API.
        /// </summary>
        /// <param name="FAQ">The FAQ to be removed.</param>
        protected internal virtual I18NString CanDeleteFAQ(FAQ FAQ)
        {
            return new I18NString(Languages.en, "Currently not possible!");
        }

        #endregion


        #region (protected internal) _RemoveFAQ(FAQ, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given FAQ from the API.
        /// </summary>
        /// <param name="FAQ">The FAQ to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the FAQ had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional FAQ identification initiating this command/request.</param>
        protected internal async Task<DeleteFAQResult> _RemoveFAQ(FAQ                            FAQ,
                                                                         Action<FAQ, EventTracking_Id>  OnRemoved         = null,
                                                                         EventTracking_Id                       EventTrackingId   = null,
                                                                         User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ),
                                                "The given FAQ must not be null!");

            if (FAQ.API != this || !_FAQs.TryGetValue(FAQ.Id, out FAQ FAQToBeRemoved))
                throw new ArgumentException    ("The given FAQ '" + FAQ.Id + "' does not exists in this API!",
                                                nameof(FAQ));


            var result = CanDeleteFAQ(FAQ);

            if (result == null)
            {

                var eventTrackingId = EventTrackingId ?? EventTracking_Id.New;

                await WriteToDatabaseFile(removeFAQ_MessageType,
                                          FAQ.ToJSON(false, true),
                                          eventTrackingId,
                                          CurrentUserId);

                _FAQs.Remove(FAQ.Id);


                var OnFAQRemovedLocal = OnFAQRemoved;
                if (OnFAQRemovedLocal != null)
                    await OnFAQRemovedLocal?.Invoke(Timestamp.Now,
                                                            FAQ,
                                                            eventTrackingId,
                                                            CurrentUserId);

                await SendNotifications(FAQ,
                                        removeFAQ_MessageType,
                                        null,
                                        eventTrackingId,
                                        CurrentUserId);

                OnRemoved?.Invoke(FAQ,
                                  eventTrackingId);

                return DeleteFAQResult.Success;

            }
            else
                return DeleteFAQResult.Failed(result);

        }

        #endregion

        #region RemoveFAQ             (FAQ, OnRemoved = null, ...)

        /// <summary>
        /// Remove the given FAQ from the API.
        /// </summary>
        /// <param name="FAQ">The FAQ to be removed from this API.</param>
        /// <param name="OnRemoved">A delegate run whenever the FAQ had been removed successfully.</param>
        /// <param name="EventTrackingId">An optional unique event tracking identification for correlating this request with other events.</param>
        /// <param name="CurrentUserId">An optional FAQ identification initiating this command/request.</param>
        public async Task<DeleteFAQResult> RemoveFAQ(FAQ                            FAQ,
                                                                     Action<FAQ, EventTracking_Id>  OnRemoved         = null,
                                                                     EventTracking_Id                       EventTrackingId   = null,
                                                                     User_Id?                               CurrentUserId     = null)
        {

            if (FAQ is null)
                throw new ArgumentNullException(nameof(FAQ), "The given FAQ must not be null!");

            try
            {

                return (await FAQsSemaphore.WaitAsync(SemaphoreSlimTimeout))

                            ? await _RemoveFAQ(FAQ,
                                                       OnRemoved,
                                                       EventTrackingId,
                                                       CurrentUserId)

                            : null;

            }
            catch (Exception e)
            {
                return DeleteFAQResult.Failed(e);
            }
            finally
            {
                try
                {
                    FAQsSemaphore.Release();
                }
                catch
                { }
            }

        }

        #endregion

        #endregion

        #endregion

        #region DataLicenses

        protected internal readonly Dictionary<DataLicense_Id, DataLicense> _DataLicenses;

        /// <summary>
        /// Return an enumeration of all data licenses.
        /// </summary>
        public IEnumerable<DataLicense> DataLicenses
            => _DataLicenses.Values;


        #region CreateDataLicense           (Id, Description, URLs)

        /// <summary>
        /// Create a new data license.
        /// </summary>
        /// <param name="Id">The unique identification of the data license.</param>
        /// <param name="Description">The description of the data license.</param>
        /// <param name="URLs">Optional URLs for more information.</param>
        public DataLicense CreateDataLicense(DataLicense_Id   Id,
                                             String           Description,
                                             params String[]  URLs)
        {

            lock (_DataLicenses)
            {

                if (_DataLicenses.ContainsKey(Id))
                    throw new ArgumentException("The given data license already exists!", nameof(Id));


                var DataLicense = new DataLicense(Id,
                                                  Description,
                                                  URLs);

                WriteToDatabaseFile(NotificationMessageType.Parse("createDataLicense"),
                                    DataLicense.ToJSON(),
                                    EventTracking_Id.New,
                                    Robot.Id);

                return _DataLicenses.AddAndReturnValue(DataLicense.Id, DataLicense);

            }

        }

        #endregion

        #region CreateDataLicenseIfNotExists(Id, Description, URLs)

        /// <summary>
        /// Create a new data license.
        /// </summary>
        /// <param name="Id">The unique identification of the data license.</param>
        /// <param name="Description">The description of the data license.</param>
        /// <param name="URLs">Optional URLs for more information.</param>
        public DataLicense CreateDataLicenseIfNotExists(DataLicense_Id   Id,
                                                        String           Description,
                                                        params String[]  URLs)
        {

            lock (_DataLicenses)
            {

                if (_DataLicenses.ContainsKey(Id))
                    return _DataLicenses[Id];

                return CreateDataLicense(Id,
                                         Description,
                                         URLs);

            }

        }

        #endregion


        #region GetDataLicense   (DataLicenseId)

        /// <summary>
        /// Get the data license having the given unique identification.
        /// </summary>
        /// <param name="DataLicenseId">The unique identification of the data license.</param>
        public DataLicense GetDataLicense(DataLicense_Id  DataLicenseId)
        {

            lock (_DataLicenses)
            {

                if (_DataLicenses.TryGetValue(DataLicenseId, out DataLicense DataLicense))
                    return DataLicense;

                return null;

            }

        }

        #endregion

        #region TryGetDataLicense(DataLicenseId, out DataLicense)

        /// <summary>
        /// Try to get the data license having the given unique identification.
        /// </summary>
        /// <param name="DataLicenseId">The unique identification of the data license.</param>
        /// <param name="DataLicense">The data license.</param>
        public Boolean TryGetDataLicense(DataLicense_Id   DataLicenseId,
                                         out DataLicense  DataLicense)
        {

            lock (_DataLicenses)
            {
                return _DataLicenses.TryGetValue(DataLicenseId, out DataLicense);
            }

        }

        #endregion

        #endregion

    }

}
